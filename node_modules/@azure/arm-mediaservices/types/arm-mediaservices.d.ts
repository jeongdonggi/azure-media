import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Describes Advanced Audio Codec (AAC) audio encoding settings. */
export declare interface AacAudio extends Audio_2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AacAudio";
    /** The encoding profile to be used when encoding audio with AAC. */
    profile?: AacAudioProfile;
}

/**
 * Defines values for AacAudioProfile. \
 * {@link KnownAacAudioProfile} can be used interchangeably with AacAudioProfile,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AacLc**: Specifies that the output audio is to be encoded into AAC Low Complexity profile (AAC-LC). \
 * **HeAacV1**: Specifies that the output audio is to be encoded into HE-AAC v1 profile. \
 * **HeAacV2**: Specifies that the output audio is to be encoded into HE-AAC v2 profile.
 */
export declare type AacAudioProfile = string;

/** Specifies the clip time as an absolute time position in the media file.  The absolute time can point to a different position depending on whether the media file starts from a timestamp of zero or not. */
export declare interface AbsoluteClipTime extends ClipTime {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AbsoluteClipTime";
    /** The time position on the timeline of the input media. It is usually specified as an ISO8601 period. e.g PT30S for 30 seconds. */
    time: string;
}

export declare interface AccessControl {
    /** The behavior for IP access control in Key Delivery. */
    defaultAction?: DefaultAction;
    /** The IP allow list for access control in Key Delivery. If the default action is set to 'Allow', the IP allow list must be empty. */
    ipAllowList?: string[];
}

export declare interface AccountEncryption {
    /** The type of key used to encrypt the Account Key. */
    type: AccountEncryptionKeyType;
    /** The properties of the key used to encrypt the account. */
    keyVaultProperties?: KeyVaultProperties;
    /** The Key Vault identity. */
    identity?: ResourceIdentity;
    /**
     * The current status of the Key Vault mapping.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/**
 * Defines values for AccountEncryptionKeyType. \
 * {@link KnownAccountEncryptionKeyType} can be used interchangeably with AccountEncryptionKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemKey**: The Account Key is encrypted with a System Key. \
 * **CustomerKey**: The Account Key is encrypted with a Customer Key.
 */
export declare type AccountEncryptionKeyType = string;

/** An Account Filter. */
export declare interface AccountFilter extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The presentation time range. */
    presentationTimeRange?: PresentationTimeRange;
    /** The first quality. */
    firstQuality?: FirstQuality;
    /** The tracks selection conditions. */
    tracks?: FilterTrackSelection[];
}

/** A collection of AccountFilter items. */
export declare interface AccountFilterCollection {
    /** A collection of AccountFilter items. */
    value?: AccountFilter[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

/** Interface representing a AccountFilters. */
export declare interface AccountFilters {
    /**
     * List Account Filters in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: AccountFiltersListOptionalParams): PagedAsyncIterableIterator<AccountFilter>;
    /**
     * Get the details of an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, filterName: string, options?: AccountFiltersGetOptionalParams): Promise<AccountFiltersGetResponse>;
    /**
     * Creates or updates an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, filterName: string, parameters: AccountFilter, options?: AccountFiltersCreateOrUpdateOptionalParams): Promise<AccountFiltersCreateOrUpdateResponse>;
    /**
     * Deletes an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, filterName: string, options?: AccountFiltersDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, filterName: string, parameters: AccountFilter, options?: AccountFiltersUpdateOptionalParams): Promise<AccountFiltersUpdateResponse>;
}

/** Optional parameters. */
export declare interface AccountFiltersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AccountFiltersCreateOrUpdateResponse = AccountFilter;

/** Optional parameters. */
export declare interface AccountFiltersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AccountFiltersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AccountFiltersGetResponse = AccountFilter;

/** Optional parameters. */
export declare interface AccountFiltersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AccountFiltersListNextResponse = AccountFilterCollection;

/** Optional parameters. */
export declare interface AccountFiltersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AccountFiltersListResponse = AccountFilterCollection;

/** Optional parameters. */
export declare interface AccountFiltersUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AccountFiltersUpdateResponse = AccountFilter;

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**: An internal action.
 */
export declare type ActionType = string;

/** Akamai access control */
export declare interface AkamaiAccessControl {
    /** authentication key list */
    akamaiSignatureHeaderAuthenticationKeyList?: AkamaiSignatureHeaderAuthenticationKey[];
}

/** Akamai Signature Header authentication key. */
export declare interface AkamaiSignatureHeaderAuthenticationKey {
    /** identifier of the key */
    identifier?: string;
    /** authentication key */
    base64Key?: string;
    /** The expiration time of the authentication key. */
    expiration?: Date;
}

/**
 * Defines values for AnalysisResolution. \
 * {@link KnownAnalysisResolution} can be used interchangeably with AnalysisResolution,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SourceResolution** \
 * **StandardDefinition**
 */
export declare type AnalysisResolution = string;

/** The streaming endpoint sku capacity. */
export declare interface ArmStreamingEndpointCapacity {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly scaleType?: string;
    /** The streaming endpoint default capacity. */
    default?: number;
    /** The streaming endpoint minimum capacity. */
    minimum?: number;
    /** The streaming endpoint maximum capacity. */
    maximum?: number;
}

/** The streaming endpoint current sku. */
export declare interface ArmStreamingEndpointCurrentSku {
    /**
     * The streaming endpoint sku name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The streaming endpoint sku capacity. */
    capacity?: number;
}

/** The streaming endpoint sku. */
export declare interface ArmStreamingEndpointSku {
    /**
     * The streaming endpoint sku name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
}

export declare interface ArmStreamingEndpointSkuInfo {
    resourceType?: string;
    /** The streaming endpoint sku capacity. */
    capacity?: ArmStreamingEndpointCapacity;
    /** The streaming endpoint sku. */
    sku?: ArmStreamingEndpointSku;
}

/** An Asset. */
export declare interface Asset extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The Asset ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assetId?: string;
    /**
     * The creation date of the Asset.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The last modified date of the Asset.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /** The alternate ID of the Asset. */
    alternateId?: string;
    /** The Asset description. */
    description?: string;
    /** The name of the asset blob container. */
    container?: string;
    /** The name of the storage account. */
    storageAccountName?: string;
    /**
     * The Asset encryption format. One of None or MediaStorageEncryption.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageEncryptionFormat?: AssetStorageEncryptionFormat;
}

/** A collection of Asset items. */
export declare interface AssetCollection {
    /** A collection of Asset items. */
    value?: Asset[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

/**
 * Defines values for AssetContainerPermission. \
 * {@link KnownAssetContainerPermission} can be used interchangeably with AssetContainerPermission,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Read**: The SAS URL will allow read access to the container. \
 * **ReadWrite**: The SAS URL will allow read and write access to the container. \
 * **ReadWriteDelete**: The SAS URL will allow read, write and delete access to the container.
 */
export declare type AssetContainerPermission = string;

/** The Asset Storage container SAS URLs. */
export declare interface AssetContainerSas {
    /** The list of Asset container SAS URLs. */
    assetContainerSasUrls?: string[];
}

/** The Asset File Storage encryption metadata. */
export declare interface AssetFileEncryptionMetadata {
    /** The Asset File initialization vector. */
    initializationVector?: string;
    /** The Asset File name. */
    assetFileName?: string;
    /** The Asset File Id. */
    assetFileId: string;
}

/** An Asset Filter. */
export declare interface AssetFilter extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The presentation time range. */
    presentationTimeRange?: PresentationTimeRange;
    /** The first quality. */
    firstQuality?: FirstQuality;
    /** The tracks selection conditions. */
    tracks?: FilterTrackSelection[];
}

/** A collection of AssetFilter items. */
export declare interface AssetFilterCollection {
    /** A collection of AssetFilter items. */
    value?: AssetFilter[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

/** Interface representing a AssetFilters. */
export declare interface AssetFilters {
    /**
     * List Asset Filters associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, assetName: string, options?: AssetFiltersListOptionalParams): PagedAsyncIterableIterator<AssetFilter>;
    /**
     * Get the details of an Asset Filter associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param filterName The Asset Filter name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, assetName: string, filterName: string, options?: AssetFiltersGetOptionalParams): Promise<AssetFiltersGetResponse>;
    /**
     * Creates or updates an Asset Filter associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param filterName The Asset Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, assetName: string, filterName: string, parameters: AssetFilter, options?: AssetFiltersCreateOrUpdateOptionalParams): Promise<AssetFiltersCreateOrUpdateResponse>;
    /**
     * Deletes an Asset Filter associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param filterName The Asset Filter name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, assetName: string, filterName: string, options?: AssetFiltersDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing Asset Filter associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param filterName The Asset Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, assetName: string, filterName: string, parameters: AssetFilter, options?: AssetFiltersUpdateOptionalParams): Promise<AssetFiltersUpdateResponse>;
}

/** Optional parameters. */
export declare interface AssetFiltersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AssetFiltersCreateOrUpdateResponse = AssetFilter;

/** Optional parameters. */
export declare interface AssetFiltersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AssetFiltersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AssetFiltersGetResponse = AssetFilter;

/** Optional parameters. */
export declare interface AssetFiltersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AssetFiltersListNextResponse = AssetFilterCollection;

/** Optional parameters. */
export declare interface AssetFiltersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AssetFiltersListResponse = AssetFilterCollection;

/** Optional parameters. */
export declare interface AssetFiltersUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AssetFiltersUpdateResponse = AssetFilter;

/** Interface representing a Assets. */
export declare interface Assets {
    /**
     * List Assets in the Media Services account with optional filtering and ordering
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: AssetsListOptionalParams): PagedAsyncIterableIterator<Asset>;
    /**
     * Get the details of an Asset in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, assetName: string, options?: AssetsGetOptionalParams): Promise<AssetsGetResponse>;
    /**
     * Creates or updates an Asset in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, assetName: string, parameters: Asset, options?: AssetsCreateOrUpdateOptionalParams): Promise<AssetsCreateOrUpdateResponse>;
    /**
     * Deletes an Asset in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, assetName: string, options?: AssetsDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing Asset in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, assetName: string, parameters: Asset, options?: AssetsUpdateOptionalParams): Promise<AssetsUpdateResponse>;
    /**
     * Lists storage container URLs with shared access signatures (SAS) for uploading and downloading Asset
     * content. The signatures are derived from the storage account keys.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    listContainerSas(resourceGroupName: string, accountName: string, assetName: string, parameters: ListContainerSasInput, options?: AssetsListContainerSasOptionalParams): Promise<AssetsListContainerSasResponse>;
    /**
     * Gets the Asset storage encryption keys used to decrypt content created by version 2 of the Media
     * Services API
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    getEncryptionKey(resourceGroupName: string, accountName: string, assetName: string, options?: AssetsGetEncryptionKeyOptionalParams): Promise<AssetsGetEncryptionKeyResponse>;
    /**
     * Lists Streaming Locators which are associated with this asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    listStreamingLocators(resourceGroupName: string, accountName: string, assetName: string, options?: AssetsListStreamingLocatorsOptionalParams): Promise<AssetsListStreamingLocatorsResponse>;
}

/** Optional parameters. */
export declare interface AssetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AssetsCreateOrUpdateResponse = Asset;

/** Optional parameters. */
export declare interface AssetsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AssetsGetEncryptionKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEncryptionKey operation. */
export declare type AssetsGetEncryptionKeyResponse = StorageEncryptedAssetDecryptionData;

/** Optional parameters. */
export declare interface AssetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AssetsGetResponse = Asset;

/** Optional parameters. */
export declare interface AssetsListContainerSasOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listContainerSas operation. */
export declare type AssetsListContainerSasResponse = AssetContainerSas;

/** Optional parameters. */
export declare interface AssetsListNextOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type AssetsListNextResponse = AssetCollection;

/** Optional parameters. */
export declare interface AssetsListOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type AssetsListResponse = AssetCollection;

/** Optional parameters. */
export declare interface AssetsListStreamingLocatorsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listStreamingLocators operation. */
export declare type AssetsListStreamingLocatorsResponse = ListStreamingLocatorsResponse;

/**
 * Defines values for AssetStorageEncryptionFormat. \
 * {@link KnownAssetStorageEncryptionFormat} can be used interchangeably with AssetStorageEncryptionFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: The Asset does not use client-side storage encryption (this is the only allowed value for new Assets). \
 * **MediaStorageClientEncryption**: The Asset is encrypted with Media Services client-side encryption.
 */
export declare type AssetStorageEncryptionFormat = string;

/** Properties of the Streaming Locator. */
export declare interface AssetStreamingLocator {
    /**
     * Streaming Locator name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Asset Name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly assetName?: string;
    /**
     * The creation time of the Streaming Locator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The start time of the Streaming Locator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The end time of the Streaming Locator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * StreamingLocatorId of the Streaming Locator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly streamingLocatorId?: string;
    /**
     * Name of the Streaming Policy used by this Streaming Locator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly streamingPolicyName?: string;
    /**
     * Name of the default ContentKeyPolicy used by this Streaming Locator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultContentKeyPolicyName?: string;
}

/** Optional parameters. */
export declare interface AssetsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AssetsUpdateResponse = Asset;

/** An Asset Track resource. */
export declare interface AssetTrack extends ProxyResource {
    /** Detailed information about a track in the asset. */
    track?: TrackBaseUnion;
    /**
     * Provisioning state of the asset track.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** A collection of AssetTrack items. */
export declare interface AssetTrackCollection {
    /** A collection of AssetTrack items. */
    value?: AssetTrack[];
}

/** Status of asset track operation. */
export declare interface AssetTrackOperationStatus {
    /** Operation identifier. */
    name: string;
    /** Operation resource ID. */
    id?: string;
    /** Operation start time. */
    startTime?: Date;
    /** Operation end time. */
    endTime?: Date;
    /** Operation status. */
    status: string;
    /** The error detail. */
    error?: ErrorDetail;
}

/** The status of an async operation. */
export declare interface AsyncOperationResult {
    /** The error object */
    error?: ErrorDetail;
    /** Operation Id of the async operation. */
    name?: string;
    /** Operation status of the async operation. */
    status?: AsyncOperationStatus;
}

/**
 * Defines values for AsyncOperationStatus. \
 * {@link KnownAsyncOperationStatus} can be used interchangeably with AsyncOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **InProgress**
 */
export declare type AsyncOperationStatus = string;

/**
 * Defines values for AttributeFilter. \
 * {@link KnownAttributeFilter} can be used interchangeably with AttributeFilter,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **All**: All tracks will be included. \
 * **Top**: The first track will be included when the attribute is sorted in descending order.  Generally used to select the largest bitrate. \
 * **Bottom**: The first track will be included when the attribute is sorted in ascending order.  Generally used to select the smallest bitrate. \
 * **ValueEquals**: Any tracks that have an attribute equal to the value given will be included.
 */
export declare type AttributeFilter = string;

/** Defines the common properties for all audio codecs. */
declare interface Audio_2 extends Codec {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.Audio" | "#Microsoft.Media.AacAudio";
    /** The number of channels in the audio. */
    channels?: number;
    /** The sampling rate to use for encoding in hertz. */
    samplingRate?: number;
    /** The bitrate, in bits per second, of the output encoded audio. */
    bitrate?: number;
}
export { Audio_2 as Audio }

/**
 * Defines values for AudioAnalysisMode. \
 * {@link KnownAudioAnalysisMode} can be used interchangeably with AudioAnalysisMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard**: Performs all operations included in the Basic mode, additionally performing language detection and speaker diarization. \
 * **Basic**: This mode performs speech-to-text transcription and generation of a VTT subtitle\/caption file. The output of this mode includes an Insights JSON file including only the keywords, transcription,and timing information. Automatic language detection and speaker diarization are not included in this mode.
 */
export declare type AudioAnalysisMode = string;

/** The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track. */
export declare interface AudioAnalyzerPreset extends Preset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AudioAnalyzerPreset" | "#Microsoft.Media.VideoAnalyzerPreset";
    /** The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463 */
    audioLanguage?: string;
    /** Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen. */
    mode?: AudioAnalysisMode;
    /** Dictionary containing key value pairs for parameters not exposed in the preset itself */
    experimentalOptions?: {
        [propertyName: string]: string;
    };
}

export declare type AudioAnalyzerPresetUnion = AudioAnalyzerPreset | VideoAnalyzerPreset;

/** Describes the properties of an audio overlay. */
export declare interface AudioOverlay extends Overlay {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AudioOverlay";
}

/** Represents an audio track in the asset. */
export declare interface AudioTrack extends TrackBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AudioTrack";
    /** The file name to the source file. This file is located in the storage container of the asset. */
    fileName?: string;
    /** The display name of the audio track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA. */
    displayName?: string;
    /** The RFC5646 language code for the audio track. */
    languageCode?: string;
    /** The HLS specific setting for the audio track. */
    hlsSettings?: HlsSettings;
    /** The DASH specific setting for the audio track. */
    dashSettings?: DashSettings;
    /** The MPEG-4 audio track ID for the audio track. */
    mpeg4TrackId?: number;
    /**
     * The stream bit rate for the audio track.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly bitRate?: number;
}

/** A TrackSelection to select audio tracks. */
export declare interface AudioTrackDescriptor extends TrackDescriptor {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AudioTrackDescriptor" | "#Microsoft.Media.SelectAudioTrackByAttribute" | "#Microsoft.Media.SelectAudioTrackById";
    /** Optional designation for single channel audio tracks.  Can be used to combine the tracks into stereo or multi-channel audio tracks. */
    channelMapping?: ChannelMapping;
}

export declare type AudioTrackDescriptorUnion = AudioTrackDescriptor | SelectAudioTrackByAttribute | SelectAudioTrackById;

export declare type AudioUnion = Audio_2 | AacAudio;

export declare class AzureMediaServices extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureMediaServices class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureMediaServicesOptionalParams);
    accountFilters: AccountFilters;
    operations: Operations;
    mediaservices: Mediaservices;
    privateLinkResources: PrivateLinkResources;
    privateEndpointConnections: PrivateEndpointConnections;
    locations: Locations;
    mediaServicesOperationStatuses: MediaServicesOperationStatuses;
    mediaServicesOperationResults: MediaServicesOperationResults;
    assets: Assets;
    assetFilters: AssetFilters;
    tracks: Tracks;
    operationStatuses: OperationStatuses;
    operationResults: OperationResults;
    contentKeyPolicies: ContentKeyPolicies;
    transforms: Transforms;
    jobs: Jobs;
    streamingPolicies: StreamingPolicies;
    streamingLocators: StreamingLocators;
    liveEvents: LiveEvents;
    liveOutputs: LiveOutputs;
    streamingEndpoints: StreamingEndpoints;
}

/** Optional parameters. */
export declare interface AzureMediaServicesOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * Defines values for BlurType. \
 * {@link KnownBlurType} can be used interchangeably with BlurType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Box**: Box: debug filter, bounding box only \
 * **Low**: Low: box-car blur filter \
 * **Med**: Med: Gaussian blur filter \
 * **High**: High: Confuse blur filter \
 * **Black**: Black: Black out filter
 */
export declare type BlurType = string;

/** Describes a built-in preset for encoding the input video with the Standard Encoder. */
export declare interface BuiltInStandardEncoderPreset extends Preset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.BuiltInStandardEncoderPreset";
    /** Optional configuration settings for encoder. Configurations is only supported for ContentAwareEncoding and H265ContentAwareEncoding BuiltInStandardEncoderPreset. */
    configurations?: PresetConfigurations;
    /** The built-in preset to be used for encoding videos. */
    presetName: EncoderNamedPreset;
}

/** Class to specify DRM configurations of CommonEncryptionCbcs scheme in Streaming Policy */
export declare interface CbcsDrmConfiguration {
    /** FairPlay configurations */
    fairPlay?: StreamingPolicyFairPlayConfiguration;
    /** PlayReady configurations */
    playReady?: StreamingPolicyPlayReadyConfiguration;
    /** Widevine configurations */
    widevine?: StreamingPolicyWidevineConfiguration;
}

/** Class to specify DRM configurations of CommonEncryptionCenc scheme in Streaming Policy */
export declare interface CencDrmConfiguration {
    /** PlayReady configurations */
    playReady?: StreamingPolicyPlayReadyConfiguration;
    /** Widevine configurations */
    widevine?: StreamingPolicyWidevineConfiguration;
}

/**
 * Defines values for ChannelMapping. \
 * {@link KnownChannelMapping} can be used interchangeably with ChannelMapping,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FrontLeft**: The Front Left Channel. \
 * **FrontRight**: The Front Right Channel. \
 * **Center**: The Center Channel. \
 * **LowFrequencyEffects**: Low Frequency Effects Channel.  Sometimes referred to as the Subwoofer. \
 * **BackLeft**: The Back Left Channel.  Sometimes referred to as the Left Surround Channel. \
 * **BackRight**: The Back Right Channel.  Sometimes referred to as the Right Surround Channel. \
 * **StereoLeft**: The Left Stereo channel.  Sometimes referred to as Down Mix Left. \
 * **StereoRight**: The Right Stereo channel.  Sometimes referred to as Down Mix Right.
 */
export declare type ChannelMapping = string;

/** The input to the check name availability request. */
export declare interface CheckNameAvailabilityInput {
    /** The account name. */
    name?: string;
    /** The account type. For a Media Services account, this should be 'MediaServices'. */
    type?: string;
}

/** Class to specify ClearKey configuration of common encryption schemes in Streaming Policy */
export declare interface ClearKeyEncryptionConfiguration {
    /** Template for the URL of the custom service delivering content keys to end user players. Not required when using Azure Media Services for issuing licenses. The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token value is {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId. */
    customKeysAcquisitionUrlTemplate?: string;
}

/** Base class for specifying a clip time. Use sub classes of this class to specify the time position in the media. */
export declare interface ClipTime {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AbsoluteClipTime" | "#Microsoft.Media.UtcClipTime";
}

export declare type ClipTimeUnion = ClipTime | AbsoluteClipTime | UtcClipTime;

/** Describes the basic properties of all codecs. */
export declare interface Codec {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.Audio" | "#Microsoft.Media.AacAudio" | "#Microsoft.Media.Video" | "#Microsoft.Media.H265Video" | "#Microsoft.Media.CopyVideo" | "#Microsoft.Media.Image" | "#Microsoft.Media.CopyAudio" | "#Microsoft.Media.H264Video" | "#Microsoft.Media.JpgImage" | "#Microsoft.Media.PngImage";
    /** An optional label for the codec. The label can be used to control muxing behavior. */
    label?: string;
}

export declare type CodecUnion = Codec | AudioUnion | VideoUnion | CopyVideo | CopyAudio;

/** Class for CommonEncryptionCbcs encryption scheme */
export declare interface CommonEncryptionCbcs {
    /** Representing supported protocols */
    enabledProtocols?: EnabledProtocols;
    /** Representing which tracks should not be encrypted */
    clearTracks?: TrackSelection[];
    /** Representing default content key for each encryption scheme and separate content keys for specific tracks */
    contentKeys?: StreamingPolicyContentKeys;
    /** Configuration of DRMs for current encryption scheme */
    drm?: CbcsDrmConfiguration;
    /** Optional configuration supporting ClearKey in CommonEncryptionCbcs encryption scheme. */
    clearKeyEncryptionConfiguration?: ClearKeyEncryptionConfiguration;
}

/** Class for envelope encryption scheme */
export declare interface CommonEncryptionCenc {
    /** Representing supported protocols */
    enabledProtocols?: EnabledProtocols;
    /** Representing which tracks should not be encrypted */
    clearTracks?: TrackSelection[];
    /** Representing default content key for each encryption scheme and separate content keys for specific tracks */
    contentKeys?: StreamingPolicyContentKeys;
    /** Configuration of DRMs for CommonEncryptionCenc encryption scheme */
    drm?: CencDrmConfiguration;
    /** Optional configuration supporting ClearKey in CommonEncryptionCenc encryption scheme. */
    clearKeyEncryptionConfiguration?: ClearKeyEncryptionConfiguration;
}

/**
 * Defines values for Complexity. \
 * {@link KnownComplexity} can be used interchangeably with Complexity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Speed**: Configures the encoder to use settings optimized for faster encoding. Quality is sacrificed to decrease encoding time. \
 * **Balanced**: Configures the encoder to use settings that achieve a balance between speed and quality. \
 * **Quality**: Configures the encoder to use settings optimized to produce higher quality output at the expense of slower overall encode time.
 */
export declare type Complexity = string;

/** Interface representing a ContentKeyPolicies. */
export declare interface ContentKeyPolicies {
    /**
     * Lists the Content Key Policies in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: ContentKeyPoliciesListOptionalParams): PagedAsyncIterableIterator<ContentKeyPolicy>;
    /**
     * Get the details of a Content Key Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, contentKeyPolicyName: string, options?: ContentKeyPoliciesGetOptionalParams): Promise<ContentKeyPoliciesGetResponse>;
    /**
     * Create or update a Content Key Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, contentKeyPolicyName: string, parameters: ContentKeyPolicy, options?: ContentKeyPoliciesCreateOrUpdateOptionalParams): Promise<ContentKeyPoliciesCreateOrUpdateResponse>;
    /**
     * Deletes a Content Key Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, contentKeyPolicyName: string, options?: ContentKeyPoliciesDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing Content Key Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, contentKeyPolicyName: string, parameters: ContentKeyPolicy, options?: ContentKeyPoliciesUpdateOptionalParams): Promise<ContentKeyPoliciesUpdateResponse>;
    /**
     * Get a Content Key Policy including secret values
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param options The options parameters.
     */
    getPolicyPropertiesWithSecrets(resourceGroupName: string, accountName: string, contentKeyPolicyName: string, options?: ContentKeyPoliciesGetPolicyPropertiesWithSecretsOptionalParams): Promise<ContentKeyPoliciesGetPolicyPropertiesWithSecretsResponse>;
}

/** Optional parameters. */
export declare interface ContentKeyPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ContentKeyPoliciesCreateOrUpdateResponse = ContentKeyPolicy;

/** Optional parameters. */
export declare interface ContentKeyPoliciesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ContentKeyPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ContentKeyPoliciesGetPolicyPropertiesWithSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPolicyPropertiesWithSecrets operation. */
export declare type ContentKeyPoliciesGetPolicyPropertiesWithSecretsResponse = ContentKeyPolicyProperties;

/** Contains response data for the get operation. */
export declare type ContentKeyPoliciesGetResponse = ContentKeyPolicy;

/** Optional parameters. */
export declare interface ContentKeyPoliciesListNextOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type ContentKeyPoliciesListNextResponse = ContentKeyPolicyCollection;

/** Optional parameters. */
export declare interface ContentKeyPoliciesListOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type ContentKeyPoliciesListResponse = ContentKeyPolicyCollection;

/** Optional parameters. */
export declare interface ContentKeyPoliciesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ContentKeyPoliciesUpdateResponse = ContentKeyPolicy;

/** A Content Key Policy resource. */
export declare interface ContentKeyPolicy extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The legacy Policy ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyId?: string;
    /**
     * The creation date of the Policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The last modified date of the Policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /** A description for the Policy. */
    description?: string;
    /** The Key Policy options. */
    options?: ContentKeyPolicyOption[];
}

/** Represents a configuration for non-DRM keys. */
export declare interface ContentKeyPolicyClearKeyConfiguration extends ContentKeyPolicyConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration";
}

/** A collection of ContentKeyPolicy items. */
export declare interface ContentKeyPolicyCollection {
    /** A collection of ContentKeyPolicy items. */
    value?: ContentKeyPolicy[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

/** Base class for Content Key Policy configuration. A derived class must be used to create a configuration. */
export declare interface ContentKeyPolicyConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration" | "#Microsoft.Media.ContentKeyPolicyUnknownConfiguration" | "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration" | "#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration" | "#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration";
}

export declare type ContentKeyPolicyConfigurationUnion = ContentKeyPolicyConfiguration | ContentKeyPolicyClearKeyConfiguration | ContentKeyPolicyUnknownConfiguration | ContentKeyPolicyWidevineConfiguration | ContentKeyPolicyPlayReadyConfiguration | ContentKeyPolicyFairPlayConfiguration;

/** Specifies a configuration for FairPlay licenses. */
export declare interface ContentKeyPolicyFairPlayConfiguration extends ContentKeyPolicyConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration";
    /** The key that must be used as FairPlay Application Secret key. */
    ask: Uint8Array | null;
    /** The password encrypting FairPlay certificate in PKCS 12 (pfx) format. */
    fairPlayPfxPassword: string | null;
    /** The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key). */
    fairPlayPfx: string | null;
    /** The rental and lease key type. */
    rentalAndLeaseKeyType: ContentKeyPolicyFairPlayRentalAndLeaseKeyType;
    /** The rental duration. Must be greater than or equal to 0. */
    rentalDuration: number;
    /** Offline rental policy */
    offlineRentalConfiguration?: ContentKeyPolicyFairPlayOfflineRentalConfiguration;
}

export declare interface ContentKeyPolicyFairPlayOfflineRentalConfiguration {
    /** Playback duration */
    playbackDurationSeconds: number;
    /** Storage duration */
    storageDurationSeconds: number;
}

/**
 * Defines values for ContentKeyPolicyFairPlayRentalAndLeaseKeyType. \
 * {@link KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType} can be used interchangeably with ContentKeyPolicyFairPlayRentalAndLeaseKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version. \
 * **Undefined**: Key duration is not specified. \
 * **DualExpiry**: Dual expiry for offline rental. \
 * **PersistentUnlimited**: Content key can be persisted with an unlimited duration \
 * **PersistentLimited**: Content key can be persisted and the valid duration is limited by the Rental Duration value
 */
export declare type ContentKeyPolicyFairPlayRentalAndLeaseKeyType = string;

/** Represents an open restriction. License or key will be delivered on every request. */
export declare interface ContentKeyPolicyOpenRestriction extends ContentKeyPolicyRestriction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyOpenRestriction";
}

/** Represents a policy option. */
export declare interface ContentKeyPolicyOption {
    /**
     * The legacy Policy Option ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyOptionId?: string;
    /** The Policy Option description. */
    name?: string;
    /** The key delivery configuration. */
    configuration: ContentKeyPolicyConfigurationUnion;
    /** The requirements that must be met to deliver keys with this configuration */
    restriction: ContentKeyPolicyRestrictionUnion;
}

/** Specifies a configuration for PlayReady licenses. */
export declare interface ContentKeyPolicyPlayReadyConfiguration extends ContentKeyPolicyConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration";
    /** The PlayReady licenses. */
    licenses: ContentKeyPolicyPlayReadyLicense[];
    /** The custom response data. */
    responseCustomData?: string;
}

/** Specifies that the content key ID is in the PlayReady header. */
export declare interface ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader extends ContentKeyPolicyPlayReadyContentKeyLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader";
}

/** Specifies that the content key ID is specified in the PlayReady configuration. */
export declare interface ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier extends ContentKeyPolicyPlayReadyContentKeyLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier";
    /** The content key ID. */
    keyId: string | null;
}

/** Base class for content key ID location. A derived class must be used to represent the location. */
export declare interface ContentKeyPolicyPlayReadyContentKeyLocation {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader" | "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier";
}

export declare type ContentKeyPolicyPlayReadyContentKeyLocationUnion = ContentKeyPolicyPlayReadyContentKeyLocation | ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader | ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier;

/**
 * Defines values for ContentKeyPolicyPlayReadyContentType. \
 * {@link KnownContentKeyPolicyPlayReadyContentType} can be used interchangeably with ContentKeyPolicyPlayReadyContentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version. \
 * **Unspecified**: Unspecified content type. \
 * **UltraVioletDownload**: Ultraviolet download content type. \
 * **UltraVioletStreaming**: Ultraviolet streaming content type.
 */
export declare type ContentKeyPolicyPlayReadyContentType = string;

/** Configures the Explicit Analog Television Output Restriction control bits. For further details see the PlayReady Compliance Rules. */
export declare interface ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction {
    /** Indicates whether this restriction is enforced on a Best Effort basis. */
    bestEffort: boolean;
    /** Configures the restriction control bits. Must be between 0 and 3 inclusive. */
    configurationData: number;
}

/** The PlayReady license */
export declare interface ContentKeyPolicyPlayReadyLicense {
    /** A flag indicating whether test devices can use the license. */
    allowTestDevices: boolean;
    /** The security level. */
    securityLevel?: SecurityLevel;
    /** The begin date of license */
    beginDate?: Date;
    /** The expiration date of license. */
    expirationDate?: Date;
    /** The relative begin date of license. */
    relativeBeginDate?: string;
    /** The relative expiration date of license. */
    relativeExpirationDate?: string;
    /** The grace period of license. */
    gracePeriod?: string;
    /** The license PlayRight */
    playRight?: ContentKeyPolicyPlayReadyPlayRight;
    /** The license type. */
    licenseType: ContentKeyPolicyPlayReadyLicenseType;
    /** The content key location. */
    contentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocationUnion;
    /** The PlayReady content type. */
    contentType: ContentKeyPolicyPlayReadyContentType;
}

/**
 * Defines values for ContentKeyPolicyPlayReadyLicenseType. \
 * {@link KnownContentKeyPolicyPlayReadyLicenseType} can be used interchangeably with ContentKeyPolicyPlayReadyLicenseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version. \
 * **NonPersistent**: Non persistent license. \
 * **Persistent**: Persistent license. Allows offline playback.
 */
export declare type ContentKeyPolicyPlayReadyLicenseType = string;

/** Configures the Play Right in the PlayReady license. */
export declare interface ContentKeyPolicyPlayReadyPlayRight {
    /** The amount of time that the license is valid after the license is first used to play content. */
    firstPlayExpiration?: string;
    /** Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive. */
    scmsRestriction?: number;
    /** Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive. */
    agcAndColorStripeRestriction?: number;
    /** Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive. */
    explicitAnalogTelevisionOutputRestriction?: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction;
    /** Enables the Image Constraint For Analog Component Video Restriction in the license. */
    digitalVideoOnlyContentRestriction: boolean;
    /** Enables the Image Constraint For Analog Component Video Restriction in the license. */
    imageConstraintForAnalogComponentVideoRestriction: boolean;
    /** Enables the Image Constraint For Analog Component Video Restriction in the license. */
    imageConstraintForAnalogComputerMonitorRestriction: boolean;
    /** Configures Unknown output handling settings of the license. */
    allowPassingVideoContentToUnknownOutput: ContentKeyPolicyPlayReadyUnknownOutputPassingOption;
    /** Specifies the output protection level for uncompressed digital video. */
    uncompressedDigitalVideoOpl?: number;
    /** Specifies the output protection level for compressed digital video. */
    compressedDigitalVideoOpl?: number;
    /** Specifies the output protection level for compressed digital audio. */
    analogVideoOpl?: number;
    /** Specifies the output protection level for compressed digital audio. */
    compressedDigitalAudioOpl?: number;
    /** Specifies the output protection level for uncompressed digital audio. */
    uncompressedDigitalAudioOpl?: number;
}

/**
 * Defines values for ContentKeyPolicyPlayReadyUnknownOutputPassingOption. \
 * {@link KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption} can be used interchangeably with ContentKeyPolicyPlayReadyUnknownOutputPassingOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version. \
 * **NotAllowed**: Passing the video portion of protected content to an Unknown Output is not allowed. \
 * **Allowed**: Passing the video portion of protected content to an Unknown Output is allowed. \
 * **AllowedWithVideoConstriction**: Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution.
 */
export declare type ContentKeyPolicyPlayReadyUnknownOutputPassingOption = string;

/** The properties of the Content Key Policy. */
export declare interface ContentKeyPolicyProperties {
    /**
     * The legacy Policy ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyId?: string;
    /**
     * The creation date of the Policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The last modified date of the Policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /** A description for the Policy. */
    description?: string;
    /** The Key Policy options. */
    options: ContentKeyPolicyOption[];
}

/** Base class for Content Key Policy restrictions. A derived class must be used to create a restriction. */
export declare interface ContentKeyPolicyRestriction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyOpenRestriction" | "#Microsoft.Media.ContentKeyPolicyUnknownRestriction" | "#Microsoft.Media.ContentKeyPolicyTokenRestriction";
}

/** Base class for Content Key Policy key for token validation. A derived class must be used to create a token key. */
export declare interface ContentKeyPolicyRestrictionTokenKey {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey" | "#Microsoft.Media.ContentKeyPolicyRsaTokenKey" | "#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey";
}

export declare type ContentKeyPolicyRestrictionTokenKeyUnion = ContentKeyPolicyRestrictionTokenKey | ContentKeyPolicySymmetricTokenKey | ContentKeyPolicyRsaTokenKey | ContentKeyPolicyX509CertificateTokenKey;

/**
 * Defines values for ContentKeyPolicyRestrictionTokenType. \
 * {@link KnownContentKeyPolicyRestrictionTokenType} can be used interchangeably with ContentKeyPolicyRestrictionTokenType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version. \
 * **Swt**: Simple Web Token. \
 * **Jwt**: JSON Web Token.
 */
export declare type ContentKeyPolicyRestrictionTokenType = string;

export declare type ContentKeyPolicyRestrictionUnion = ContentKeyPolicyRestriction | ContentKeyPolicyOpenRestriction | ContentKeyPolicyUnknownRestriction | ContentKeyPolicyTokenRestriction;

/** Specifies a RSA key for token validation */
export declare interface ContentKeyPolicyRsaTokenKey extends ContentKeyPolicyRestrictionTokenKey {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyRsaTokenKey";
    /** The RSA Parameter exponent */
    exponent: Uint8Array | null;
    /** The RSA Parameter modulus */
    modulus: Uint8Array | null;
}

/** Specifies a symmetric key for token validation. */
export declare interface ContentKeyPolicySymmetricTokenKey extends ContentKeyPolicyRestrictionTokenKey {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey";
    /** The key value of the key */
    keyValue: Uint8Array | null;
}

/** Represents a token claim. */
export declare interface ContentKeyPolicyTokenClaim {
    /** Token claim type. */
    claimType?: string;
    /** Token claim value. */
    claimValue?: string;
}

/** Represents a token restriction. Provided token must match these requirements for successful license or key delivery. */
export declare interface ContentKeyPolicyTokenRestriction extends ContentKeyPolicyRestriction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyTokenRestriction";
    /** The token issuer. */
    issuer: string;
    /** The audience for the token. */
    audience: string;
    /** The primary verification key. */
    primaryVerificationKey: ContentKeyPolicyRestrictionTokenKeyUnion | null;
    /** A list of alternative verification keys. */
    alternateVerificationKeys?: ContentKeyPolicyRestrictionTokenKeyUnion[];
    /** A list of required token claims. */
    requiredClaims?: ContentKeyPolicyTokenClaim[];
    /** The type of token. */
    restrictionTokenType: ContentKeyPolicyRestrictionTokenType;
    /** The OpenID connect discovery document. */
    openIdConnectDiscoveryDocument?: string;
}

/** Represents a ContentKeyPolicyConfiguration that is unavailable in the current API version. */
export declare interface ContentKeyPolicyUnknownConfiguration extends ContentKeyPolicyConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyUnknownConfiguration";
}

/** Represents a ContentKeyPolicyRestriction that is unavailable in the current API version. */
export declare interface ContentKeyPolicyUnknownRestriction extends ContentKeyPolicyRestriction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyUnknownRestriction";
}

/** Specifies a configuration for Widevine licenses. */
export declare interface ContentKeyPolicyWidevineConfiguration extends ContentKeyPolicyConfiguration {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration";
    /** The Widevine template. */
    widevineTemplate: string;
}

/** Specifies a certificate for token validation. */
export declare interface ContentKeyPolicyX509CertificateTokenKey extends ContentKeyPolicyRestrictionTokenKey {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey";
    /** The raw data field of a certificate in PKCS 12 format (X509Certificate2 in .NET) */
    rawBody: Uint8Array | null;
}

/** A codec flag, which tells the encoder to copy the input audio bitstream. */
export declare interface CopyAudio extends Codec {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.CopyAudio";
}

/** A codec flag, which tells the encoder to copy the input video bitstream without re-encoding. */
export declare interface CopyVideo extends Codec {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.CopyVideo";
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The client access policy. */
export declare interface CrossSiteAccessPolicies {
    /** The content of clientaccesspolicy.xml used by Silverlight. */
    clientAccessPolicy?: string;
    /** The content of crossdomain.xml used by Silverlight. */
    crossDomainPolicy?: string;
}

/** The DASH setting for a track. */
export declare interface DashSettings {
    /** The role for the DASH setting. */
    role?: string;
}

/**
 * Defines values for DefaultAction. \
 * {@link KnownDefaultAction} can be used interchangeably with DefaultAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow**: All public IP addresses are allowed. \
 * **Deny**: Public IP addresses are blocked.
 */
export declare type DefaultAction = string;

/** Class to specify properties of default content key for each encryption scheme */
export declare interface DefaultKey {
    /** Label can be used to specify Content Key when creating a Streaming Locator */
    label?: string;
    /** Policy used by Default Key */
    policyName?: string;
}

/** Describes the de-interlacing settings. */
export declare interface Deinterlace {
    /** The field parity for de-interlacing, defaults to Auto. */
    parity?: DeinterlaceParity;
    /** The deinterlacing mode. Defaults to AutoPixelAdaptive. */
    mode?: DeinterlaceMode;
}

/**
 * Defines values for DeinterlaceMode. \
 * {@link KnownDeinterlaceMode} can be used interchangeably with DeinterlaceMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Off**: Disables de-interlacing of the source video. \
 * **AutoPixelAdaptive**: Apply automatic pixel adaptive de-interlacing on each frame in the input video.
 */
export declare type DeinterlaceMode = string;

/**
 * Defines values for DeinterlaceParity. \
 * {@link KnownDeinterlaceParity} can be used interchangeably with DeinterlaceParity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Automatically detect the order of fields \
 * **TopFieldFirst**: Apply top field first processing of input video. \
 * **BottomFieldFirst**: Apply bottom field first processing of input video.
 */
export declare type DeinterlaceParity = string;

export declare interface EdgePolicies {
    usageDataCollectionPolicy?: EdgeUsageDataCollectionPolicy;
}

export declare interface EdgeUsageDataCollectionPolicy {
    /** Usage data collection frequency in ISO 8601 duration format e.g. PT10M , PT5H. */
    dataCollectionFrequency?: string;
    /** Usage data reporting frequency in ISO 8601 duration format e.g. PT10M , PT5H. */
    dataReportingFrequency?: string;
    /** Maximum time for which the functionality of the device will not be hampered for not reporting the usage data. */
    maxAllowedUnreportedUsageDuration?: string;
    /** Details of Event Hub where the usage will be reported. */
    eventHubDetails?: EdgeUsageDataEventHub;
}

export declare interface EdgeUsageDataEventHub {
    /** Name of the Event Hub where usage will be reported. */
    name?: string;
    /** Namespace of the Event Hub where usage will be reported. */
    namespace?: string;
    /** SAS token needed to interact with Event Hub. */
    token?: string;
}

/** Class to specify which protocols are enabled */
export declare interface EnabledProtocols {
    /** Enable Download protocol or not */
    download: boolean;
    /** Enable DASH protocol or not */
    dash: boolean;
    /** Enable HLS protocol or not */
    hls: boolean;
    /** Enable SmoothStreaming protocol or not */
    smoothStreaming: boolean;
}

/**
 * Defines values for EncoderNamedPreset. \
 * {@link KnownEncoderNamedPreset} can be used interchangeably with EncoderNamedPreset,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **H264SingleBitrateSD**: Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. \
 * **H264SingleBitrate720p**: Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. \
 * **H264SingleBitrate1080p**: Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. \
 * **AdaptiveStreaming**: Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best. \
 * **AACGoodQualityAudio**: Produces a single MP4 file containing only stereo audio encoded at 192 kbps. \
 * **ContentAwareEncodingExperimental**: Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved. \
 * **ContentAwareEncoding**: Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved. \
 * **CopyAllBitrateNonInterleaved**: Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed. \
 * **H264MultipleBitrate1080p**: Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 180p. \
 * **H264MultipleBitrate720p**: Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 180p. \
 * **H264MultipleBitrateSD**: Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 240p. \
 * **H265ContentAwareEncoding**: Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved. \
 * **H265AdaptiveStreaming**: Produces a set of GOP aligned MP4 files with H.265 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best. \
 * **H265SingleBitrate720p**: Produces an MP4 file where the video is encoded with H.265 codec at 1800 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. \
 * **H265SingleBitrate1080p**: Produces an MP4 file where the video is encoded with H.265 codec at 3500 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. \
 * **H265SingleBitrate4K**: Produces an MP4 file where the video is encoded with H.265 codec at 9500 kbps and a picture height of 2160 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps.
 */
export declare type EncoderNamedPreset = string;

/**
 * Defines values for EncryptionScheme. \
 * {@link KnownEncryptionScheme} can be used interchangeably with EncryptionScheme,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoEncryption**: NoEncryption scheme \
 * **EnvelopeEncryption**: EnvelopeEncryption scheme \
 * **CommonEncryptionCenc**: CommonEncryptionCenc scheme \
 * **CommonEncryptionCbcs**: CommonEncryptionCbcs scheme
 */
export declare type EncryptionScheme = string;

/** The response from the check name availability request. */
export declare interface EntityNameAvailabilityCheckOutput {
    /** Specifies if the name is available. */
    nameAvailable: boolean;
    /** Specifies the reason if the name is not available. */
    reason?: string;
    /** Specifies the detailed reason if the name is not available. */
    message?: string;
}

/**
 * Defines values for EntropyMode. \
 * {@link KnownEntropyMode} can be used interchangeably with EntropyMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cabac**: Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding. \
 * **Cavlc**: Context Adaptive Variable Length Coder (CAVLC) entropy encoding.
 */
export declare type EntropyMode = string;

/** Class for EnvelopeEncryption encryption scheme */
export declare interface EnvelopeEncryption {
    /** Representing supported protocols */
    enabledProtocols?: EnabledProtocols;
    /** Representing which tracks should not be encrypted */
    clearTracks?: TrackSelection[];
    /** Representing default content key for each encryption scheme and separate content keys for specific tracks */
    contentKeys?: StreamingPolicyContentKeys;
    /** Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested. */
    customKeyAcquisitionUrlTemplate?: string;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Describes all the settings to be used when analyzing a video in order to detect (and optionally redact) all the faces present. */
export declare interface FaceDetectorPreset extends Preset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.FaceDetectorPreset";
    /** Specifies the maximum resolution at which your video is analyzed. The default behavior is "SourceResolution," which will keep the input video at its original resolution when analyzed. Using "StandardDefinition" will resize input videos to standard definition while preserving the appropriate aspect ratio. It will only resize if the video is of higher resolution. For example, a 1920x1080 input would be scaled to 640x360 before processing. Switching to "StandardDefinition" will reduce the time it takes to process high resolution video. It may also reduce the cost of using this component (see https://azure.microsoft.com/en-us/pricing/details/media-services/#analytics for details). However, faces that end up being too small in the resized video may not be detected. */
    resolution?: AnalysisResolution;
    /** This mode provides the ability to choose between the following settings: 1) Analyze - For detection only.This mode generates a metadata JSON file marking appearances of faces throughout the video.Where possible, appearances of the same person are assigned the same ID. 2) Combined - Additionally redacts(blurs) detected faces. 3) Redact - This enables a 2-pass process, allowing for selective redaction of a subset of detected faces.It takes in the metadata file from a prior analyze pass, along with the source video, and a user-selected subset of IDs that require redaction. */
    mode?: FaceRedactorMode;
    /** Blur type */
    blurType?: BlurType;
    /** Dictionary containing key value pairs for parameters not exposed in the preset itself */
    experimentalOptions?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for FaceRedactorMode. \
 * {@link KnownFaceRedactorMode} can be used interchangeably with FaceRedactorMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Analyze**: Analyze mode detects faces and outputs a metadata file with the results. Allows editing of the metadata file before faces are blurred with Redact mode. \
 * **Redact**: Redact mode consumes the metadata file from Analyze mode and redacts the faces found. \
 * **Combined**: Combined mode does the Analyze and Redact steps in one pass when editing the analyzed faces is not desired.
 */
export declare type FaceRedactorMode = string;

/** Describes all the filtering operations, such as de-interlacing, rotation etc. that are to be applied to the input media before encoding. */
export declare interface Filters {
    /** The de-interlacing settings. */
    deinterlace?: Deinterlace;
    /** The rotation, if any, to be applied to the input video, before it is encoded. Default is Auto */
    rotation?: Rotation;
    /** The parameters for the rectangular window with which to crop the input video. */
    crop?: Rectangle;
    /** The properties of overlays to be applied to the input video. These could be audio, image or video overlays. */
    overlays?: OverlayUnion[];
}

/**
 * Defines values for FilterTrackPropertyCompareOperation. \
 * {@link KnownFilterTrackPropertyCompareOperation} can be used interchangeably with FilterTrackPropertyCompareOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Equal**: The equal operation. \
 * **NotEqual**: The not equal operation.
 */
export declare type FilterTrackPropertyCompareOperation = string;

/** The class to specify one track property condition. */
export declare interface FilterTrackPropertyCondition {
    /** The track property type. */
    property: FilterTrackPropertyType;
    /** The track property value. */
    value: string;
    /** The track property condition operation. */
    operation: FilterTrackPropertyCompareOperation;
}

/**
 * Defines values for FilterTrackPropertyType. \
 * {@link KnownFilterTrackPropertyType} can be used interchangeably with FilterTrackPropertyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: The unknown track property type. \
 * **Type**: The type. \
 * **Name**: The name. \
 * **Language**: The language. \
 * **FourCC**: The fourCC. \
 * **Bitrate**: The bitrate.
 */
export declare type FilterTrackPropertyType = string;

/** Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation. */
export declare interface FilterTrackSelection {
    /** The track selections. */
    trackSelections: FilterTrackPropertyCondition[];
}

/** Filter First Quality */
export declare interface FirstQuality {
    /** The first quality bitrate. */
    bitrate: number;
}

/** Base class for output. */
export declare interface Format {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ImageFormat" | "#Microsoft.Media.JpgFormat" | "#Microsoft.Media.PngFormat" | "#Microsoft.Media.MultiBitrateFormat" | "#Microsoft.Media.Mp4Format" | "#Microsoft.Media.TransportStreamFormat";
    /** The pattern of the file names for the generated output files. The following macros are supported in the file name: {Basename} - An expansion macro that will use the name of the input video file. If the base name(the file suffix is not included) of the input video file is less than 32 characters long, the base name of input video files will be used. If the length of base name of the input video file exceeds 32 characters, the base name is truncated to the first 32 characters in total length. {Extension} - The appropriate extension for this format. {Label} - The label assigned to the codec/layer. {Index} - A unique index for thumbnails. Only applicable to thumbnails. {Bitrate} - The audio/video bitrate. Not applicable to thumbnails. {Codec} - The type of the audio/video codec. {Resolution} - The video resolution. Any unsubstituted macros will be collapsed and removed from the filename. */
    filenamePattern: string;
}

export declare type FormatUnion = Format | ImageFormatUnion | MultiBitrateFormatUnion;

/** An InputDefinition that looks across all of the files provided to select tracks specified by the IncludedTracks property. Generally used with the AudioTrackByAttribute and VideoTrackByAttribute to allow selection of a single track across a set of input files. */
export declare interface FromAllInputFile extends InputDefinition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.FromAllInputFile";
}

/** An InputDefinition that looks at each input file provided to select tracks specified by the IncludedTracks property. Generally used with the AudioTrackByAttribute and VideoTrackByAttribute to select tracks from each file given. */
export declare interface FromEachInputFile extends InputDefinition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.FromEachInputFile";
}

/**
 * Defines values for H264Complexity. \
 * {@link KnownH264Complexity} can be used interchangeably with H264Complexity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Speed**: Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time. \
 * **Balanced**: Tells the encoder to use settings that achieve a balance between speed and quality. \
 * **Quality**: Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
 */
export declare type H264Complexity = string;

/** Describes the settings to be used when encoding the input video into a desired output bitrate layer with the H.264 video codec. */
export declare interface H264Layer extends VideoLayer {
    /** We currently support Baseline, Main, High, High422, High444. Default is Auto. */
    profile?: H264VideoProfile;
    /** We currently support Level up to 6.2. The value can be Auto, or a number that matches the H.264 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer. */
    level?: string;
    /** The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S). */
    bufferWindow?: string;
    /** The value of CRF to be used when encoding this layer. This setting takes effect when RateControlMode of video codec is set at CRF mode. The range of CRF value is between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default value is 23. */
    crf?: number;
    /** The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting. */
    referenceFrames?: number;
    /** The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level. */
    entropyMode?: EntropyMode;
}

/**
 * Defines values for H264RateControlMode. \
 * {@link KnownH264RateControlMode} can be used interchangeably with H264RateControlMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ABR**: Average Bitrate (ABR) mode that hits the target bitrate: Default mode. \
 * **CBR**: Constant Bitrate (CBR) mode that tightens bitrate variations around target bitrate. \
 * **CRF**: Constant Rate Factor (CRF) mode that targets at constant subjective quality.
 */
export declare type H264RateControlMode = string;

/** Describes all the properties for encoding a video with the H.264 codec. */
export declare interface H264Video extends Video {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.H264Video";
    /** Tells the encoder how to choose its encoding settings. The default value is Balanced. */
    complexity?: H264Complexity;
    /** The collection of output H.264 layers to be produced by the encoder. */
    layers?: H264Layer[];
    /** The video rate control mode */
    rateControlMode?: H264RateControlMode;
    /** Whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video. */
    sceneChangeDetection?: boolean;
}

/**
 * Defines values for H264VideoProfile. \
 * {@link KnownH264VideoProfile} can be used interchangeably with H264VideoProfile,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Tells the encoder to automatically determine the appropriate H.264 profile. \
 * **Baseline**: Baseline profile \
 * **Main**: Main profile \
 * **High**: High profile. \
 * **High422**: High 4:2:2 profile. \
 * **High444**: High 4:4:4 predictive profile.
 */
export declare type H264VideoProfile = string;

/**
 * Defines values for H265Complexity. \
 * {@link KnownH265Complexity} can be used interchangeably with H265Complexity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Speed**: Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time. \
 * **Balanced**: Tells the encoder to use settings that achieve a balance between speed and quality. \
 * **Quality**: Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time.
 */
export declare type H265Complexity = string;

/** Describes the settings to be used when encoding the input video into a desired output bitrate layer with the H.265 video codec. */
export declare interface H265Layer extends H265VideoLayer {
    /** We currently support Main. Default is Auto. */
    profile?: H265VideoProfile;
    /** We currently support Level up to 6.2. The value can be Auto, or a number that matches the H.265 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer. */
    level?: string;
    /** The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S). */
    bufferWindow?: string;
    /** The value of CRF to be used when encoding this layer. This setting takes effect when RateControlMode of video codec is set at CRF mode. The range of CRF value is between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point quality degradation will be noticed. Default value is 28. */
    crf?: number;
    /** The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting. */
    referenceFrames?: number;
}

/** Describes all the properties for encoding a video with the H.265 codec. */
export declare interface H265Video extends Video {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.H265Video";
    /** Specifies whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video. */
    sceneChangeDetection?: boolean;
    /** Tells the encoder how to choose its encoding settings.  Quality will provide for a higher compression ratio but at a higher cost and longer compute time.  Speed will produce a relatively larger file but is faster and more economical. The default value is Balanced. */
    complexity?: H265Complexity;
    /** The collection of output H.265 layers to be produced by the encoder. */
    layers?: H265Layer[];
}

/** Describes the settings to be used when encoding the input video into a desired output bitrate layer. */
export declare interface H265VideoLayer extends Layer {
    /** The average bitrate in bits per second at which to encode the input video when generating this layer. For example: a target bitrate of 3000Kbps or 3Mbps means this value should be 3000000 This is a required field. */
    bitrate: number;
    /** The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate. */
    maxBitrate?: number;
    /** The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level. */
    bFrames?: number;
    /** The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video. */
    frameRate?: string;
    /** The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame. */
    slices?: number;
    /** Specifies whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. */
    adaptiveBFrame?: boolean;
}

/**
 * Defines values for H265VideoProfile. \
 * {@link KnownH265VideoProfile} can be used interchangeably with H265VideoProfile,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Tells the encoder to automatically determine the appropriate H.265 profile. \
 * **Main**: Main profile (https:\/\/x265.readthedocs.io\/en\/default\/cli.html?highlight=profile#profile-level-tier) \
 * **Main10**: Main 10 profile (https:\/\/en.wikipedia.org\/wiki\/High_Efficiency_Video_Coding#Main_10)
 */
export declare type H265VideoProfile = string;

/** HTTP Live Streaming (HLS) packing setting for the live output. */
export declare interface Hls {
    /** The number of fragments in an HTTP Live Streaming (HLS) TS segment in the output of the live event. This value does not affect the packing ratio for HLS CMAF output. */
    fragmentsPerTsSegment?: number;
}

/** The HLS setting for a track. */
export declare interface HlsSettings {
    /** The default for the HLS setting. */
    default?: boolean;
    /** The forced for the HLS setting. */
    forced?: boolean;
    /** The characteristics for the HLS setting. */
    characteristics?: string;
}

/** Describes the basic properties for generating thumbnails from the input video */
declare interface Image_2 extends Video {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.Image" | "#Microsoft.Media.JpgImage" | "#Microsoft.Media.PngImage";
    /** The position in the input video from where to start generating thumbnails. The value can be in ISO 8601 format (For example, PT05S to start at 5 seconds), or a frame count (For example, 10 to start at the 10th frame), or a relative value to stream duration (For example, 10% to start at 10% of stream duration). Also supports a macro {Best}, which tells the encoder to select the best thumbnail from the first few seconds of the video and will only produce one thumbnail, no matter what other settings are for Step and Range. The default value is macro {Best}. */
    start: string;
    /** The intervals at which thumbnails are generated. The value can be in ISO 8601 format (For example, PT05S for one image every 5 seconds), or a frame count (For example, 30 for one image every 30 frames), or a relative value to stream duration (For example, 10% for one image every 10% of stream duration). Note: Step value will affect the first generated thumbnail, which may not be exactly the one specified at transform preset start time. This is due to the encoder, which tries to select the best thumbnail between start time and Step position from start time as the first output. As the default value is 10%, it means if stream has long duration, the first generated thumbnail might be far away from the one specified at start time. Try to select reasonable value for Step if the first thumbnail is expected close to start time, or set Range value at 1 if only one thumbnail is needed at start time. */
    step?: string;
    /** The position relative to transform preset start time in the input video at which to stop generating thumbnails. The value can be in ISO 8601 format (For example, PT5M30S to stop at 5 minutes and 30 seconds from start time), or a frame count (For example, 300 to stop at the 300th frame from the frame at start time. If this value is 1, it means only producing one thumbnail at start time), or a relative value to the stream duration (For example, 50% to stop at half of stream duration from start time). The default value is 100%, which means to stop at the end of the stream. */
    range?: string;
}
export { Image_2 as Image }

/** Describes the properties for an output image file. */
export declare interface ImageFormat extends Format {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.ImageFormat" | "#Microsoft.Media.JpgFormat" | "#Microsoft.Media.PngFormat";
}

export declare type ImageFormatUnion = ImageFormat | JpgFormat | PngFormat;

export declare type ImageUnion = Image_2 | JpgImage | PngImage;

/** Base class for defining an input. Use sub classes of this class to specify tracks selections and related metadata. */
export declare interface InputDefinition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.FromAllInputFile" | "#Microsoft.Media.FromEachInputFile" | "#Microsoft.Media.InputFile";
    /** The list of TrackDescriptors which define the metadata and selection of tracks in the input. */
    includedTracks?: TrackDescriptorUnion[];
}

export declare type InputDefinitionUnion = InputDefinition | FromAllInputFile | FromEachInputFile | InputFile;

/** An InputDefinition for a single file.  TrackSelections are scoped to the file specified. */
export declare interface InputFile extends InputDefinition {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.InputFile";
    /** Name of the file that this input definition applies to. */
    filename?: string;
}

/**
 * Defines values for InsightsType. \
 * {@link KnownInsightsType} can be used interchangeably with InsightsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AudioInsightsOnly**: Generate audio only insights. Ignore video even if present. Fails if no audio is present. \
 * **VideoInsightsOnly**: Generate video only insights. Ignore audio if present. Fails if no video is present. \
 * **AllInsights**: Generate both audio and video insights. Fails if either audio or video Insights fail.
 */
export declare type InsightsType = string;

/**
 * Defines values for InterleaveOutput. \
 * {@link KnownInterleaveOutput} can be used interchangeably with InterleaveOutput,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NonInterleavedOutput**: The output is video-only or audio-only. \
 * **InterleavedOutput**: The output includes both audio and video.
 */
export declare type InterleaveOutput = string;

/** The IP access control. */
export declare interface IPAccessControl {
    /** The IP allow list. */
    allow?: IPRange[];
}

/** The IP address range in the CIDR scheme. */
export declare interface IPRange {
    /** The friendly name for the IP address range. */
    name?: string;
    /** The IP address. */
    address?: string;
    /** The subnet mask prefix length (see CIDR notation). */
    subnetPrefixLength?: number;
}

/** A Job resource type. The progress and state can be obtained by polling a Job or subscribing to events using EventGrid. */
export declare interface Job extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The UTC date and time when the customer has created the Job, in 'YYYY-MM-DDThh:mm:ssZ' format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The current state of the job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: JobState;
    /** Optional customer supplied description of the Job. */
    description?: string;
    /** The inputs for the Job. */
    input?: JobInputUnion;
    /**
     * The UTC date and time when the customer has last updated the Job, in 'YYYY-MM-DDThh:mm:ssZ' format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /** The outputs for the Job. */
    outputs?: JobOutputUnion[];
    /** Priority with which the job should be processed. Higher priority jobs are processed before lower priority jobs. If not set, the default is normal. */
    priority?: Priority;
    /** Customer provided key, value pairs that will be returned in Job and JobOutput state events. */
    correlationData?: {
        [propertyName: string]: string;
    };
    /**
     * The UTC date and time at which this Job began processing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The UTC date and time at which this Job finished processing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
}

/** A collection of Job items. */
export declare interface JobCollection {
    /** A collection of Job items. */
    value?: Job[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

/** Details of JobOutput errors. */
export declare interface JobError {
    /**
     * Error code describing the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: JobErrorCode;
    /**
     * A human-readable language-dependent representation of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Helps with categorization of errors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: JobErrorCategory;
    /**
     * Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly retry?: JobRetry;
    /**
     * An array of details about specific errors that led to this reported error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: JobErrorDetail[];
}

/**
 * Defines values for JobErrorCategory. \
 * {@link KnownJobErrorCategory} can be used interchangeably with JobErrorCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Service**: The error is service related. \
 * **Download**: The error is download related. \
 * **Upload**: The error is upload related. \
 * **Configuration**: The error is configuration related. \
 * **Content**: The error is related to data in the input files.
 */
export declare type JobErrorCategory = string;

/**
 * Defines values for JobErrorCode. \
 * {@link KnownJobErrorCode} can be used interchangeably with JobErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServiceError**: Fatal service error, please contact support. \
 * **ServiceTransientError**: Transient error, please retry, if retry is unsuccessful, please contact support. \
 * **DownloadNotAccessible**: While trying to download the input files, the files were not accessible, please check the availability of the source. \
 * **DownloadTransientError**: While trying to download the input files, there was an issue during transfer (storage service, network errors), see details and check your source. \
 * **UploadNotAccessible**: While trying to upload the output files, the destination was not reachable, please check the availability of the destination. \
 * **UploadTransientError**: While trying to upload the output files, there was an issue during transfer (storage service, network errors), see details and check your destination. \
 * **ConfigurationUnsupported**: There was a problem with the combination of input files and the configuration settings applied, fix the configuration settings and retry with the same input, or change input to match the configuration. \
 * **ContentMalformed**: There was a problem with the input content (for example: zero byte files, or corrupt\/non-decodable files), check the input files. \
 * **ContentUnsupported**: There was a problem with the format of the input (not valid media file, or an unsupported file\/codec), check the validity of the input files.
 */
export declare type JobErrorCode = string;

/** Details of JobOutput errors. */
export declare interface JobErrorDetail {
    /**
     * Code describing the error detail.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * A human-readable representation of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Base class for inputs to a Job. */
export declare interface JobInput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobInputClip" | "#Microsoft.Media.JobInputs" | "#Microsoft.Media.JobInputAsset" | "#Microsoft.Media.JobInputHttp" | "#Microsoft.Media.JobInputSequence";
}

/** Represents an Asset for input into a Job. */
export declare interface JobInputAsset extends JobInputClip {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobInputAsset";
    /** The name of the input Asset. */
    assetName: string;
}

/** Represents input files for a Job. */
export declare interface JobInputClip extends JobInput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobInputClip" | "#Microsoft.Media.JobInputAsset" | "#Microsoft.Media.JobInputHttp";
    /** List of files. Required for JobInputHttp. Maximum of 4000 characters each. Query strings will not be returned in service responses to prevent sensitive data exposure. */
    files?: string[];
    /** Defines a point on the timeline of the input media at which processing will start. Defaults to the beginning of the input media. */
    start?: ClipTimeUnion;
    /** Defines a point on the timeline of the input media at which processing will end. Defaults to the end of the input media. */
    end?: ClipTimeUnion;
    /** A label that is assigned to a JobInputClip, that is used to satisfy a reference used in the Transform. For example, a Transform can be authored so as to take an image file with the label 'xyz' and apply it as an overlay onto the input video before it is encoded. When submitting a Job, exactly one of the JobInputs should be the image file, and it should have the label 'xyz'. */
    label?: string;
    /** Defines a list of InputDefinitions. For each InputDefinition, it defines a list of track selections and related metadata. */
    inputDefinitions?: InputDefinitionUnion[];
}

export declare type JobInputClipUnion = JobInputClip | JobInputAsset | JobInputHttp;

/** Represents HTTPS job input. */
export declare interface JobInputHttp extends JobInputClip {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobInputHttp";
    /** Base URI for HTTPS job input. It will be concatenated with provided file names. If no base uri is given, then the provided file list is assumed to be fully qualified uris. Maximum length of 4000 characters. The query strings will not be returned in service responses to prevent sensitive data exposure. */
    baseUri?: string;
}

/** Describes a list of inputs to a Job. */
export declare interface JobInputs extends JobInput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobInputs";
    /** List of inputs to a Job. */
    inputs?: JobInputUnion[];
}

/** A Sequence contains an ordered list of Clips where each clip is a JobInput.  The Sequence will be treated as a single input. */
export declare interface JobInputSequence extends JobInput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobInputSequence";
    /** JobInputs that make up the timeline. */
    inputs?: JobInputClipUnion[];
}

export declare type JobInputUnion = JobInput | JobInputClipUnion | JobInputs | JobInputSequence;

/** Describes all the properties of a JobOutput. */
export declare interface JobOutput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobOutputAsset";
    /**
     * If the JobOutput is in the Error state, it contains the details of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: JobError;
    /** A preset used to override the preset in the corresponding transform output. */
    presetOverride?: PresetUnion;
    /**
     * Describes the state of the JobOutput.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: JobState;
    /**
     * If the JobOutput is in a Processing state, this contains the Job completion percentage. The value is an estimate and not intended to be used to predict Job completion times. To determine if the JobOutput is complete, use the State property.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly progress?: number;
    /** A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of '{presetName}_{outputIndex}' will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform. */
    label?: string;
    /**
     * The UTC date and time at which this Job Output began processing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The UTC date and time at which this Job Output finished processing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
}

/** Represents an Asset used as a JobOutput. */
export declare interface JobOutputAsset extends JobOutput {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JobOutputAsset";
    /** The name of the output Asset. */
    assetName: string;
}

export declare type JobOutputUnion = JobOutput | JobOutputAsset;

/**
 * Defines values for JobRetry. \
 * {@link KnownJobRetry} can be used interchangeably with JobRetry,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DoNotRetry**: Issue needs to be investigated and then the job resubmitted with corrections or retried once the underlying issue has been corrected. \
 * **MayRetry**: Issue may be resolved after waiting for a period of time and resubmitting the same Job.
 */
export declare type JobRetry = string;

/** Interface representing a Jobs. */
export declare interface Jobs {
    /**
     * Lists all of the Jobs for the Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, transformName: string, options?: JobsListOptionalParams): PagedAsyncIterableIterator<Job>;
    /**
     * Gets a Job.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: JobsGetOptionalParams): Promise<JobsGetResponse>;
    /**
     * Creates a Job.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    create(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Job, options?: JobsCreateOptionalParams): Promise<JobsCreateResponse>;
    /**
     * Deletes a Job.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: JobsDeleteOptionalParams): Promise<void>;
    /**
     * Update is only supported for description and priority. Updating Priority will take effect when the
     * Job state is Queued or Scheduled and depending on the timing the priority update may be ignored.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Job, options?: JobsUpdateOptionalParams): Promise<JobsUpdateResponse>;
    /**
     * Cancel a Job.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param options The options parameters.
     */
    cancelJob(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: JobsCancelJobOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface JobsCancelJobOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface JobsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type JobsCreateResponse = Job;

/** Optional parameters. */
export declare interface JobsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface JobsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type JobsGetResponse = Job;

/** Optional parameters. */
export declare interface JobsListNextOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type JobsListNextResponse = JobCollection;

/** Optional parameters. */
export declare interface JobsListOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type JobsListResponse = JobCollection;

/**
 * Defines values for JobState. \
 * {@link KnownJobState} can be used interchangeably with JobState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Canceled**: The job was canceled. This is a final state for the job. \
 * **Canceling**: The job is in the process of being canceled. This is a transient state for the job. \
 * **Error**: The job has encountered an error. This is a final state for the job. \
 * **Finished**: The job is finished. This is a final state for the job. \
 * **Processing**: The job is processing. This is a transient state for the job. \
 * **Queued**: The job is in a queued state, waiting for resources to become available. This is a transient state. \
 * **Scheduled**: The job is being scheduled to run on an available resource. This is a transient state, between queued and processing states.
 */
export declare type JobState = string;

/** Optional parameters. */
export declare interface JobsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type JobsUpdateResponse = Job;

/** Describes the settings for producing JPEG thumbnails. */
export declare interface JpgFormat extends ImageFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JpgFormat";
}

/** Describes the properties for producing a series of JPEG images from the input video. */
export declare interface JpgImage extends Image_2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.JpgImage";
    /** A collection of output JPEG image layers to be produced by the encoder. */
    layers?: JpgLayer[];
    /** Sets the number of columns used in thumbnail sprite image.  The number of rows are automatically calculated and a VTT file is generated with the coordinate mappings for each thumbnail in the sprite. Note: this value should be a positive integer and a proper value is recommended so that the output image resolution will not go beyond JPEG maximum pixel resolution limit 65535x65535. */
    spriteColumn?: number;
}

/** Describes the settings to produce a JPEG image from the input video. */
export declare interface JpgLayer extends Layer {
    /** The compression quality of the JPEG output. Range is from 0-100 and the default is 70. */
    quality?: number;
}

export declare interface KeyDelivery {
    /** The access control properties for Key Delivery. */
    accessControl?: AccessControl;
}

export declare interface KeyVaultProperties {
    /** The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey). */
    keyIdentifier?: string;
    /**
     * The current key used to encrypt the Media Services account, including the key version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentKeyIdentifier?: string;
}

/** Known values of {@link AacAudioProfile} that the service accepts. */
export declare enum KnownAacAudioProfile {
    /** Specifies that the output audio is to be encoded into AAC Low Complexity profile (AAC-LC). */
    AacLc = "AacLc",
    /** Specifies that the output audio is to be encoded into HE-AAC v1 profile. */
    HeAacV1 = "HeAacV1",
    /** Specifies that the output audio is to be encoded into HE-AAC v2 profile. */
    HeAacV2 = "HeAacV2"
}

/** Known values of {@link AccountEncryptionKeyType} that the service accepts. */
export declare enum KnownAccountEncryptionKeyType {
    /** The Account Key is encrypted with a System Key. */
    SystemKey = "SystemKey",
    /** The Account Key is encrypted with a Customer Key. */
    CustomerKey = "CustomerKey"
}

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** An internal action. */
    Internal = "Internal"
}

/** Known values of {@link AnalysisResolution} that the service accepts. */
export declare enum KnownAnalysisResolution {
    /** SourceResolution */
    SourceResolution = "SourceResolution",
    /** StandardDefinition */
    StandardDefinition = "StandardDefinition"
}

/** Known values of {@link AssetContainerPermission} that the service accepts. */
export declare enum KnownAssetContainerPermission {
    /** The SAS URL will allow read access to the container. */
    Read = "Read",
    /** The SAS URL will allow read and write access to the container. */
    ReadWrite = "ReadWrite",
    /** The SAS URL will allow read, write and delete access to the container. */
    ReadWriteDelete = "ReadWriteDelete"
}

/** Known values of {@link AssetStorageEncryptionFormat} that the service accepts. */
export declare enum KnownAssetStorageEncryptionFormat {
    /** The Asset does not use client-side storage encryption (this is the only allowed value for new Assets). */
    None = "None",
    /** The Asset is encrypted with Media Services client-side encryption. */
    MediaStorageClientEncryption = "MediaStorageClientEncryption"
}

/** Known values of {@link AsyncOperationStatus} that the service accepts. */
export declare enum KnownAsyncOperationStatus {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** InProgress */
    InProgress = "InProgress"
}

/** Known values of {@link AttributeFilter} that the service accepts. */
export declare enum KnownAttributeFilter {
    /** All tracks will be included. */
    All = "All",
    /** The first track will be included when the attribute is sorted in descending order.  Generally used to select the largest bitrate. */
    Top = "Top",
    /** The first track will be included when the attribute is sorted in ascending order.  Generally used to select the smallest bitrate. */
    Bottom = "Bottom",
    /** Any tracks that have an attribute equal to the value given will be included. */
    ValueEquals = "ValueEquals"
}

/** Known values of {@link AudioAnalysisMode} that the service accepts. */
export declare enum KnownAudioAnalysisMode {
    /** Performs all operations included in the Basic mode, additionally performing language detection and speaker diarization. */
    Standard = "Standard",
    /** This mode performs speech-to-text transcription and generation of a VTT subtitle/caption file. The output of this mode includes an Insights JSON file including only the keywords, transcription,and timing information. Automatic language detection and speaker diarization are not included in this mode. */
    Basic = "Basic"
}

/** Known values of {@link BlurType} that the service accepts. */
export declare enum KnownBlurType {
    /** Box: debug filter, bounding box only */
    Box = "Box",
    /** Low: box-car blur filter */
    Low = "Low",
    /** Med: Gaussian blur filter */
    Med = "Med",
    /** High: Confuse blur filter */
    High = "High",
    /** Black: Black out filter */
    Black = "Black"
}

/** Known values of {@link ChannelMapping} that the service accepts. */
export declare enum KnownChannelMapping {
    /** The Front Left Channel. */
    FrontLeft = "FrontLeft",
    /** The Front Right Channel. */
    FrontRight = "FrontRight",
    /** The Center Channel. */
    Center = "Center",
    /** Low Frequency Effects Channel.  Sometimes referred to as the Subwoofer. */
    LowFrequencyEffects = "LowFrequencyEffects",
    /** The Back Left Channel.  Sometimes referred to as the Left Surround Channel. */
    BackLeft = "BackLeft",
    /** The Back Right Channel.  Sometimes referred to as the Right Surround Channel. */
    BackRight = "BackRight",
    /** The Left Stereo channel.  Sometimes referred to as Down Mix Left. */
    StereoLeft = "StereoLeft",
    /** The Right Stereo channel.  Sometimes referred to as Down Mix Right. */
    StereoRight = "StereoRight"
}

/** Known values of {@link Complexity} that the service accepts. */
export declare enum KnownComplexity {
    /** Configures the encoder to use settings optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    Speed = "Speed",
    /** Configures the encoder to use settings that achieve a balance between speed and quality. */
    Balanced = "Balanced",
    /** Configures the encoder to use settings optimized to produce higher quality output at the expense of slower overall encode time. */
    Quality = "Quality"
}

/** Known values of {@link ContentKeyPolicyFairPlayRentalAndLeaseKeyType} that the service accepts. */
export declare enum KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType {
    /** Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version. */
    Unknown = "Unknown",
    /** Key duration is not specified. */
    Undefined = "Undefined",
    /** Dual expiry for offline rental. */
    DualExpiry = "DualExpiry",
    /** Content key can be persisted with an unlimited duration */
    PersistentUnlimited = "PersistentUnlimited",
    /** Content key can be persisted and the valid duration is limited by the Rental Duration value */
    PersistentLimited = "PersistentLimited"
}

/** Known values of {@link ContentKeyPolicyPlayReadyContentType} that the service accepts. */
export declare enum KnownContentKeyPolicyPlayReadyContentType {
    /** Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version. */
    Unknown = "Unknown",
    /** Unspecified content type. */
    Unspecified = "Unspecified",
    /** Ultraviolet download content type. */
    UltraVioletDownload = "UltraVioletDownload",
    /** Ultraviolet streaming content type. */
    UltraVioletStreaming = "UltraVioletStreaming"
}

/** Known values of {@link ContentKeyPolicyPlayReadyLicenseType} that the service accepts. */
export declare enum KnownContentKeyPolicyPlayReadyLicenseType {
    /** Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version. */
    Unknown = "Unknown",
    /** Non persistent license. */
    NonPersistent = "NonPersistent",
    /** Persistent license. Allows offline playback. */
    Persistent = "Persistent"
}

/** Known values of {@link ContentKeyPolicyPlayReadyUnknownOutputPassingOption} that the service accepts. */
export declare enum KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption {
    /** Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version. */
    Unknown = "Unknown",
    /** Passing the video portion of protected content to an Unknown Output is not allowed. */
    NotAllowed = "NotAllowed",
    /** Passing the video portion of protected content to an Unknown Output is allowed. */
    Allowed = "Allowed",
    /** Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution. */
    AllowedWithVideoConstriction = "AllowedWithVideoConstriction"
}

/** Known values of {@link ContentKeyPolicyRestrictionTokenType} that the service accepts. */
export declare enum KnownContentKeyPolicyRestrictionTokenType {
    /** Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version. */
    Unknown = "Unknown",
    /** Simple Web Token. */
    Swt = "Swt",
    /** JSON Web Token. */
    Jwt = "Jwt"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DefaultAction} that the service accepts. */
export declare enum KnownDefaultAction {
    /** All public IP addresses are allowed. */
    Allow = "Allow",
    /** Public IP addresses are blocked. */
    Deny = "Deny"
}

/** Known values of {@link DeinterlaceMode} that the service accepts. */
export declare enum KnownDeinterlaceMode {
    /** Disables de-interlacing of the source video. */
    Off = "Off",
    /** Apply automatic pixel adaptive de-interlacing on each frame in the input video. */
    AutoPixelAdaptive = "AutoPixelAdaptive"
}

/** Known values of {@link DeinterlaceParity} that the service accepts. */
export declare enum KnownDeinterlaceParity {
    /** Automatically detect the order of fields */
    Auto = "Auto",
    /** Apply top field first processing of input video. */
    TopFieldFirst = "TopFieldFirst",
    /** Apply bottom field first processing of input video. */
    BottomFieldFirst = "BottomFieldFirst"
}

/** Known values of {@link EncoderNamedPreset} that the service accepts. */
export declare enum KnownEncoderNamedPreset {
    /** Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    H264SingleBitrateSD = "H264SingleBitrateSD",
    /** Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    H264SingleBitrate720P = "H264SingleBitrate720p",
    /** Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    H264SingleBitrate1080P = "H264SingleBitrate1080p",
    /** Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best. */
    AdaptiveStreaming = "AdaptiveStreaming",
    /** Produces a single MP4 file containing only stereo audio encoded at 192 kbps. */
    AACGoodQualityAudio = "AACGoodQualityAudio",
    /** Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved. */
    ContentAwareEncodingExperimental = "ContentAwareEncodingExperimental",
    /** Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved. */
    ContentAwareEncoding = "ContentAwareEncoding",
    /** Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed. */
    CopyAllBitrateNonInterleaved = "CopyAllBitrateNonInterleaved",
    /** Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 180p. */
    H264MultipleBitrate1080P = "H264MultipleBitrate1080p",
    /** Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 180p. */
    H264MultipleBitrate720P = "H264MultipleBitrate720p",
    /** Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 240p. */
    H264MultipleBitrateSD = "H264MultipleBitrateSD",
    /** Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved. */
    H265ContentAwareEncoding = "H265ContentAwareEncoding",
    /** Produces a set of GOP aligned MP4 files with H.265 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best. */
    H265AdaptiveStreaming = "H265AdaptiveStreaming",
    /** Produces an MP4 file where the video is encoded with H.265 codec at 1800 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    H265SingleBitrate720P = "H265SingleBitrate720p",
    /** Produces an MP4 file where the video is encoded with H.265 codec at 3500 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    H265SingleBitrate1080P = "H265SingleBitrate1080p",
    /** Produces an MP4 file where the video is encoded with H.265 codec at 9500 kbps and a picture height of 2160 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    H265SingleBitrate4K = "H265SingleBitrate4K"
}

/** Known values of {@link EncryptionScheme} that the service accepts. */
export declare enum KnownEncryptionScheme {
    /** NoEncryption scheme */
    NoEncryption = "NoEncryption",
    /** EnvelopeEncryption scheme */
    EnvelopeEncryption = "EnvelopeEncryption",
    /** CommonEncryptionCenc scheme */
    CommonEncryptionCenc = "CommonEncryptionCenc",
    /** CommonEncryptionCbcs scheme */
    CommonEncryptionCbcs = "CommonEncryptionCbcs"
}

/** Known values of {@link EntropyMode} that the service accepts. */
export declare enum KnownEntropyMode {
    /** Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding. */
    Cabac = "Cabac",
    /** Context Adaptive Variable Length Coder (CAVLC) entropy encoding. */
    Cavlc = "Cavlc"
}

/** Known values of {@link FaceRedactorMode} that the service accepts. */
export declare enum KnownFaceRedactorMode {
    /** Analyze mode detects faces and outputs a metadata file with the results. Allows editing of the metadata file before faces are blurred with Redact mode. */
    Analyze = "Analyze",
    /** Redact mode consumes the metadata file from Analyze mode and redacts the faces found. */
    Redact = "Redact",
    /** Combined mode does the Analyze and Redact steps in one pass when editing the analyzed faces is not desired. */
    Combined = "Combined"
}

/** Known values of {@link FilterTrackPropertyCompareOperation} that the service accepts. */
export declare enum KnownFilterTrackPropertyCompareOperation {
    /** The equal operation. */
    Equal = "Equal",
    /** The not equal operation. */
    NotEqual = "NotEqual"
}

/** Known values of {@link FilterTrackPropertyType} that the service accepts. */
export declare enum KnownFilterTrackPropertyType {
    /** The unknown track property type. */
    Unknown = "Unknown",
    /** The type. */
    Type = "Type",
    /** The name. */
    Name = "Name",
    /** The language. */
    Language = "Language",
    /** The fourCC. */
    FourCC = "FourCC",
    /** The bitrate. */
    Bitrate = "Bitrate"
}

/** Known values of {@link H264Complexity} that the service accepts. */
export declare enum KnownH264Complexity {
    /** Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    Speed = "Speed",
    /** Tells the encoder to use settings that achieve a balance between speed and quality. */
    Balanced = "Balanced",
    /** Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time. */
    Quality = "Quality"
}

/** Known values of {@link H264RateControlMode} that the service accepts. */
export declare enum KnownH264RateControlMode {
    /** Average Bitrate (ABR) mode that hits the target bitrate: Default mode. */
    ABR = "ABR",
    /** Constant Bitrate (CBR) mode that tightens bitrate variations around target bitrate. */
    CBR = "CBR",
    /** Constant Rate Factor (CRF) mode that targets at constant subjective quality. */
    CRF = "CRF"
}

/** Known values of {@link H264VideoProfile} that the service accepts. */
export declare enum KnownH264VideoProfile {
    /** Tells the encoder to automatically determine the appropriate H.264 profile. */
    Auto = "Auto",
    /** Baseline profile */
    Baseline = "Baseline",
    /** Main profile */
    Main = "Main",
    /** High profile. */
    High = "High",
    /** High 4:2:2 profile. */
    High422 = "High422",
    /** High 4:4:4 predictive profile. */
    High444 = "High444"
}

/** Known values of {@link H265Complexity} that the service accepts. */
export declare enum KnownH265Complexity {
    /** Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    Speed = "Speed",
    /** Tells the encoder to use settings that achieve a balance between speed and quality. */
    Balanced = "Balanced",
    /** Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time. */
    Quality = "Quality"
}

/** Known values of {@link H265VideoProfile} that the service accepts. */
export declare enum KnownH265VideoProfile {
    /** Tells the encoder to automatically determine the appropriate H.265 profile. */
    Auto = "Auto",
    /** Main profile (https://x265.readthedocs.io/en/default/cli.html?highlight=profile#profile-level-tier) */
    Main = "Main",
    /** Main 10 profile (https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding#Main_10) */
    Main10 = "Main10"
}

/** Known values of {@link InsightsType} that the service accepts. */
export declare enum KnownInsightsType {
    /** Generate audio only insights. Ignore video even if present. Fails if no audio is present. */
    AudioInsightsOnly = "AudioInsightsOnly",
    /** Generate video only insights. Ignore audio if present. Fails if no video is present. */
    VideoInsightsOnly = "VideoInsightsOnly",
    /** Generate both audio and video insights. Fails if either audio or video Insights fail. */
    AllInsights = "AllInsights"
}

/** Known values of {@link InterleaveOutput} that the service accepts. */
export declare enum KnownInterleaveOutput {
    /** The output is video-only or audio-only. */
    NonInterleavedOutput = "NonInterleavedOutput",
    /** The output includes both audio and video. */
    InterleavedOutput = "InterleavedOutput"
}

/** Known values of {@link JobErrorCategory} that the service accepts. */
export declare enum KnownJobErrorCategory {
    /** The error is service related. */
    Service = "Service",
    /** The error is download related. */
    Download = "Download",
    /** The error is upload related. */
    Upload = "Upload",
    /** The error is configuration related. */
    Configuration = "Configuration",
    /** The error is related to data in the input files. */
    Content = "Content"
}

/** Known values of {@link JobErrorCode} that the service accepts. */
export declare enum KnownJobErrorCode {
    /** Fatal service error, please contact support. */
    ServiceError = "ServiceError",
    /** Transient error, please retry, if retry is unsuccessful, please contact support. */
    ServiceTransientError = "ServiceTransientError",
    /** While trying to download the input files, the files were not accessible, please check the availability of the source. */
    DownloadNotAccessible = "DownloadNotAccessible",
    /** While trying to download the input files, there was an issue during transfer (storage service, network errors), see details and check your source. */
    DownloadTransientError = "DownloadTransientError",
    /** While trying to upload the output files, the destination was not reachable, please check the availability of the destination. */
    UploadNotAccessible = "UploadNotAccessible",
    /** While trying to upload the output files, there was an issue during transfer (storage service, network errors), see details and check your destination. */
    UploadTransientError = "UploadTransientError",
    /** There was a problem with the combination of input files and the configuration settings applied, fix the configuration settings and retry with the same input, or change input to match the configuration. */
    ConfigurationUnsupported = "ConfigurationUnsupported",
    /** There was a problem with the input content (for example: zero byte files, or corrupt/non-decodable files), check the input files. */
    ContentMalformed = "ContentMalformed",
    /** There was a problem with the format of the input (not valid media file, or an unsupported file/codec), check the validity of the input files. */
    ContentUnsupported = "ContentUnsupported"
}

/** Known values of {@link JobRetry} that the service accepts. */
export declare enum KnownJobRetry {
    /** Issue needs to be investigated and then the job resubmitted with corrections or retried once the underlying issue has been corrected. */
    DoNotRetry = "DoNotRetry",
    /** Issue may be resolved after waiting for a period of time and resubmitting the same Job. */
    MayRetry = "MayRetry"
}

/** Known values of {@link JobState} that the service accepts. */
export declare enum KnownJobState {
    /** The job was canceled. This is a final state for the job. */
    Canceled = "Canceled",
    /** The job is in the process of being canceled. This is a transient state for the job. */
    Canceling = "Canceling",
    /** The job has encountered an error. This is a final state for the job. */
    Error = "Error",
    /** The job is finished. This is a final state for the job. */
    Finished = "Finished",
    /** The job is processing. This is a transient state for the job. */
    Processing = "Processing",
    /** The job is in a queued state, waiting for resources to become available. This is a transient state. */
    Queued = "Queued",
    /** The job is being scheduled to run on an available resource. This is a transient state, between queued and processing states. */
    Scheduled = "Scheduled"
}

/** Known values of {@link LiveEventEncodingType} that the service accepts. */
export declare enum KnownLiveEventEncodingType {
    /** This is the same as PassthroughStandard, please see description below. This enumeration value is being deprecated. */
    None = "None",
    /** A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution. */
    Standard = "Standard",
    /** A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution. */
    Premium1080P = "Premium1080p",
    /** The ingested stream passes through the live event from the contribution encoder without any further processing. In the PassthroughBasic mode, ingestion is limited to up to 5Mbps and only 1 concurrent live output is allowed. Live transcription is not available. */
    PassthroughBasic = "PassthroughBasic",
    /** The ingested stream passes through the live event from the contribution encoder without any further processing. Live transcription is available. Ingestion bitrate limits are much higher and up to 3 concurrent live outputs are allowed. */
    PassthroughStandard = "PassthroughStandard"
}

/** Known values of {@link LiveEventInputProtocol} that the service accepts. */
export declare enum KnownLiveEventInputProtocol {
    /** Smooth Streaming input will be sent by the contribution encoder to the live event. */
    FragmentedMP4 = "FragmentedMP4",
    /** RTMP input will be sent by the contribution encoder to the live event. */
    Rtmp = "RTMP"
}

/** Known values of {@link LiveEventResourceState} that the service accepts. */
export declare enum KnownLiveEventResourceState {
    /** This is the initial state of the live event after creation (unless autostart was set to true.) No billing occurs in this state. In this state, the live event properties can be updated but streaming is not allowed. */
    Stopped = "Stopped",
    /** Allocate action was called on the live event and resources are being provisioned for this live event. Once allocation completes successfully, the live event will transition to StandBy state. */
    Allocating = "Allocating",
    /** Live event resources have been provisioned and is ready to start. Billing occurs in this state. Most properties can still be updated, however ingest or streaming is not allowed during this state. */
    StandBy = "StandBy",
    /** The live event is being started and resources are being allocated. No billing occurs in this state. Updates or streaming are not allowed during this state. If an error occurs, the live event returns to the Stopped state. */
    Starting = "Starting",
    /** The live event resources have been allocated, ingest and preview URLs have been generated, and it is capable of receiving live streams. At this point, billing is active. You must explicitly call Stop on the live event resource to halt further billing. */
    Running = "Running",
    /** The live event is being stopped and resources are being de-provisioned. No billing occurs in this transient state. Updates or streaming are not allowed during this state. */
    Stopping = "Stopping",
    /** The live event is being deleted. No billing occurs in this transient state. Updates or streaming are not allowed during this state. */
    Deleting = "Deleting"
}

/** Known values of {@link LiveOutputResourceState} that the service accepts. */
export declare enum KnownLiveOutputResourceState {
    /** Live output is being created. No content is archived in the asset until the live output is in running state. */
    Creating = "Creating",
    /** Live output is running and archiving live streaming content to the asset if there is valid input from a contribution encoder. */
    Running = "Running",
    /** Live output is being deleted. The live asset is being converted from live to on-demand asset. Any streaming URLs created on the live output asset continue to work. */
    Deleting = "Deleting"
}

/** Known values of {@link MetricAggregationType} that the service accepts. */
export declare enum KnownMetricAggregationType {
    /** The average. */
    Average = "Average",
    /** The count of a number of items, usually requests. */
    Count = "Count",
    /** The sum. */
    Total = "Total"
}

/** Known values of {@link MetricUnit} that the service accepts. */
export declare enum KnownMetricUnit {
    /** The number of bytes. */
    Bytes = "Bytes",
    /** The count. */
    Count = "Count",
    /** The number of milliseconds. */
    Milliseconds = "Milliseconds"
}

/** Known values of {@link OnErrorType} that the service accepts. */
export declare enum KnownOnErrorType {
    /** Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped. */
    StopProcessingJob = "StopProcessingJob",
    /** Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue. */
    ContinueJob = "ContinueJob"
}

/** Known values of {@link Priority} that the service accepts. */
export declare enum KnownPriority {
    /** Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs. */
    Low = "Low",
    /** Used for TransformOutputs that can be generated at Normal priority. */
    Normal = "Normal",
    /** Used for TransformOutputs that should take precedence over others. */
    High = "High"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Provisioning state failed. */
    Failed = "Failed",
    /** Provisioning state in progress. */
    InProgress = "InProgress",
    /** Provisioning state succeeded. */
    Succeeded = "Succeeded"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Public network access is enabled. */
    Enabled = "Enabled",
    /** Public network access is disabled. */
    Disabled = "Disabled"
}

/** Known values of {@link Rotation} that the service accepts. */
export declare enum KnownRotation {
    /** Automatically detect and rotate as needed. */
    Auto = "Auto",
    /** Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact. */
    None = "None",
    /** Do not rotate the video but remove any metadata about the rotation. */
    Rotate0 = "Rotate0",
    /** Rotate 90 degrees clockwise. */
    Rotate90 = "Rotate90",
    /** Rotate 180 degrees clockwise. */
    Rotate180 = "Rotate180",
    /** Rotate 270 degrees clockwise. */
    Rotate270 = "Rotate270"
}

/** Known values of {@link SecurityLevel} that the service accepts. */
export declare enum KnownSecurityLevel {
    /** Represents a SecurityLevel that is unavailable in current API version. */
    Unknown = "Unknown",
    /** For clients under development or test. No protection against unauthorized use. */
    SL150 = "SL150",
    /** For hardened devices and applications consuming commercial content. Software or hardware protection. */
    SL2000 = "SL2000",
    /** For hardened devices only. Hardware protection. */
    SL3000 = "SL3000"
}

/** Known values of {@link StorageAccountType} that the service accepts. */
export declare enum KnownStorageAccountType {
    /** The primary storage account for the Media Services account. */
    Primary = "Primary",
    /** A secondary storage account for the Media Services account. */
    Secondary = "Secondary"
}

/** Known values of {@link StorageAuthentication} that the service accepts. */
export declare enum KnownStorageAuthentication {
    /** System authentication. */
    System = "System",
    /** Managed Identity authentication. */
    ManagedIdentity = "ManagedIdentity"
}

/** Known values of {@link StreamingEndpointResourceState} that the service accepts. */
export declare enum KnownStreamingEndpointResourceState {
    /** The initial state of a streaming endpoint after creation. Content is not ready to be streamed from this endpoint. */
    Stopped = "Stopped",
    /** The streaming endpoint is transitioning to the running state. */
    Starting = "Starting",
    /** The streaming endpoint is running. It is able to stream content to clients */
    Running = "Running",
    /** The streaming endpoint is transitioning to the stopped state. */
    Stopping = "Stopping",
    /** The streaming endpoint is being deleted. */
    Deleting = "Deleting",
    /** The streaming endpoint is increasing or decreasing scale units. */
    Scaling = "Scaling"
}

/** Known values of {@link StreamingLocatorContentKeyType} that the service accepts. */
export declare enum KnownStreamingLocatorContentKeyType {
    /** Common Encryption using CENC */
    CommonEncryptionCenc = "CommonEncryptionCenc",
    /** Common Encryption using CBCS */
    CommonEncryptionCbcs = "CommonEncryptionCbcs",
    /** Envelope Encryption */
    EnvelopeEncryption = "EnvelopeEncryption"
}

/** Known values of {@link StreamingPolicyStreamingProtocol} that the service accepts. */
export declare enum KnownStreamingPolicyStreamingProtocol {
    /** HLS protocol */
    Hls = "Hls",
    /** DASH protocol */
    Dash = "Dash",
    /** SmoothStreaming protocol */
    SmoothStreaming = "SmoothStreaming",
    /** Download protocol */
    Download = "Download"
}

/** Known values of {@link StreamOptionsFlag} that the service accepts. */
export declare enum KnownStreamOptionsFlag {
    /** Live streaming with no special latency optimizations. */
    Default = "Default",
    /** The live event provides lower end to end latency by reducing its internal buffers. */
    LowLatency = "LowLatency",
    /** The live event is optimized for end to end latency. This option is only available for encoding live events with RTMP input. The outputs can be streamed using HLS or DASH formats. The outputs' archive or DVR rewind length is limited to 6 hours. Use "LowLatency" stream option for all other scenarios. */
    LowLatencyV2 = "LowLatencyV2"
}

/** Known values of {@link StretchMode} that the service accepts. */
export declare enum KnownStretchMode {
    /** Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video. */
    None = "None",
    /** Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9. */
    AutoSize = "AutoSize",
    /** Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right. */
    AutoFit = "AutoFit"
}

/** Known values of {@link TrackAttribute} that the service accepts. */
export declare enum KnownTrackAttribute {
    /** The bitrate of the track. */
    Bitrate = "Bitrate",
    /** The language of the track. */
    Language = "Language"
}

/** Known values of {@link TrackPropertyCompareOperation} that the service accepts. */
export declare enum KnownTrackPropertyCompareOperation {
    /** Unknown track property compare operation */
    Unknown = "Unknown",
    /** Equal operation */
    Equal = "Equal"
}

/** Known values of {@link TrackPropertyType} that the service accepts. */
export declare enum KnownTrackPropertyType {
    /** Unknown track property */
    Unknown = "Unknown",
    /** Track FourCC */
    FourCC = "FourCC"
}

/** Known values of {@link VideoSyncMode} that the service accepts. */
export declare enum KnownVideoSyncMode {
    /** This is the default method. Chooses between Cfr and Vfr depending on muxer capabilities. For output format MP4, the default mode is Cfr. */
    Auto = "Auto",
    /** The presentation timestamps on frames are passed through from the input file to the output file writer. Recommended when the input source has variable frame rate, and are attempting to produce multiple layers for adaptive streaming in the output which have aligned GOP boundaries. Note: if two or more frames in the input have duplicate timestamps, then the output will also have the same behavior */
    Passthrough = "Passthrough",
    /** Input frames will be repeated and/or dropped as needed to achieve exactly the requested constant frame rate. Recommended when the output frame rate is explicitly set at a specified value */
    Cfr = "Cfr",
    /** Similar to the Passthrough mode, but if the input has frames that have duplicate timestamps, then only one frame is passed through to the output, and others are dropped. Recommended when the number of output frames is expected to be equal to the number of input frames. For example, the output is used to calculate a quality metric like PSNR against the input */
    Vfr = "Vfr"
}

/** Known values of {@link Visibility} that the service accepts. */
export declare enum KnownVisibility {
    /** The track is hidden to video player. */
    Hidden = "Hidden",
    /** The track is visible to video player. */
    Visible = "Visible"
}

/** The encoder can be configured to produce video and/or images (thumbnails) at different resolutions, by specifying a layer for each desired resolution. A layer represents the properties for the video or image at a resolution. */
export declare interface Layer {
    /** The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input. */
    width?: string;
    /** The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input. */
    height?: string;
    /** The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file. */
    label?: string;
}

/** The parameters to the list SAS request. */
export declare interface ListContainerSasInput {
    /** The permissions to set on the SAS URL. */
    permissions?: AssetContainerPermission;
    /** The SAS URL expiration time.  This must be less than 24 hours from the current time. */
    expiryTime?: Date;
}

/** Class of response for listContentKeys action */
export declare interface ListContentKeysResponse {
    /** ContentKeys used by current Streaming Locator */
    contentKeys?: StreamingLocatorContentKey[];
}

export declare interface ListEdgePoliciesInput {
    /** Unique identifier of the edge device. */
    deviceId?: string;
}

/** Class of response for listPaths action */
export declare interface ListPathsResponse {
    /** Streaming Paths supported by current Streaming Locator */
    streamingPaths?: StreamingPath[];
    /** Download Paths supported by current Streaming Locator */
    downloadPaths?: string[];
}

/** The Streaming Locators associated with this Asset. */
export declare interface ListStreamingLocatorsResponse {
    /**
     * The list of Streaming Locators.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly streamingLocators?: AssetStreamingLocator[];
}

/** The live event. */
export declare interface LiveEvent extends TrackedResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** A description for the live event. */
    description?: string;
    /** Live event input settings. It defines how the live event receives input from a contribution encoder. */
    input?: LiveEventInput;
    /** Live event preview settings. Preview allows live event producers to preview the live streaming content without creating any live output. */
    preview?: LiveEventPreview;
    /** Encoding settings for the live event. It configures whether a live encoder is used for the live event and settings for the live encoder if it is used. */
    encoding?: LiveEventEncoding;
    /** Live transcription settings for the live event. See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature. */
    transcriptions?: LiveEventTranscription[];
    /**
     * The provisioning state of the live event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for more information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceState?: LiveEventResourceState;
    /** Live event cross site access policies. */
    crossSiteAccessPolicies?: CrossSiteAccessPolicies;
    /** Specifies whether a static hostname would be assigned to the live event preview and ingest endpoints. This value can only be updated if the live event is in Standby state */
    useStaticHostname?: boolean;
    /** When useStaticHostname is set to true, the hostnamePrefix specifies the first part of the hostname assigned to the live event preview and ingest endpoints. The final hostname would be a combination of this prefix, the media service account name and a short code for the Azure Media Services data center. */
    hostnamePrefix?: string;
    /** The options to use for the LiveEvent. This value is specified at creation time and cannot be updated. The valid values for the array entry values are 'Default' and 'LowLatency'. */
    streamOptions?: StreamOptionsFlag[];
    /**
     * The creation time for the live event
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The last modified time of the live event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
}

/** The LiveEvent action input parameter definition. */
export declare interface LiveEventActionInput {
    /** The flag indicates whether live outputs are automatically deleted when live event is being stopped. Deleting live outputs do not delete the underlying assets. */
    removeOutputsOnStop?: boolean;
}

/** Specifies the live event type and optional encoding settings for encoding live events. */
export declare interface LiveEventEncoding {
    /** Live event type. When encodingType is set to PassthroughBasic or PassthroughStandard, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created. */
    encodingType?: LiveEventEncodingType;
    /** The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’. */
    presetName?: string;
    /** Specifies how the input video will be resized to fit the desired output resolution(s). Default is None */
    stretchMode?: StretchMode;
    /** Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events. */
    keyFrameInterval?: string;
}

/**
 * Defines values for LiveEventEncodingType. \
 * {@link KnownLiveEventEncodingType} can be used interchangeably with LiveEventEncodingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: This is the same as PassthroughStandard, please see description below. This enumeration value is being deprecated. \
 * **Standard**: A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution. \
 * **Premium1080p**: A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution. \
 * **PassthroughBasic**: The ingested stream passes through the live event from the contribution encoder without any further processing. In the PassthroughBasic mode, ingestion is limited to up to 5Mbps and only 1 concurrent live output is allowed. Live transcription is not available. \
 * **PassthroughStandard**: The ingested stream passes through the live event from the contribution encoder without any further processing. Live transcription is available. Ingestion bitrate limits are much higher and up to 3 concurrent live outputs are allowed.
 */
export declare type LiveEventEncodingType = string;

/** The live event endpoint. */
export declare interface LiveEventEndpoint {
    /** The endpoint protocol. */
    protocol?: string;
    /** The endpoint URL. */
    url?: string;
}

/** The live event input. */
export declare interface LiveEventInput {
    /** The input protocol for the live event. This is specified at creation time and cannot be updated. */
    streamingProtocol: LiveEventInputProtocol;
    /** Access control for live event input. */
    accessControl?: LiveEventInputAccessControl;
    /** ISO 8601 time duration of the key frame interval duration of the input. This value sets the EXT-X-TARGETDURATION property in the HLS output. For example, use PT2S to indicate 2 seconds. Leave the value empty for encoding live events. */
    keyFrameIntervalDuration?: string;
    /** A UUID in string form to uniquely identify the stream. This can be specified at creation time but cannot be updated. If omitted, the service will generate a unique value. */
    accessToken?: string;
    /** The input endpoints for the live event. */
    endpoints?: LiveEventEndpoint[];
}

/** The IP access control for live event input. */
export declare interface LiveEventInputAccessControl {
    /** The IP access control properties. */
    ip?: IPAccessControl;
}

/**
 * Defines values for LiveEventInputProtocol. \
 * {@link KnownLiveEventInputProtocol} can be used interchangeably with LiveEventInputProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FragmentedMP4**: Smooth Streaming input will be sent by the contribution encoder to the live event. \
 * **RTMP**: RTMP input will be sent by the contribution encoder to the live event.
 */
export declare type LiveEventInputProtocol = string;

/** A track selection condition. This property is reserved for future use, any value set on this property will be ignored. */
export declare interface LiveEventInputTrackSelection {
    /** Property name to select. This property is reserved for future use, any value set on this property will be ignored. */
    property?: string;
    /** Comparing operation. This property is reserved for future use, any value set on this property will be ignored. */
    operation?: string;
    /** Property value to select. This property is reserved for future use, any value set on this property will be ignored. */
    value?: string;
}

/** The LiveEvent list result. */
export declare interface LiveEventListResult {
    /** The result of the List Live Event operation. */
    value?: LiveEvent[];
    /** The number of result. */
    odataCount?: number;
    /** The link to the next set of results. Not empty if value contains incomplete list of live outputs. */
    odataNextLink?: string;
}

/** Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored. */
export declare interface LiveEventOutputTranscriptionTrack {
    /** The output track name. This property is reserved for future use, any value set on this property will be ignored. */
    trackName: string;
}

/** Live event preview settings. */
export declare interface LiveEventPreview {
    /** The endpoints for preview. Do not share the preview URL with the live event audience. */
    endpoints?: LiveEventEndpoint[];
    /** The access control for live event preview. */
    accessControl?: LiveEventPreviewAccessControl;
    /** The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created. */
    previewLocator?: string;
    /** The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated. */
    streamingPolicyName?: string;
    /** An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field. */
    alternativeMediaId?: string;
}

/** The IP access control for the live event preview endpoint. */
export declare interface LiveEventPreviewAccessControl {
    /** The IP access control properties. */
    ip?: IPAccessControl;
}

/**
 * Defines values for LiveEventResourceState. \
 * {@link KnownLiveEventResourceState} can be used interchangeably with LiveEventResourceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stopped**: This is the initial state of the live event after creation (unless autostart was set to true.) No billing occurs in this state. In this state, the live event properties can be updated but streaming is not allowed. \
 * **Allocating**: Allocate action was called on the live event and resources are being provisioned for this live event. Once allocation completes successfully, the live event will transition to StandBy state. \
 * **StandBy**: Live event resources have been provisioned and is ready to start. Billing occurs in this state. Most properties can still be updated, however ingest or streaming is not allowed during this state. \
 * **Starting**: The live event is being started and resources are being allocated. No billing occurs in this state. Updates or streaming are not allowed during this state. If an error occurs, the live event returns to the Stopped state. \
 * **Running**: The live event resources have been allocated, ingest and preview URLs have been generated, and it is capable of receiving live streams. At this point, billing is active. You must explicitly call Stop on the live event resource to halt further billing. \
 * **Stopping**: The live event is being stopped and resources are being de-provisioned. No billing occurs in this transient state. Updates or streaming are not allowed during this state. \
 * **Deleting**: The live event is being deleted. No billing occurs in this transient state. Updates or streaming are not allowed during this state.
 */
export declare type LiveEventResourceState = string;

/** Interface representing a LiveEvents. */
export declare interface LiveEvents {
    /**
     * Lists all the live events in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: LiveEventsListOptionalParams): PagedAsyncIterableIterator<LiveEvent>;
    /**
     * Gets properties of a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsGetOptionalParams): Promise<LiveEventsGetResponse>;
    /**
     * Creates a new live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters Live event properties needed for creation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, liveEventName: string, parameters: LiveEvent, options?: LiveEventsCreateOptionalParams): Promise<PollerLike<PollOperationState<LiveEventsCreateResponse>, LiveEventsCreateResponse>>;
    /**
     * Creates a new live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters Live event properties needed for creation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, liveEventName: string, parameters: LiveEvent, options?: LiveEventsCreateOptionalParams): Promise<LiveEventsCreateResponse>;
    /**
     * Updates settings on an existing live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters Live event properties needed for patch.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, liveEventName: string, parameters: LiveEvent, options?: LiveEventsUpdateOptionalParams): Promise<PollerLike<PollOperationState<LiveEventsUpdateResponse>, LiveEventsUpdateResponse>>;
    /**
     * Updates settings on an existing live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters Live event properties needed for patch.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, liveEventName: string, parameters: LiveEvent, options?: LiveEventsUpdateOptionalParams): Promise<LiveEventsUpdateResponse>;
    /**
     * Deletes a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsDeleteOptionalParams): Promise<void>;
    /**
     * A live event is in StandBy state after allocation completes, and is ready to start.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginAllocate(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsAllocateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * A live event is in StandBy state after allocation completes, and is ready to start.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginAllocateAndWait(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsAllocateOptionalParams): Promise<void>;
    /**
     * A live event in Stopped or StandBy state will be in Running state after the start operation
     * completes.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * A live event in Stopped or StandBy state will be in Running state after the start operation
     * completes.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsStartOptionalParams): Promise<void>;
    /**
     * Stops a running live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters LiveEvent stop parameters
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, accountName: string, liveEventName: string, parameters: LiveEventActionInput, options?: LiveEventsStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stops a running live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters LiveEvent stop parameters
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, accountName: string, liveEventName: string, parameters: LiveEventActionInput, options?: LiveEventsStopOptionalParams): Promise<void>;
    /**
     * Resets an existing live event. All live outputs for the live event are deleted and the live event is
     * stopped and will be started again. All assets used by the live outputs and streaming locators
     * created on these assets are unaffected.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginReset(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsResetOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Resets an existing live event. All live outputs for the live event are deleted and the live event is
     * stopped and will be started again. All assets used by the live outputs and streaming locators
     * created on these assets are unaffected.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginResetAndWait(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveEventsResetOptionalParams): Promise<void>;
    /**
     * Get a live event operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    asyncOperation(resourceGroupName: string, accountName: string, operationId: string, options?: LiveEventsAsyncOperationOptionalParams): Promise<LiveEventsAsyncOperationResponse>;
    /**
     * Get a live event operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    operationLocation(resourceGroupName: string, accountName: string, liveEventName: string, operationId: string, options?: LiveEventsOperationLocationOptionalParams): Promise<LiveEventsOperationLocationResponse>;
}

/** Optional parameters. */
export declare interface LiveEventsAllocateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LiveEventsAsyncOperationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the asyncOperation operation. */
export declare type LiveEventsAsyncOperationResponse = AsyncOperationResult;

/** Optional parameters. */
export declare interface LiveEventsCreateOptionalParams extends coreClient.OperationOptions {
    /** The flag indicates if the resource should be automatically started on creation. */
    autoStart?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type LiveEventsCreateResponse = LiveEvent;

/** Optional parameters. */
export declare interface LiveEventsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LiveEventsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LiveEventsGetResponse = LiveEvent;

/** Optional parameters. */
export declare interface LiveEventsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type LiveEventsListNextResponse = LiveEventListResult;

/** Optional parameters. */
export declare interface LiveEventsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type LiveEventsListResponse = LiveEventListResult;

/** Optional parameters. */
export declare interface LiveEventsOperationLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the operationLocation operation. */
export declare type LiveEventsOperationLocationResponse = LiveEvent;

/** Optional parameters. */
export declare interface LiveEventsResetOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LiveEventsStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LiveEventsStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LiveEventsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type LiveEventsUpdateResponse = LiveEvent;

/** Describes the transcription tracks in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored. */
export declare interface LiveEventTranscription {
    /** Specifies the language (locale) to be used for speech-to-text transcription – it should match the spoken language in the audio track. The value should be in BCP-47 format (e.g: 'en-US'). See https://go.microsoft.com/fwlink/?linkid=2133742 for more information about the live transcription feature and the list of supported languages. */
    language?: string;
    /** Provides a mechanism to select the audio track in the input live feed, to which speech-to-text transcription is applied. This property is reserved for future use, any value set on this property will be ignored. */
    inputTrackSelection?: LiveEventInputTrackSelection[];
    /** Describes a transcription track in the output of a live event, generated using speech-to-text transcription. This property is reserved for future use, any value set on this property will be ignored. */
    outputTranscriptionTrack?: LiveEventOutputTranscriptionTrack;
}

/** The Live Output. */
export declare interface LiveOutput extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The description of the live output. */
    description?: string;
    /** The asset that the live output will write to. */
    assetName?: string;
    /** ISO 8601 time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use PT1H30M to indicate 1 hour and 30 minutes of archive window. */
    archiveWindowLength?: string;
    /** ISO 8601 time between 1 minute to the duration of archiveWindowLength to control seek-able window length during Live. The service won't use this property once LiveOutput stops. The archived VOD will have full content with original ArchiveWindowLength. For example, use PT1H30M to indicate 1 hour and 30 minutes of rewind window length. Service will use implicit default value 30m only if Live Event enables LL. */
    rewindWindowLength?: string;
    /** The manifest file name. If not provided, the service will generate one automatically. */
    manifestName?: string;
    /** HTTP Live Streaming (HLS) packing setting for the live output. */
    hls?: Hls;
    /** The initial timestamp that the live output will start at, any content before this value will not be archived. */
    outputSnapTime?: number;
    /**
     * The creation time the live output.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The time the live output was last modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /**
     * The provisioning state of the live output.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The resource state of the live output.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceState?: LiveOutputResourceState;
}

/** The LiveOutput list result. */
export declare interface LiveOutputListResult {
    /** The result of the List LiveOutput operation. */
    value?: LiveOutput[];
    /** The number of result. */
    odataCount?: number;
    /** The link to the next set of results. Not empty if value contains incomplete list of live outputs. */
    odataNextLink?: string;
}

/**
 * Defines values for LiveOutputResourceState. \
 * {@link KnownLiveOutputResourceState} can be used interchangeably with LiveOutputResourceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating**: Live output is being created. No content is archived in the asset until the live output is in running state. \
 * **Running**: Live output is running and archiving live streaming content to the asset if there is valid input from a contribution encoder. \
 * **Deleting**: Live output is being deleted. The live asset is being converted from live to on-demand asset. Any streaming URLs created on the live output asset continue to work.
 */
export declare type LiveOutputResourceState = string;

/** Interface representing a LiveOutputs. */
export declare interface LiveOutputs {
    /**
     * Lists the live outputs of a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, liveEventName: string, options?: LiveOutputsListOptionalParams): PagedAsyncIterableIterator<LiveOutput>;
    /**
     * Gets a live output.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, liveEventName: string, liveOutputName: string, options?: LiveOutputsGetOptionalParams): Promise<LiveOutputsGetResponse>;
    /**
     * Creates a new live output.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param parameters Live Output properties needed for creation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, liveEventName: string, liveOutputName: string, parameters: LiveOutput, options?: LiveOutputsCreateOptionalParams): Promise<PollerLike<PollOperationState<LiveOutputsCreateResponse>, LiveOutputsCreateResponse>>;
    /**
     * Creates a new live output.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param parameters Live Output properties needed for creation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, liveEventName: string, liveOutputName: string, parameters: LiveOutput, options?: LiveOutputsCreateOptionalParams): Promise<LiveOutputsCreateResponse>;
    /**
     * Deletes a live output. Deleting a live output does not delete the asset the live output is writing
     * to.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, liveEventName: string, liveOutputName: string, options?: LiveOutputsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a live output. Deleting a live output does not delete the asset the live output is writing
     * to.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, liveEventName: string, liveOutputName: string, options?: LiveOutputsDeleteOptionalParams): Promise<void>;
    /**
     * Get a Live Output operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    asyncOperation(resourceGroupName: string, accountName: string, operationId: string, options?: LiveOutputsAsyncOperationOptionalParams): Promise<LiveOutputsAsyncOperationResponse>;
    /**
     * Get a Live Output operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    operationLocation(resourceGroupName: string, accountName: string, liveEventName: string, liveOutputName: string, operationId: string, options?: LiveOutputsOperationLocationOptionalParams): Promise<LiveOutputsOperationLocationResponse>;
}

/** Optional parameters. */
export declare interface LiveOutputsAsyncOperationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the asyncOperation operation. */
export declare type LiveOutputsAsyncOperationResponse = AsyncOperationResult;

/** Optional parameters. */
export declare interface LiveOutputsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type LiveOutputsCreateResponse = LiveOutput;

/** Optional parameters. */
export declare interface LiveOutputsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LiveOutputsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LiveOutputsGetResponse = LiveOutput;

/** Optional parameters. */
export declare interface LiveOutputsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type LiveOutputsListNextResponse = LiveOutputListResult;

/** Optional parameters. */
export declare interface LiveOutputsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type LiveOutputsListResponse = LiveOutputListResult;

/** Optional parameters. */
export declare interface LiveOutputsOperationLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the operationLocation operation. */
export declare type LiveOutputsOperationLocationResponse = LiveOutput;

/** Interface representing a Locations. */
export declare interface Locations {
    /**
     * Checks whether the Media Service resource name is available.
     * @param locationName Location name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    checkNameAvailability(locationName: string, parameters: CheckNameAvailabilityInput, options?: LocationsCheckNameAvailabilityOptionalParams): Promise<LocationsCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface LocationsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type LocationsCheckNameAvailabilityResponse = EntityNameAvailabilityCheckOutput;

/** A diagnostic log emitted by service. */
export declare interface LogSpecification {
    /**
     * The diagnostic log category name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The diagnostic log category display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The time range for requests in each blob.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly blobDuration?: string;
}

/** A Media Services account. */
export declare interface MediaService extends TrackedResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The Managed Identity for the Media Services account. */
    identity?: MediaServiceIdentity;
    /**
     * The Media Services account ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mediaServiceId?: string;
    /** The storage accounts for this resource. */
    storageAccounts?: StorageAccount[];
    storageAuthentication?: StorageAuthentication;
    /** The account encryption properties. */
    encryption?: AccountEncryption;
    /** The Key Delivery properties for Media Services account. */
    keyDelivery?: KeyDelivery;
    /** Whether or not public network access is allowed for resources under the Media Services account. */
    publicNetworkAccess?: PublicNetworkAccess;
    /**
     * Provisioning state of the Media Services account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The Private Endpoint Connections created for the Media Service account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** A collection of MediaService items. */
export declare interface MediaServiceCollection {
    /** A collection of MediaService items. */
    value?: MediaService[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

export declare interface MediaServiceIdentity {
    /** The identity type. */
    type: string;
    /**
     * The Principal ID of the identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The Tenant ID of the identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The user assigned managed identities. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedManagedIdentity;
    };
}

/** Status of media service operation. */
export declare interface MediaServiceOperationStatus {
    /** Operation identifier. */
    name: string;
    /** Operation resource ID. */
    id?: string;
    /** Operation start time. */
    startTime?: Date;
    /** Operation end time. */
    endTime?: Date;
    /** Operation status. */
    status: string;
    /** The error detail. */
    error?: ErrorDetail;
}

/** Interface representing a Mediaservices. */
export declare interface Mediaservices {
    /**
     * List Media Services accounts in the resource group
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: MediaservicesListOptionalParams): PagedAsyncIterableIterator<MediaService>;
    /**
     * List Media Services accounts in the subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: MediaservicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<MediaService>;
    /**
     * Get the details of a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, options?: MediaservicesGetOptionalParams): Promise<MediaservicesGetResponse>;
    /**
     * Creates or updates a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, parameters: MediaService, options?: MediaservicesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<MediaservicesCreateOrUpdateResponse>, MediaservicesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, accountName: string, parameters: MediaService, options?: MediaservicesCreateOrUpdateOptionalParams): Promise<MediaservicesCreateOrUpdateResponse>;
    /**
     * Deletes a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, options?: MediaservicesDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, parameters: MediaServiceUpdate, options?: MediaservicesUpdateOptionalParams): Promise<PollerLike<PollOperationState<MediaservicesUpdateResponse>, MediaservicesUpdateResponse>>;
    /**
     * Updates an existing Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, parameters: MediaServiceUpdate, options?: MediaservicesUpdateOptionalParams): Promise<MediaservicesUpdateResponse>;
    /**
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    syncStorageKeys(resourceGroupName: string, accountName: string, parameters: SyncStorageKeysInput, options?: MediaservicesSyncStorageKeysOptionalParams): Promise<void>;
    /**
     * List all the media edge policies associated with the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    listEdgePolicies(resourceGroupName: string, accountName: string, parameters: ListEdgePoliciesInput, options?: MediaservicesListEdgePoliciesOptionalParams): Promise<MediaservicesListEdgePoliciesResponse>;
}

/** Defines headers for Mediaservices_createOrUpdate operation. */
export declare interface MediaservicesCreateOrUpdateHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface MediaservicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type MediaservicesCreateOrUpdateResponse = MediaservicesCreateOrUpdateHeaders & MediaService;

/** Optional parameters. */
export declare interface MediaservicesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface MediaservicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MediaservicesGetResponse = MediaService;

/** Optional parameters. */
export declare interface MediaservicesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type MediaservicesListBySubscriptionNextResponse = MediaServiceCollection;

/** Optional parameters. */
export declare interface MediaservicesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type MediaservicesListBySubscriptionResponse = MediaServiceCollection;

/** Optional parameters. */
export declare interface MediaservicesListEdgePoliciesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listEdgePolicies operation. */
export declare type MediaservicesListEdgePoliciesResponse = EdgePolicies;

/** Optional parameters. */
export declare interface MediaservicesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type MediaservicesListNextResponse = MediaServiceCollection;

/** Optional parameters. */
export declare interface MediaservicesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type MediaservicesListResponse = MediaServiceCollection;

/** Interface representing a MediaServicesOperationResults. */
export declare interface MediaServicesOperationResults {
    /**
     * Get media service operation result.
     * @param locationName Location name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(locationName: string, operationId: string, options?: MediaServicesOperationResultsGetOptionalParams): Promise<MediaServicesOperationResultsGetResponse>;
}

/** Defines headers for MediaServicesOperationResults_get operation. */
export declare interface MediaServicesOperationResultsGetHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface MediaServicesOperationResultsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MediaServicesOperationResultsGetResponse = MediaService;

/** Interface representing a MediaServicesOperationStatuses. */
export declare interface MediaServicesOperationStatuses {
    /**
     * Get media service operation status.
     * @param locationName Location name.
     * @param operationId Operation ID.
     * @param options The options parameters.
     */
    get(locationName: string, operationId: string, options?: MediaServicesOperationStatusesGetOptionalParams): Promise<MediaServicesOperationStatusesGetResponse>;
}

/** Optional parameters. */
export declare interface MediaServicesOperationStatusesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MediaServicesOperationStatusesGetResponse = MediaServiceOperationStatus;

/** Optional parameters. */
export declare interface MediaservicesSyncStorageKeysOptionalParams extends coreClient.OperationOptions {
}

/** Defines headers for Mediaservices_update operation. */
export declare interface MediaservicesUpdateHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface MediaservicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type MediaservicesUpdateResponse = MediaservicesUpdateHeaders & MediaService;

/** A Media Services account update. */
export declare interface MediaServiceUpdate {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The Managed Identity for the Media Services account. */
    identity?: MediaServiceIdentity;
    /**
     * The Media Services account ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly mediaServiceId?: string;
    /** The storage accounts for this resource. */
    storageAccounts?: StorageAccount[];
    storageAuthentication?: StorageAuthentication;
    /** The account encryption properties. */
    encryption?: AccountEncryption;
    /** The Key Delivery properties for Media Services account. */
    keyDelivery?: KeyDelivery;
    /** Whether or not public network access is allowed for resources under the Media Services account. */
    publicNetworkAccess?: PublicNetworkAccess;
    /**
     * Provisioning state of the Media Services account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The Private Endpoint Connections created for the Media Service account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/**
 * Defines values for MetricAggregationType. \
 * {@link KnownMetricAggregationType} can be used interchangeably with MetricAggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Average**: The average. \
 * **Count**: The count of a number of items, usually requests. \
 * **Total**: The sum.
 */
export declare type MetricAggregationType = string;

/** A metric dimension. */
export declare interface MetricDimension {
    /**
     * The metric dimension name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The display name for the dimension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Whether to export metric to shoebox.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly toBeExportedForShoebox?: boolean;
}

/** A metric emitted by service. */
export declare interface MetricSpecification {
    /**
     * The metric name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The metric display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The metric display description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayDescription?: string;
    /**
     * The metric unit
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: MetricUnit;
    /**
     * The metric aggregation type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregationType?: MetricAggregationType;
    /**
     * The metric lock aggregation type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lockAggregationType?: MetricAggregationType;
    /** Supported aggregation types. */
    supportedAggregationTypes?: string[];
    /**
     * The metric dimensions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dimensions?: MetricDimension[];
    /**
     * Indicates whether regional MDM account is enabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly enableRegionalMdmAccount?: boolean;
    /**
     * The source MDM account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceMdmAccount?: string;
    /**
     * The source MDM namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceMdmNamespace?: string;
    /**
     * The supported time grain types.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedTimeGrainTypes?: string[];
}

/**
 * Defines values for MetricUnit. \
 * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Bytes**: The number of bytes. \
 * **Count**: The count. \
 * **Milliseconds**: The number of milliseconds.
 */
export declare type MetricUnit = string;

/** Describes the properties for an output ISO MP4 file. */
export declare interface Mp4Format extends MultiBitrateFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.Mp4Format";
}

/** Describes the properties for producing a collection of GOP aligned multi-bitrate files. The default behavior is to produce one output file for each video layer which is muxed together with all the audios. The exact output files produced can be controlled by specifying the outputFiles collection. */
export declare interface MultiBitrateFormat extends Format {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.MultiBitrateFormat" | "#Microsoft.Media.Mp4Format" | "#Microsoft.Media.TransportStreamFormat";
    /** The list of output files to produce.  Each entry in the list is a set of audio and video layer labels to be muxed together . */
    outputFiles?: OutputFile[];
}

export declare type MultiBitrateFormatUnion = MultiBitrateFormat | Mp4Format | TransportStreamFormat;

/** Class for NoEncryption scheme */
export declare interface NoEncryption {
    /** Representing supported protocols */
    enabledProtocols?: EnabledProtocols;
}

/**
 * Defines values for OnErrorType. \
 * {@link KnownOnErrorType} can be used interchangeably with OnErrorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StopProcessingJob**: Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped. \
 * **ContinueJob**: Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue.
 */
export declare type OnErrorType = string;

/** An operation. */
export declare interface Operation {
    /** The operation name. */
    name: string;
    /** The operation display name. */
    display?: OperationDisplay;
    /** Origin of the operation. */
    origin?: string;
    /** Operation properties format. */
    properties?: Properties;
    /** Whether the operation applies to data-plane. */
    isDataAction?: boolean;
    /** Indicates the action type. */
    actionType?: ActionType;
}

/** A collection of Operation items. */
export declare interface OperationCollection {
    /** A collection of Operation items. */
    value?: Operation[];
}

/** Operation details. */
export declare interface OperationDisplay {
    /** The service provider. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
    /** The operation type. */
    operation?: string;
    /** The operation description. */
    description?: string;
}

/** Interface representing a OperationResults. */
export declare interface OperationResults {
    /**
     * Get asset track operation result.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, assetName: string, trackName: string, operationId: string, options?: OperationResultsGetOptionalParams): Promise<OperationResultsGetResponse>;
}

/** Defines headers for OperationResults_get operation. */
export declare interface OperationResultsGetHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface OperationResultsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationResultsGetResponse = AssetTrack;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all the Media Services operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationCollection;

/** Interface representing a OperationStatuses. */
export declare interface OperationStatuses {
    /**
     * Get asset track operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, assetName: string, trackName: string, operationId: string, options?: OperationStatusesGetOptionalParams): Promise<OperationStatusesGetResponse>;
}

/** Optional parameters. */
export declare interface OperationStatusesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationStatusesGetResponse = AssetTrackOperationStatus;

/** Represents an output file produced. */
export declare interface OutputFile {
    /** The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1. */
    labels: string[];
}

/** Base type for all overlays - image, audio or video. */
export declare interface Overlay {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AudioOverlay" | "#Microsoft.Media.VideoOverlay";
    /** The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats. */
    inputLabel: string;
    /** The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video. */
    start?: string;
    /** The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration. */
    end?: string;
    /** The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S). */
    fadeInDuration?: string;
    /** The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S). */
    fadeOutDuration?: string;
    /** The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0. */
    audioGainLevel?: number;
}

export declare type OverlayUnion = Overlay | AudioOverlay | VideoOverlay;

/** Describes the settings for producing PNG thumbnails. */
export declare interface PngFormat extends ImageFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.PngFormat";
}

/** Describes the properties for producing a series of PNG images from the input video. */
export declare interface PngImage extends Image_2 {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.PngImage";
    /** A collection of output PNG image layers to be produced by the encoder. */
    layers?: PngLayer[];
}

/** Describes the settings to produce a PNG image from the input video. */
export declare interface PngLayer extends Layer {
}

/** The presentation time range, this is asset related and not recommended for Account Filter. */
export declare interface PresentationTimeRange {
    /** The absolute start time boundary. */
    startTimestamp?: number;
    /** The absolute end time boundary. */
    endTimestamp?: number;
    /** The relative to end sliding window. */
    presentationWindowDuration?: number;
    /** The relative to end right edge. */
    liveBackoffDuration?: number;
    /** The time scale of time stamps. */
    timescale?: number;
    /** The indicator of forcing existing of end time stamp. */
    forceEndTimestamp?: boolean;
}

/** Base type for all Presets, which define the recipe or instructions on how the input media files should be processed. */
export declare interface Preset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.FaceDetectorPreset" | "#Microsoft.Media.AudioAnalyzerPreset" | "#Microsoft.Media.BuiltInStandardEncoderPreset" | "#Microsoft.Media.StandardEncoderPreset" | "#Microsoft.Media.VideoAnalyzerPreset";
}

/** An object of optional configuration settings for encoder. */
export declare interface PresetConfigurations {
    /** Allows you to configure the encoder settings to control the balance between speed and quality. Example: set Complexity as Speed for faster encoding but less compression efficiency. */
    complexity?: Complexity;
    /** Sets the interleave mode of the output to control how audio and video are stored in the container format. Example: set InterleavedOutput as NonInterleavedOutput to produce audio-only and video-only outputs in separate MP4 files. */
    interleaveOutput?: InterleaveOutput;
    /** The key frame interval in seconds. Example: set KeyFrameIntervalInSeconds as 2 to reduce the playback buffering for some players. */
    keyFrameIntervalInSeconds?: number;
    /** The maximum bitrate in bits per second (threshold for the top video layer). Example: set MaxBitrateBps as 6000000 to avoid producing very high bitrate outputs for contents with high complexity. */
    maxBitrateBps?: number;
    /** The maximum height of output video layers. Example: set MaxHeight as 720 to produce output layers up to 720P even if the input is 4K. */
    maxHeight?: number;
    /** The maximum number of output video layers. Example: set MaxLayers as 4 to make sure at most 4 output layers are produced to control the overall cost of the encoding job. */
    maxLayers?: number;
    /** The minimum bitrate in bits per second (threshold for the bottom video layer). Example: set MinBitrateBps as 200000 to have a bottom layer that covers users with low network bandwidth. */
    minBitrateBps?: number;
    /** The minimum height of output video layers. Example: set MinHeight as 360 to avoid output layers of smaller resolutions like 180P. */
    minHeight?: number;
}

export declare type PresetUnion = Preset | FaceDetectorPreset | AudioAnalyzerPresetUnion | BuiltInStandardEncoderPreset | StandardEncoderPreset;

/**
 * Defines values for Priority. \
 * {@link KnownPriority} can be used interchangeably with Priority,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Low**: Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs. \
 * **Normal**: Used for TransformOutputs that can be generated at Normal priority. \
 * **High**: Used for TransformOutputs that should take precedence over others.
 */
export declare type Priority = string;

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends Resource {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List all private endpoint connections.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: PrivateEndpointConnectionsListOptionalParams): Promise<PrivateEndpointConnectionsListResponse>;
    /**
     * Get the details of a private endpoint connection.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, name: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update an existing private endpoint connection.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, name: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes a private endpoint connection.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, name: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource extends Resource {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * List supported group IDs.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: PrivateLinkResourcesListOptionalParams): Promise<PrivateLinkResourcesListResponse>;
    /**
     * Get details of a group ID.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, name: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkResourcesListResponse = PrivateLinkResourceListResult;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/** The service specification property. */
export declare interface Properties {
    /**
     * The service specifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceSpecification?: ServiceSpecification;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed**: Provisioning state failed. \
 * **InProgress**: Provisioning state in progress. \
 * **Succeeded**: Provisioning state succeeded.
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Public network access is enabled. \
 * **Disabled**: Public network access is disabled.
 */
export declare type PublicNetworkAccess = string;

/** Describes the properties of a rectangular window applied to the input media before processing it. */
export declare interface Rectangle {
    /** The number of pixels from the left-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%). */
    left?: string;
    /** The number of pixels from the top-margin. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%). */
    top?: string;
    /** The width of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%). */
    width?: string;
    /** The height of the rectangular region in pixels. This can be absolute pixel value (e.g 100), or relative to the size of the video (For example, 50%). */
    height?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

export declare interface ResourceIdentity {
    /** The user assigned managed identity's ARM ID to use when accessing a resource. */
    userAssignedIdentity?: string;
    /** Indicates whether to use System Assigned Managed Identity. Mutual exclusive with User Assigned Managed Identity. */
    useSystemAssignedIdentity: boolean;
}

/**
 * Defines values for Rotation. \
 * {@link KnownRotation} can be used interchangeably with Rotation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: Automatically detect and rotate as needed. \
 * **None**: Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact. \
 * **Rotate0**: Do not rotate the video but remove any metadata about the rotation. \
 * **Rotate90**: Rotate 90 degrees clockwise. \
 * **Rotate180**: Rotate 180 degrees clockwise. \
 * **Rotate270**: Rotate 270 degrees clockwise.
 */
export declare type Rotation = string;

/**
 * Defines values for SecurityLevel. \
 * {@link KnownSecurityLevel} can be used interchangeably with SecurityLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Represents a SecurityLevel that is unavailable in current API version. \
 * **SL150**: For clients under development or test. No protection against unauthorized use. \
 * **SL2000**: For hardened devices and applications consuming commercial content. Software or hardware protection. \
 * **SL3000**: For hardened devices only. Hardware protection.
 */
export declare type SecurityLevel = string;

/** Select audio tracks from the input by specifying an attribute and an attribute filter. */
export declare interface SelectAudioTrackByAttribute extends AudioTrackDescriptor {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.SelectAudioTrackByAttribute";
    /** The TrackAttribute to filter the tracks by. */
    attribute: TrackAttribute;
    /** The type of AttributeFilter to apply to the TrackAttribute in order to select the tracks. */
    filter: AttributeFilter;
    /** The value to filter the tracks by.  Only used when AttributeFilter.ValueEquals is specified for the Filter property. */
    filterValue?: string;
}

/** Select audio tracks from the input by specifying a track identifier. */
export declare interface SelectAudioTrackById extends AudioTrackDescriptor {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.SelectAudioTrackById";
    /** Track identifier to select */
    trackId: number;
}

/** Select video tracks from the input by specifying an attribute and an attribute filter. */
export declare interface SelectVideoTrackByAttribute extends VideoTrackDescriptor {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.SelectVideoTrackByAttribute";
    /** The TrackAttribute to filter the tracks by. */
    attribute: TrackAttribute;
    /** The type of AttributeFilter to apply to the TrackAttribute in order to select the tracks. */
    filter: AttributeFilter;
    /** The value to filter the tracks by.  Only used when AttributeFilter.ValueEquals is specified for the Filter property. For TrackAttribute.Bitrate, this should be an integer value in bits per second (e.g: '1500000').  The TrackAttribute.Language is not supported for video tracks. */
    filterValue?: string;
}

/** Select video tracks from the input by specifying a track identifier. */
export declare interface SelectVideoTrackById extends VideoTrackDescriptor {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.SelectVideoTrackById";
    /** Track identifier to select */
    trackId: number;
}

/** The service metric specifications. */
export declare interface ServiceSpecification {
    /**
     * List of log specifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly logSpecifications?: LogSpecification[];
    /**
     * List of metric specifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricSpecifications?: MetricSpecification[];
}

/** Describes all the settings to be used when encoding the input video with the Standard Encoder. */
export declare interface StandardEncoderPreset extends Preset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.StandardEncoderPreset";
    /** One or more filtering operations that are applied to the input media before encoding. */
    filters?: Filters;
    /** The list of codecs to be used when encoding the input video. */
    codecs: CodecUnion[];
    /** The list of outputs to be produced by the encoder. */
    formats: FormatUnion[];
}

/** The storage account details. */
export declare interface StorageAccount {
    /** The ID of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts. */
    id?: string;
    /** The type of the storage account. */
    type: StorageAccountType;
    /** The storage account identity. */
    identity?: ResourceIdentity;
    /**
     * The current status of the storage account mapping.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/**
 * Defines values for StorageAccountType. \
 * {@link KnownStorageAccountType} can be used interchangeably with StorageAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Primary**: The primary storage account for the Media Services account. \
 * **Secondary**: A secondary storage account for the Media Services account.
 */
export declare type StorageAccountType = string;

/**
 * Defines values for StorageAuthentication. \
 * {@link KnownStorageAuthentication} can be used interchangeably with StorageAuthentication,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **System**: System authentication. \
 * **ManagedIdentity**: Managed Identity authentication.
 */
export declare type StorageAuthentication = string;

/** Data needed to decrypt asset files encrypted with legacy storage encryption. */
export declare interface StorageEncryptedAssetDecryptionData {
    /** The Asset File storage encryption key. */
    key?: Uint8Array;
    /** Asset File encryption metadata. */
    assetFileEncryptionMetadata?: AssetFileEncryptionMetadata[];
}

/** The streaming endpoint. */
export declare interface StreamingEndpoint extends TrackedResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The streaming endpoint sku. */
    sku?: ArmStreamingEndpointCurrentSku;
    /** The streaming endpoint description. */
    description?: string;
    /** The number of scale units. Use the Scale operation to adjust this value. */
    scaleUnits?: number;
    /** This feature is deprecated, do not set a value for this property. */
    availabilitySetName?: string;
    /** The access control definition of the streaming endpoint. */
    accessControl?: StreamingEndpointAccessControl;
    /** Max cache age */
    maxCacheAge?: number;
    /** The custom host names of the streaming endpoint */
    customHostNames?: string[];
    /**
     * The streaming endpoint host name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostName?: string;
    /** The CDN enabled flag. */
    cdnEnabled?: boolean;
    /** The CDN provider name. */
    cdnProvider?: string;
    /** The CDN profile name. */
    cdnProfile?: string;
    /**
     * The provisioning state of the streaming endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The resource state of the streaming endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceState?: StreamingEndpointResourceState;
    /** The streaming endpoint access policies. */
    crossSiteAccessPolicies?: CrossSiteAccessPolicies;
    /**
     * The free trial expiration time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly freeTrialEndTime?: Date;
    /**
     * The exact time the streaming endpoint was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The exact time the streaming endpoint was last modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
}

/** Streaming endpoint access control definition. */
export declare interface StreamingEndpointAccessControl {
    /** The access control of Akamai */
    akamai?: AkamaiAccessControl;
    /** The IP access control of the streaming endpoint. */
    ip?: IPAccessControl;
}

/** The streaming endpoint list result. */
export declare interface StreamingEndpointListResult {
    /** The result of the List StreamingEndpoint operation. */
    value?: StreamingEndpoint[];
    /** The number of result. */
    odataCount?: number;
    /** The link to the next set of results. Not empty if value contains incomplete list of streaming endpoints. */
    odataNextLink?: string;
}

/**
 * Defines values for StreamingEndpointResourceState. \
 * {@link KnownStreamingEndpointResourceState} can be used interchangeably with StreamingEndpointResourceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stopped**: The initial state of a streaming endpoint after creation. Content is not ready to be streamed from this endpoint. \
 * **Starting**: The streaming endpoint is transitioning to the running state. \
 * **Running**: The streaming endpoint is running. It is able to stream content to clients \
 * **Stopping**: The streaming endpoint is transitioning to the stopped state. \
 * **Deleting**: The streaming endpoint is being deleted. \
 * **Scaling**: The streaming endpoint is increasing or decreasing scale units.
 */
export declare type StreamingEndpointResourceState = string;

/** Interface representing a StreamingEndpoints. */
export declare interface StreamingEndpoints {
    /**
     * Lists the streaming endpoints in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: StreamingEndpointsListOptionalParams): PagedAsyncIterableIterator<StreamingEndpoint>;
    /**
     * Gets a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: StreamingEndpointsGetOptionalParams): Promise<StreamingEndpointsGetResponse>;
    /**
     * Creates a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint properties needed for creation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: StreamingEndpoint, options?: StreamingEndpointsCreateOptionalParams): Promise<PollerLike<PollOperationState<StreamingEndpointsCreateResponse>, StreamingEndpointsCreateResponse>>;
    /**
     * Creates a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint properties needed for creation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: StreamingEndpoint, options?: StreamingEndpointsCreateOptionalParams): Promise<StreamingEndpointsCreateResponse>;
    /**
     * Updates a existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint properties needed for creation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: StreamingEndpoint, options?: StreamingEndpointsUpdateOptionalParams): Promise<PollerLike<PollOperationState<StreamingEndpointsUpdateResponse>, StreamingEndpointsUpdateResponse>>;
    /**
     * Updates a existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint properties needed for creation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: StreamingEndpoint, options?: StreamingEndpointsUpdateOptionalParams): Promise<StreamingEndpointsUpdateResponse>;
    /**
     * Deletes a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: StreamingEndpointsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: StreamingEndpointsDeleteOptionalParams): Promise<void>;
    /**
     * List streaming endpoint supported skus.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    skus(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: StreamingEndpointsSkusOptionalParams): Promise<StreamingEndpointsSkusResponse>;
    /**
     * Starts an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: StreamingEndpointsStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Starts an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: StreamingEndpointsStartOptionalParams): Promise<void>;
    /**
     * Stops an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: StreamingEndpointsStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stops an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: StreamingEndpointsStopOptionalParams): Promise<void>;
    /**
     * Scales an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint scale parameters
     * @param options The options parameters.
     */
    beginScale(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: StreamingEntityScaleUnit, options?: StreamingEndpointsScaleOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Scales an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint scale parameters
     * @param options The options parameters.
     */
    beginScaleAndWait(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: StreamingEntityScaleUnit, options?: StreamingEndpointsScaleOptionalParams): Promise<void>;
    /**
     * Get a streaming endpoint operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    asyncOperation(resourceGroupName: string, accountName: string, operationId: string, options?: StreamingEndpointsAsyncOperationOptionalParams): Promise<StreamingEndpointsAsyncOperationResponse>;
    /**
     * Get a streaming endpoint operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    operationLocation(resourceGroupName: string, accountName: string, streamingEndpointName: string, operationId: string, options?: StreamingEndpointsOperationLocationOptionalParams): Promise<StreamingEndpointsOperationLocationResponse>;
}

/** Optional parameters. */
export declare interface StreamingEndpointsAsyncOperationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the asyncOperation operation. */
export declare type StreamingEndpointsAsyncOperationResponse = AsyncOperationResult;

/** Optional parameters. */
export declare interface StreamingEndpointsCreateOptionalParams extends coreClient.OperationOptions {
    /** The flag indicates if the resource should be automatically started on creation. */
    autoStart?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type StreamingEndpointsCreateResponse = StreamingEndpoint;

/** Optional parameters. */
export declare interface StreamingEndpointsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface StreamingEndpointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StreamingEndpointsGetResponse = StreamingEndpoint;

export declare interface StreamingEndpointSkuInfoListResult {
    /** The result of the List StreamingEndpoint skus. */
    value?: ArmStreamingEndpointSkuInfo[];
}

/** Optional parameters. */
export declare interface StreamingEndpointsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type StreamingEndpointsListNextResponse = StreamingEndpointListResult;

/** Optional parameters. */
export declare interface StreamingEndpointsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type StreamingEndpointsListResponse = StreamingEndpointListResult;

/** Optional parameters. */
export declare interface StreamingEndpointsOperationLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the operationLocation operation. */
export declare type StreamingEndpointsOperationLocationResponse = StreamingEndpoint;

/** Optional parameters. */
export declare interface StreamingEndpointsScaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface StreamingEndpointsSkusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the skus operation. */
export declare type StreamingEndpointsSkusResponse = StreamingEndpointSkuInfoListResult;

/** Optional parameters. */
export declare interface StreamingEndpointsStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface StreamingEndpointsStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface StreamingEndpointsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type StreamingEndpointsUpdateResponse = StreamingEndpoint;

/** scale units definition */
export declare interface StreamingEntityScaleUnit {
    /** The scale unit number of the streaming endpoint. */
    scaleUnit?: number;
}

/** A Streaming Locator resource */
export declare interface StreamingLocator extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Asset Name */
    assetName?: string;
    /**
     * The creation time of the Streaming Locator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /** The start time of the Streaming Locator. */
    startTime?: Date;
    /** The end time of the Streaming Locator. */
    endTime?: Date;
    /** The StreamingLocatorId of the Streaming Locator. */
    streamingLocatorId?: string;
    /** Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_MultiDrmCencStreaming' and 'Predefined_MultiDrmStreaming' */
    streamingPolicyName?: string;
    /** Name of the default ContentKeyPolicy used by this Streaming Locator. */
    defaultContentKeyPolicyName?: string;
    /** The ContentKeys used by this Streaming Locator. */
    contentKeys?: StreamingLocatorContentKey[];
    /** Alternative Media ID of this Streaming Locator */
    alternativeMediaId?: string;
    /** A list of asset or account filters which apply to this streaming locator */
    filters?: string[];
}

/** A collection of StreamingLocator items. */
export declare interface StreamingLocatorCollection {
    /** A collection of StreamingLocator items. */
    value?: StreamingLocator[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

/** Class for content key in Streaming Locator */
export declare interface StreamingLocatorContentKey {
    /** ID of Content Key */
    id: string;
    /**
     * Encryption type of Content Key
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: StreamingLocatorContentKeyType;
    /** Label of Content Key as specified in the Streaming Policy */
    labelReferenceInStreamingPolicy?: string;
    /** Value of Content Key */
    value?: string;
    /**
     * ContentKeyPolicy used by Content Key
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyName?: string;
    /**
     * Tracks which use this Content Key
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tracks?: TrackSelection[];
}

/**
 * Defines values for StreamingLocatorContentKeyType. \
 * {@link KnownStreamingLocatorContentKeyType} can be used interchangeably with StreamingLocatorContentKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CommonEncryptionCenc**: Common Encryption using CENC \
 * **CommonEncryptionCbcs**: Common Encryption using CBCS \
 * **EnvelopeEncryption**: Envelope Encryption
 */
export declare type StreamingLocatorContentKeyType = string;

/** Interface representing a StreamingLocators. */
export declare interface StreamingLocators {
    /**
     * Lists the Streaming Locators in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: StreamingLocatorsListOptionalParams): PagedAsyncIterableIterator<StreamingLocator>;
    /**
     * Get the details of a Streaming Locator in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: StreamingLocatorsGetOptionalParams): Promise<StreamingLocatorsGetResponse>;
    /**
     * Create a Streaming Locator in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    create(resourceGroupName: string, accountName: string, streamingLocatorName: string, parameters: StreamingLocator, options?: StreamingLocatorsCreateOptionalParams): Promise<StreamingLocatorsCreateResponse>;
    /**
     * Deletes a Streaming Locator in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: StreamingLocatorsDeleteOptionalParams): Promise<void>;
    /**
     * List Content Keys used by this Streaming Locator
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param options The options parameters.
     */
    listContentKeys(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: StreamingLocatorsListContentKeysOptionalParams): Promise<StreamingLocatorsListContentKeysResponse>;
    /**
     * List Paths supported by this Streaming Locator
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param options The options parameters.
     */
    listPaths(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: StreamingLocatorsListPathsOptionalParams): Promise<StreamingLocatorsListPathsResponse>;
}

/** Optional parameters. */
export declare interface StreamingLocatorsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type StreamingLocatorsCreateResponse = StreamingLocator;

/** Optional parameters. */
export declare interface StreamingLocatorsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface StreamingLocatorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StreamingLocatorsGetResponse = StreamingLocator;

/** Optional parameters. */
export declare interface StreamingLocatorsListContentKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listContentKeys operation. */
export declare type StreamingLocatorsListContentKeysResponse = ListContentKeysResponse;

/** Optional parameters. */
export declare interface StreamingLocatorsListNextOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type StreamingLocatorsListNextResponse = StreamingLocatorCollection;

/** Optional parameters. */
export declare interface StreamingLocatorsListOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Optional parameters. */
export declare interface StreamingLocatorsListPathsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPaths operation. */
export declare type StreamingLocatorsListPathsResponse = ListPathsResponse;

/** Contains response data for the list operation. */
export declare type StreamingLocatorsListResponse = StreamingLocatorCollection;

/** Class of paths for streaming */
export declare interface StreamingPath {
    /** Streaming protocol */
    streamingProtocol: StreamingPolicyStreamingProtocol;
    /** Encryption scheme */
    encryptionScheme: EncryptionScheme;
    /** Streaming paths for each protocol and encryptionScheme pair */
    paths?: string[];
}

/** Interface representing a StreamingPolicies. */
export declare interface StreamingPolicies {
    /**
     * Lists the Streaming Policies in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: StreamingPoliciesListOptionalParams): PagedAsyncIterableIterator<StreamingPolicy>;
    /**
     * Get the details of a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, streamingPolicyName: string, options?: StreamingPoliciesGetOptionalParams): Promise<StreamingPoliciesGetResponse>;
    /**
     * Create a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    create(resourceGroupName: string, accountName: string, streamingPolicyName: string, parameters: StreamingPolicy, options?: StreamingPoliciesCreateOptionalParams): Promise<StreamingPoliciesCreateResponse>;
    /**
     * Deletes a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, streamingPolicyName: string, options?: StreamingPoliciesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface StreamingPoliciesCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type StreamingPoliciesCreateResponse = StreamingPolicy;

/** Optional parameters. */
export declare interface StreamingPoliciesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface StreamingPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StreamingPoliciesGetResponse = StreamingPolicy;

/** Optional parameters. */
export declare interface StreamingPoliciesListNextOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type StreamingPoliciesListNextResponse = StreamingPolicyCollection;

/** Optional parameters. */
export declare interface StreamingPoliciesListOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type StreamingPoliciesListResponse = StreamingPolicyCollection;

/** A Streaming Policy resource */
export declare interface StreamingPolicy extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Creation time of Streaming Policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /** Default ContentKey used by current Streaming Policy */
    defaultContentKeyPolicyName?: string;
    /** Configuration of EnvelopeEncryption */
    envelopeEncryption?: EnvelopeEncryption;
    /** Configuration of CommonEncryptionCenc */
    commonEncryptionCenc?: CommonEncryptionCenc;
    /** Configuration of CommonEncryptionCbcs */
    commonEncryptionCbcs?: CommonEncryptionCbcs;
    /** Configurations of NoEncryption */
    noEncryption?: NoEncryption;
}

/** A collection of StreamingPolicy items. */
export declare interface StreamingPolicyCollection {
    /** A collection of StreamingPolicy items. */
    value?: StreamingPolicy[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

/** Class to specify properties of content key */
export declare interface StreamingPolicyContentKey {
    /** Label can be used to specify Content Key when creating a Streaming Locator */
    label?: string;
    /** Policy used by Content Key */
    policyName?: string;
    /** Tracks which use this content key */
    tracks?: TrackSelection[];
}

/** Class to specify properties of all content keys in Streaming Policy */
export declare interface StreamingPolicyContentKeys {
    /** Default content key for an encryption scheme */
    defaultKey?: DefaultKey;
    /** Representing tracks needs separate content key */
    keyToTrackMappings?: StreamingPolicyContentKey[];
}

/** Class to specify configurations of FairPlay in Streaming Policy */
export declare interface StreamingPolicyFairPlayConfiguration {
    /** Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested. */
    customLicenseAcquisitionUrlTemplate?: string;
    /** All license to be persistent or not */
    allowPersistentLicense: boolean;
}

/** Class to specify configurations of PlayReady in Streaming Policy */
export declare interface StreamingPolicyPlayReadyConfiguration {
    /** Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested. */
    customLicenseAcquisitionUrlTemplate?: string;
    /** Custom attributes for PlayReady */
    playReadyCustomAttributes?: string;
}

/**
 * Defines values for StreamingPolicyStreamingProtocol. \
 * {@link KnownStreamingPolicyStreamingProtocol} can be used interchangeably with StreamingPolicyStreamingProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hls**: HLS protocol \
 * **Dash**: DASH protocol \
 * **SmoothStreaming**: SmoothStreaming protocol \
 * **Download**: Download protocol
 */
export declare type StreamingPolicyStreamingProtocol = string;

/** Class to specify configurations of Widevine in Streaming Policy */
export declare interface StreamingPolicyWidevineConfiguration {
    /** Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested. */
    customLicenseAcquisitionUrlTemplate?: string;
}

/**
 * Defines values for StreamOptionsFlag. \
 * {@link KnownStreamOptionsFlag} can be used interchangeably with StreamOptionsFlag,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: Live streaming with no special latency optimizations. \
 * **LowLatency**: The live event provides lower end to end latency by reducing its internal buffers. \
 * **LowLatencyV2**: The live event is optimized for end to end latency. This option is only available for encoding live events with RTMP input. The outputs can be streamed using HLS or DASH formats. The outputs' archive or DVR rewind length is limited to 6 hours. Use "LowLatency" stream option for all other scenarios.
 */
export declare type StreamOptionsFlag = string;

/**
 * Defines values for StretchMode. \
 * {@link KnownStretchMode} can be used interchangeably with StretchMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video. \
 * **AutoSize**: Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9. \
 * **AutoFit**: Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right.
 */
export declare type StretchMode = string;

/** The input to the sync storage keys request. */
export declare interface SyncStorageKeysInput {
    /** The ID of the storage account resource. */
    id?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Represents a text track in an asset. A text track is usually used for sparse data related to the audio or video tracks. */
declare interface TextTrack_2 extends TrackBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.TextTrack";
    /** The file name to the source file. This file is located in the storage container of the asset. */
    fileName?: string;
    /** The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA. */
    displayName?: string;
    /**
     * The RFC5646 language code for the text track.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly languageCode?: string;
    /** When PlayerVisibility is set to "Visible", the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to "Hidden", the text will not be available to the client. The default value is "Visible". */
    playerVisibility?: Visibility;
    /** The HLS specific setting for the text track. */
    hlsSettings?: HlsSettings;
}
export { TextTrack_2 as TextTrack }

/**
 * Defines values for TrackAttribute. \
 * {@link KnownTrackAttribute} can be used interchangeably with TrackAttribute,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Bitrate**: The bitrate of the track. \
 * **Language**: The language of the track.
 */
export declare type TrackAttribute = string;

/** Base type for concrete track types. A derived type must be used to represent the Track. */
export declare interface TrackBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AudioTrack" | "#Microsoft.Media.VideoTrack" | "#Microsoft.Media.TextTrack";
}

export declare type TrackBaseUnion = TrackBase | AudioTrack | VideoTrack | TextTrack_2;

/** Base type for all TrackDescriptor types, which define the metadata and selection for tracks that should be processed by a Job */
export declare interface TrackDescriptor {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.AudioTrackDescriptor" | "#Microsoft.Media.SelectAudioTrackByAttribute" | "#Microsoft.Media.SelectAudioTrackById" | "#Microsoft.Media.VideoTrackDescriptor" | "#Microsoft.Media.SelectVideoTrackByAttribute" | "#Microsoft.Media.SelectVideoTrackById";
}

export declare type TrackDescriptorUnion = TrackDescriptor | AudioTrackDescriptorUnion | VideoTrackDescriptorUnion;

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/**
 * Defines values for TrackPropertyCompareOperation. \
 * {@link KnownTrackPropertyCompareOperation} can be used interchangeably with TrackPropertyCompareOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Unknown track property compare operation \
 * **Equal**: Equal operation
 */
export declare type TrackPropertyCompareOperation = string;

/** Class to specify one track property condition */
export declare interface TrackPropertyCondition {
    /** Track property type */
    property: TrackPropertyType;
    /** Track property condition operation */
    operation: TrackPropertyCompareOperation;
    /** Track property value */
    value?: string;
}

/**
 * Defines values for TrackPropertyType. \
 * {@link KnownTrackPropertyType} can be used interchangeably with TrackPropertyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Unknown track property \
 * **FourCC**: Track FourCC
 */
export declare type TrackPropertyType = string;

/** Interface representing a Tracks. */
export declare interface Tracks {
    /**
     * Lists the Tracks in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, assetName: string, options?: TracksListOptionalParams): PagedAsyncIterableIterator<AssetTrack>;
    /**
     * Get the details of a Track in the Asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, assetName: string, trackName: string, options?: TracksGetOptionalParams): Promise<TracksGetResponse>;
    /**
     * Create or update a Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, assetName: string, trackName: string, parameters: AssetTrack, options?: TracksCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<TracksCreateOrUpdateResponse>, TracksCreateOrUpdateResponse>>;
    /**
     * Create or update a Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, accountName: string, assetName: string, trackName: string, parameters: AssetTrack, options?: TracksCreateOrUpdateOptionalParams): Promise<TracksCreateOrUpdateResponse>;
    /**
     * Deletes a Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, assetName: string, trackName: string, options?: TracksDeleteOptionalParams): Promise<PollerLike<PollOperationState<TracksDeleteResponse>, TracksDeleteResponse>>;
    /**
     * Deletes a Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, assetName: string, trackName: string, options?: TracksDeleteOptionalParams): Promise<TracksDeleteResponse>;
    /**
     * Updates an existing Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, assetName: string, trackName: string, parameters: AssetTrack, options?: TracksUpdateOptionalParams): Promise<PollerLike<PollOperationState<TracksUpdateResponse>, TracksUpdateResponse>>;
    /**
     * Updates an existing Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, assetName: string, trackName: string, parameters: AssetTrack, options?: TracksUpdateOptionalParams): Promise<TracksUpdateResponse>;
    /**
     * Update the track data. Call this API after any changes are made to the track data stored in the
     * asset container. For example, you have modified the WebVTT captions file in the Azure blob storage
     * container for the asset, viewers will not see the new version of the captions unless this API is
     * called. Note, the changes may not be reflected immediately. CDN cache may also need to be purged if
     * applicable.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    beginUpdateTrackData(resourceGroupName: string, accountName: string, assetName: string, trackName: string, options?: TracksUpdateTrackDataOptionalParams): Promise<PollerLike<PollOperationState<TracksUpdateTrackDataResponse>, TracksUpdateTrackDataResponse>>;
    /**
     * Update the track data. Call this API after any changes are made to the track data stored in the
     * asset container. For example, you have modified the WebVTT captions file in the Azure blob storage
     * container for the asset, viewers will not see the new version of the captions unless this API is
     * called. Note, the changes may not be reflected immediately. CDN cache may also need to be purged if
     * applicable.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    beginUpdateTrackDataAndWait(resourceGroupName: string, accountName: string, assetName: string, trackName: string, options?: TracksUpdateTrackDataOptionalParams): Promise<TracksUpdateTrackDataResponse>;
}

/** Defines headers for Tracks_createOrUpdate operation. */
export declare interface TracksCreateOrUpdateHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface TracksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TracksCreateOrUpdateResponse = TracksCreateOrUpdateHeaders & AssetTrack;

/** Defines headers for Tracks_delete operation. */
export declare interface TracksDeleteHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface TracksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type TracksDeleteResponse = TracksDeleteHeaders;

/** Class to select a track */
export declare interface TrackSelection {
    /** TrackSelections is a track property condition list which can specify track(s) */
    trackSelections?: TrackPropertyCondition[];
}

/** Optional parameters. */
export declare interface TracksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TracksGetResponse = AssetTrack;

/** Optional parameters. */
export declare interface TracksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type TracksListResponse = AssetTrackCollection;

/** Defines headers for Tracks_update operation. */
export declare interface TracksUpdateHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface TracksUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type TracksUpdateResponse = TracksUpdateHeaders & AssetTrack;

/** Defines headers for Tracks_updateTrackData operation. */
export declare interface TracksUpdateTrackDataHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface TracksUpdateTrackDataOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateTrackData operation. */
export declare type TracksUpdateTrackDataResponse = TracksUpdateTrackDataHeaders;

/** A Transform encapsulates the rules or instructions for generating desired outputs from input media, such as by transcoding or by extracting insights. After the Transform is created, it can be applied to input media by creating Jobs. */
export declare interface Transform extends ProxyResource {
    /**
     * The system metadata relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The UTC date and time when the Transform was created, in 'YYYY-MM-DDThh:mm:ssZ' format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /** An optional verbose description of the Transform. */
    description?: string;
    /**
     * The UTC date and time when the Transform was last updated, in 'YYYY-MM-DDThh:mm:ssZ' format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /** An array of one or more TransformOutputs that the Transform should generate. */
    outputs?: TransformOutput[];
}

/** A collection of Transform items. */
export declare interface TransformCollection {
    /** A collection of Transform items. */
    value?: Transform[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    odataNextLink?: string;
}

/** Describes the properties of a TransformOutput, which are the rules to be applied while generating the desired output. */
export declare interface TransformOutput {
    /** A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'. */
    onError?: OnErrorType;
    /** Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal. */
    relativePriority?: Priority;
    /** Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output. */
    preset: PresetUnion;
}

/** Interface representing a Transforms. */
export declare interface Transforms {
    /**
     * Lists the Transforms in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: TransformsListOptionalParams): PagedAsyncIterableIterator<Transform>;
    /**
     * Gets a Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, transformName: string, options?: TransformsGetOptionalParams): Promise<TransformsGetResponse>;
    /**
     * Creates or updates a new Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, transformName: string, parameters: Transform, options?: TransformsCreateOrUpdateOptionalParams): Promise<TransformsCreateOrUpdateResponse>;
    /**
     * Deletes a Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, transformName: string, options?: TransformsDeleteOptionalParams): Promise<void>;
    /**
     * Updates a Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, transformName: string, parameters: Transform, options?: TransformsUpdateOptionalParams): Promise<TransformsUpdateResponse>;
}

/** Optional parameters. */
export declare interface TransformsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type TransformsCreateOrUpdateResponse = Transform;

/** Optional parameters. */
export declare interface TransformsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TransformsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TransformsGetResponse = Transform;

/** Optional parameters. */
export declare interface TransformsListNextOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type TransformsListNextResponse = TransformCollection;

/** Optional parameters. */
export declare interface TransformsListOptionalParams extends coreClient.OperationOptions {
    /** Restricts the set of items returned. */
    filter?: string;
    /** Specifies the key by which the result collection should be ordered. */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type TransformsListResponse = TransformCollection;

/** Optional parameters. */
export declare interface TransformsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type TransformsUpdateResponse = Transform;

/** Describes the properties for generating an MPEG-2 Transport Stream (ISO/IEC 13818-1) output video file(s). */
export declare interface TransportStreamFormat extends MultiBitrateFormat {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.TransportStreamFormat";
}

export declare interface UserAssignedManagedIdentity {
    /**
     * The client ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
    /**
     * The principal ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
}

/** Specifies the clip time as a Utc time position in the media file.  The Utc time can point to a different position depending on whether the media file starts from a timestamp of zero or not. */
export declare interface UtcClipTime extends ClipTime {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.UtcClipTime";
    /** The time position on the timeline of the input media based on Utc time. */
    time: Date;
}

/** Describes the basic properties for encoding the input video. */
export declare interface Video extends Codec {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.Video" | "#Microsoft.Media.H265Video" | "#Microsoft.Media.Image" | "#Microsoft.Media.H264Video" | "#Microsoft.Media.JpgImage" | "#Microsoft.Media.PngImage";
    /** The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting. */
    keyFrameInterval?: string;
    /** The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize */
    stretchMode?: StretchMode;
    /** The Video Sync Mode */
    syncMode?: VideoSyncMode;
}

/** A video analyzer preset that extracts insights (rich metadata) from both audio and video, and outputs a JSON format file. */
export declare interface VideoAnalyzerPreset extends AudioAnalyzerPreset {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.VideoAnalyzerPreset";
    /** Defines the type of insights that you want the service to generate. The allowed values are 'AudioInsightsOnly', 'VideoInsightsOnly', and 'AllInsights'. The default is AllInsights. If you set this to AllInsights and the input is audio only, then only audio insights are generated. Similarly if the input is video only, then only video insights are generated. It is recommended that you not use AudioInsightsOnly if you expect some of your inputs to be video only; or use VideoInsightsOnly if you expect some of your inputs to be audio only. Your Jobs in such conditions would error out. */
    insightsToExtract?: InsightsType;
}

/** Describes the settings to be used when encoding the input video into a desired output bitrate layer. */
export declare interface VideoLayer extends Layer {
    /** The average bitrate in bits per second at which to encode the input video when generating this layer. This is a required field. */
    bitrate: number;
    /** The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate. */
    maxBitrate?: number;
    /** The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level. */
    bFrames?: number;
    /** The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video. */
    frameRate?: string;
    /** The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame. */
    slices?: number;
    /** Whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use. */
    adaptiveBFrame?: boolean;
}

/** Describes the properties of a video overlay. */
export declare interface VideoOverlay extends Overlay {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.VideoOverlay";
    /** The location in the input video where the overlay is applied. */
    position?: Rectangle;
    /** The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque. */
    opacity?: number;
    /** An optional rectangular window used to crop the overlay image or video. */
    cropRectangle?: Rectangle;
}

/**
 * Defines values for VideoSyncMode. \
 * {@link KnownVideoSyncMode} can be used interchangeably with VideoSyncMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Auto**: This is the default method. Chooses between Cfr and Vfr depending on muxer capabilities. For output format MP4, the default mode is Cfr. \
 * **Passthrough**: The presentation timestamps on frames are passed through from the input file to the output file writer. Recommended when the input source has variable frame rate, and are attempting to produce multiple layers for adaptive streaming in the output which have aligned GOP boundaries. Note: if two or more frames in the input have duplicate timestamps, then the output will also have the same behavior \
 * **Cfr**: Input frames will be repeated and\/or dropped as needed to achieve exactly the requested constant frame rate. Recommended when the output frame rate is explicitly set at a specified value \
 * **Vfr**: Similar to the Passthrough mode, but if the input has frames that have duplicate timestamps, then only one frame is passed through to the output, and others are dropped. Recommended when the number of output frames is expected to be equal to the number of input frames. For example, the output is used to calculate a quality metric like PSNR against the input
 */
export declare type VideoSyncMode = string;

/** Represents a video track in the asset. */
export declare interface VideoTrack extends TrackBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.VideoTrack";
}

/** A TrackSelection to select video tracks. */
export declare interface VideoTrackDescriptor extends TrackDescriptor {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    odataType: "#Microsoft.Media.VideoTrackDescriptor" | "#Microsoft.Media.SelectVideoTrackByAttribute" | "#Microsoft.Media.SelectVideoTrackById";
}

export declare type VideoTrackDescriptorUnion = VideoTrackDescriptor | SelectVideoTrackByAttribute | SelectVideoTrackById;

export declare type VideoUnion = Video | H265Video | ImageUnion | H264Video;

/**
 * Defines values for Visibility. \
 * {@link KnownVisibility} can be used interchangeably with Visibility,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hidden**: The track is hidden to video player. \
 * **Visible**: The track is visible to video player.
 */
export declare type Visibility = string;

export { }
