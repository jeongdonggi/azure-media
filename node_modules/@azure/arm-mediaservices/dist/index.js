'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var tslib = require('tslib');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link FilterTrackPropertyType} that the service accepts. */
exports.KnownFilterTrackPropertyType = void 0;
(function (KnownFilterTrackPropertyType) {
    /** The unknown track property type. */
    KnownFilterTrackPropertyType["Unknown"] = "Unknown";
    /** The type. */
    KnownFilterTrackPropertyType["Type"] = "Type";
    /** The name. */
    KnownFilterTrackPropertyType["Name"] = "Name";
    /** The language. */
    KnownFilterTrackPropertyType["Language"] = "Language";
    /** The fourCC. */
    KnownFilterTrackPropertyType["FourCC"] = "FourCC";
    /** The bitrate. */
    KnownFilterTrackPropertyType["Bitrate"] = "Bitrate";
})(exports.KnownFilterTrackPropertyType || (exports.KnownFilterTrackPropertyType = {}));
/** Known values of {@link FilterTrackPropertyCompareOperation} that the service accepts. */
exports.KnownFilterTrackPropertyCompareOperation = void 0;
(function (KnownFilterTrackPropertyCompareOperation) {
    /** The equal operation. */
    KnownFilterTrackPropertyCompareOperation["Equal"] = "Equal";
    /** The not equal operation. */
    KnownFilterTrackPropertyCompareOperation["NotEqual"] = "NotEqual";
})(exports.KnownFilterTrackPropertyCompareOperation || (exports.KnownFilterTrackPropertyCompareOperation = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link MetricUnit} that the service accepts. */
exports.KnownMetricUnit = void 0;
(function (KnownMetricUnit) {
    /** The number of bytes. */
    KnownMetricUnit["Bytes"] = "Bytes";
    /** The count. */
    KnownMetricUnit["Count"] = "Count";
    /** The number of milliseconds. */
    KnownMetricUnit["Milliseconds"] = "Milliseconds";
})(exports.KnownMetricUnit || (exports.KnownMetricUnit = {}));
/** Known values of {@link MetricAggregationType} that the service accepts. */
exports.KnownMetricAggregationType = void 0;
(function (KnownMetricAggregationType) {
    /** The average. */
    KnownMetricAggregationType["Average"] = "Average";
    /** The count of a number of items, usually requests. */
    KnownMetricAggregationType["Count"] = "Count";
    /** The sum. */
    KnownMetricAggregationType["Total"] = "Total";
})(exports.KnownMetricAggregationType || (exports.KnownMetricAggregationType = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** An internal action. */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link StorageAccountType} that the service accepts. */
exports.KnownStorageAccountType = void 0;
(function (KnownStorageAccountType) {
    /** The primary storage account for the Media Services account. */
    KnownStorageAccountType["Primary"] = "Primary";
    /** A secondary storage account for the Media Services account. */
    KnownStorageAccountType["Secondary"] = "Secondary";
})(exports.KnownStorageAccountType || (exports.KnownStorageAccountType = {}));
/** Known values of {@link StorageAuthentication} that the service accepts. */
exports.KnownStorageAuthentication = void 0;
(function (KnownStorageAuthentication) {
    /** System authentication. */
    KnownStorageAuthentication["System"] = "System";
    /** Managed Identity authentication. */
    KnownStorageAuthentication["ManagedIdentity"] = "ManagedIdentity";
})(exports.KnownStorageAuthentication || (exports.KnownStorageAuthentication = {}));
/** Known values of {@link AccountEncryptionKeyType} that the service accepts. */
exports.KnownAccountEncryptionKeyType = void 0;
(function (KnownAccountEncryptionKeyType) {
    /** The Account Key is encrypted with a System Key. */
    KnownAccountEncryptionKeyType["SystemKey"] = "SystemKey";
    /** The Account Key is encrypted with a Customer Key. */
    KnownAccountEncryptionKeyType["CustomerKey"] = "CustomerKey";
})(exports.KnownAccountEncryptionKeyType || (exports.KnownAccountEncryptionKeyType = {}));
/** Known values of {@link DefaultAction} that the service accepts. */
exports.KnownDefaultAction = void 0;
(function (KnownDefaultAction) {
    /** All public IP addresses are allowed. */
    KnownDefaultAction["Allow"] = "Allow";
    /** Public IP addresses are blocked. */
    KnownDefaultAction["Deny"] = "Deny";
})(exports.KnownDefaultAction || (exports.KnownDefaultAction = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Public network access is enabled. */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Public network access is disabled. */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Provisioning state failed. */
    KnownProvisioningState["Failed"] = "Failed";
    /** Provisioning state in progress. */
    KnownProvisioningState["InProgress"] = "InProgress";
    /** Provisioning state succeeded. */
    KnownProvisioningState["Succeeded"] = "Succeeded";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
exports.KnownPrivateEndpointServiceConnectionStatus = void 0;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(exports.KnownPrivateEndpointServiceConnectionStatus || (exports.KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
exports.KnownPrivateEndpointConnectionProvisioningState = void 0;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(exports.KnownPrivateEndpointConnectionProvisioningState || (exports.KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link AssetStorageEncryptionFormat} that the service accepts. */
exports.KnownAssetStorageEncryptionFormat = void 0;
(function (KnownAssetStorageEncryptionFormat) {
    /** The Asset does not use client-side storage encryption (this is the only allowed value for new Assets). */
    KnownAssetStorageEncryptionFormat["None"] = "None";
    /** The Asset is encrypted with Media Services client-side encryption. */
    KnownAssetStorageEncryptionFormat["MediaStorageClientEncryption"] = "MediaStorageClientEncryption";
})(exports.KnownAssetStorageEncryptionFormat || (exports.KnownAssetStorageEncryptionFormat = {}));
/** Known values of {@link AssetContainerPermission} that the service accepts. */
exports.KnownAssetContainerPermission = void 0;
(function (KnownAssetContainerPermission) {
    /** The SAS URL will allow read access to the container. */
    KnownAssetContainerPermission["Read"] = "Read";
    /** The SAS URL will allow read and write access to the container. */
    KnownAssetContainerPermission["ReadWrite"] = "ReadWrite";
    /** The SAS URL will allow read, write and delete access to the container. */
    KnownAssetContainerPermission["ReadWriteDelete"] = "ReadWriteDelete";
})(exports.KnownAssetContainerPermission || (exports.KnownAssetContainerPermission = {}));
/** Known values of {@link OnErrorType} that the service accepts. */
exports.KnownOnErrorType = void 0;
(function (KnownOnErrorType) {
    /** Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped. */
    KnownOnErrorType["StopProcessingJob"] = "StopProcessingJob";
    /** Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue. */
    KnownOnErrorType["ContinueJob"] = "ContinueJob";
})(exports.KnownOnErrorType || (exports.KnownOnErrorType = {}));
/** Known values of {@link Priority} that the service accepts. */
exports.KnownPriority = void 0;
(function (KnownPriority) {
    /** Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs. */
    KnownPriority["Low"] = "Low";
    /** Used for TransformOutputs that can be generated at Normal priority. */
    KnownPriority["Normal"] = "Normal";
    /** Used for TransformOutputs that should take precedence over others. */
    KnownPriority["High"] = "High";
})(exports.KnownPriority || (exports.KnownPriority = {}));
/** Known values of {@link JobState} that the service accepts. */
exports.KnownJobState = void 0;
(function (KnownJobState) {
    /** The job was canceled. This is a final state for the job. */
    KnownJobState["Canceled"] = "Canceled";
    /** The job is in the process of being canceled. This is a transient state for the job. */
    KnownJobState["Canceling"] = "Canceling";
    /** The job has encountered an error. This is a final state for the job. */
    KnownJobState["Error"] = "Error";
    /** The job is finished. This is a final state for the job. */
    KnownJobState["Finished"] = "Finished";
    /** The job is processing. This is a transient state for the job. */
    KnownJobState["Processing"] = "Processing";
    /** The job is in a queued state, waiting for resources to become available. This is a transient state. */
    KnownJobState["Queued"] = "Queued";
    /** The job is being scheduled to run on an available resource. This is a transient state, between queued and processing states. */
    KnownJobState["Scheduled"] = "Scheduled";
})(exports.KnownJobState || (exports.KnownJobState = {}));
/** Known values of {@link JobErrorCode} that the service accepts. */
exports.KnownJobErrorCode = void 0;
(function (KnownJobErrorCode) {
    /** Fatal service error, please contact support. */
    KnownJobErrorCode["ServiceError"] = "ServiceError";
    /** Transient error, please retry, if retry is unsuccessful, please contact support. */
    KnownJobErrorCode["ServiceTransientError"] = "ServiceTransientError";
    /** While trying to download the input files, the files were not accessible, please check the availability of the source. */
    KnownJobErrorCode["DownloadNotAccessible"] = "DownloadNotAccessible";
    /** While trying to download the input files, there was an issue during transfer (storage service, network errors), see details and check your source. */
    KnownJobErrorCode["DownloadTransientError"] = "DownloadTransientError";
    /** While trying to upload the output files, the destination was not reachable, please check the availability of the destination. */
    KnownJobErrorCode["UploadNotAccessible"] = "UploadNotAccessible";
    /** While trying to upload the output files, there was an issue during transfer (storage service, network errors), see details and check your destination. */
    KnownJobErrorCode["UploadTransientError"] = "UploadTransientError";
    /** There was a problem with the combination of input files and the configuration settings applied, fix the configuration settings and retry with the same input, or change input to match the configuration. */
    KnownJobErrorCode["ConfigurationUnsupported"] = "ConfigurationUnsupported";
    /** There was a problem with the input content (for example: zero byte files, or corrupt/non-decodable files), check the input files. */
    KnownJobErrorCode["ContentMalformed"] = "ContentMalformed";
    /** There was a problem with the format of the input (not valid media file, or an unsupported file/codec), check the validity of the input files. */
    KnownJobErrorCode["ContentUnsupported"] = "ContentUnsupported";
})(exports.KnownJobErrorCode || (exports.KnownJobErrorCode = {}));
/** Known values of {@link JobErrorCategory} that the service accepts. */
exports.KnownJobErrorCategory = void 0;
(function (KnownJobErrorCategory) {
    /** The error is service related. */
    KnownJobErrorCategory["Service"] = "Service";
    /** The error is download related. */
    KnownJobErrorCategory["Download"] = "Download";
    /** The error is upload related. */
    KnownJobErrorCategory["Upload"] = "Upload";
    /** The error is configuration related. */
    KnownJobErrorCategory["Configuration"] = "Configuration";
    /** The error is related to data in the input files. */
    KnownJobErrorCategory["Content"] = "Content";
})(exports.KnownJobErrorCategory || (exports.KnownJobErrorCategory = {}));
/** Known values of {@link JobRetry} that the service accepts. */
exports.KnownJobRetry = void 0;
(function (KnownJobRetry) {
    /** Issue needs to be investigated and then the job resubmitted with corrections or retried once the underlying issue has been corrected. */
    KnownJobRetry["DoNotRetry"] = "DoNotRetry";
    /** Issue may be resolved after waiting for a period of time and resubmitting the same Job. */
    KnownJobRetry["MayRetry"] = "MayRetry";
})(exports.KnownJobRetry || (exports.KnownJobRetry = {}));
/** Known values of {@link TrackPropertyType} that the service accepts. */
exports.KnownTrackPropertyType = void 0;
(function (KnownTrackPropertyType) {
    /** Unknown track property */
    KnownTrackPropertyType["Unknown"] = "Unknown";
    /** Track FourCC */
    KnownTrackPropertyType["FourCC"] = "FourCC";
})(exports.KnownTrackPropertyType || (exports.KnownTrackPropertyType = {}));
/** Known values of {@link TrackPropertyCompareOperation} that the service accepts. */
exports.KnownTrackPropertyCompareOperation = void 0;
(function (KnownTrackPropertyCompareOperation) {
    /** Unknown track property compare operation */
    KnownTrackPropertyCompareOperation["Unknown"] = "Unknown";
    /** Equal operation */
    KnownTrackPropertyCompareOperation["Equal"] = "Equal";
})(exports.KnownTrackPropertyCompareOperation || (exports.KnownTrackPropertyCompareOperation = {}));
/** Known values of {@link StreamingLocatorContentKeyType} that the service accepts. */
exports.KnownStreamingLocatorContentKeyType = void 0;
(function (KnownStreamingLocatorContentKeyType) {
    /** Common Encryption using CENC */
    KnownStreamingLocatorContentKeyType["CommonEncryptionCenc"] = "CommonEncryptionCenc";
    /** Common Encryption using CBCS */
    KnownStreamingLocatorContentKeyType["CommonEncryptionCbcs"] = "CommonEncryptionCbcs";
    /** Envelope Encryption */
    KnownStreamingLocatorContentKeyType["EnvelopeEncryption"] = "EnvelopeEncryption";
})(exports.KnownStreamingLocatorContentKeyType || (exports.KnownStreamingLocatorContentKeyType = {}));
/** Known values of {@link StreamingPolicyStreamingProtocol} that the service accepts. */
exports.KnownStreamingPolicyStreamingProtocol = void 0;
(function (KnownStreamingPolicyStreamingProtocol) {
    /** HLS protocol */
    KnownStreamingPolicyStreamingProtocol["Hls"] = "Hls";
    /** DASH protocol */
    KnownStreamingPolicyStreamingProtocol["Dash"] = "Dash";
    /** SmoothStreaming protocol */
    KnownStreamingPolicyStreamingProtocol["SmoothStreaming"] = "SmoothStreaming";
    /** Download protocol */
    KnownStreamingPolicyStreamingProtocol["Download"] = "Download";
})(exports.KnownStreamingPolicyStreamingProtocol || (exports.KnownStreamingPolicyStreamingProtocol = {}));
/** Known values of {@link EncryptionScheme} that the service accepts. */
exports.KnownEncryptionScheme = void 0;
(function (KnownEncryptionScheme) {
    /** NoEncryption scheme */
    KnownEncryptionScheme["NoEncryption"] = "NoEncryption";
    /** EnvelopeEncryption scheme */
    KnownEncryptionScheme["EnvelopeEncryption"] = "EnvelopeEncryption";
    /** CommonEncryptionCenc scheme */
    KnownEncryptionScheme["CommonEncryptionCenc"] = "CommonEncryptionCenc";
    /** CommonEncryptionCbcs scheme */
    KnownEncryptionScheme["CommonEncryptionCbcs"] = "CommonEncryptionCbcs";
})(exports.KnownEncryptionScheme || (exports.KnownEncryptionScheme = {}));
/** Known values of {@link LiveEventInputProtocol} that the service accepts. */
exports.KnownLiveEventInputProtocol = void 0;
(function (KnownLiveEventInputProtocol) {
    /** Smooth Streaming input will be sent by the contribution encoder to the live event. */
    KnownLiveEventInputProtocol["FragmentedMP4"] = "FragmentedMP4";
    /** RTMP input will be sent by the contribution encoder to the live event. */
    KnownLiveEventInputProtocol["Rtmp"] = "RTMP";
})(exports.KnownLiveEventInputProtocol || (exports.KnownLiveEventInputProtocol = {}));
/** Known values of {@link LiveEventEncodingType} that the service accepts. */
exports.KnownLiveEventEncodingType = void 0;
(function (KnownLiveEventEncodingType) {
    /** This is the same as PassthroughStandard, please see description below. This enumeration value is being deprecated. */
    KnownLiveEventEncodingType["None"] = "None";
    /** A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution. */
    KnownLiveEventEncodingType["Standard"] = "Standard";
    /** A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution. */
    KnownLiveEventEncodingType["Premium1080P"] = "Premium1080p";
    /** The ingested stream passes through the live event from the contribution encoder without any further processing. In the PassthroughBasic mode, ingestion is limited to up to 5Mbps and only 1 concurrent live output is allowed. Live transcription is not available. */
    KnownLiveEventEncodingType["PassthroughBasic"] = "PassthroughBasic";
    /** The ingested stream passes through the live event from the contribution encoder without any further processing. Live transcription is available. Ingestion bitrate limits are much higher and up to 3 concurrent live outputs are allowed. */
    KnownLiveEventEncodingType["PassthroughStandard"] = "PassthroughStandard";
})(exports.KnownLiveEventEncodingType || (exports.KnownLiveEventEncodingType = {}));
/** Known values of {@link StretchMode} that the service accepts. */
exports.KnownStretchMode = void 0;
(function (KnownStretchMode) {
    /** Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video. */
    KnownStretchMode["None"] = "None";
    /** Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9. */
    KnownStretchMode["AutoSize"] = "AutoSize";
    /** Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right. */
    KnownStretchMode["AutoFit"] = "AutoFit";
})(exports.KnownStretchMode || (exports.KnownStretchMode = {}));
/** Known values of {@link LiveEventResourceState} that the service accepts. */
exports.KnownLiveEventResourceState = void 0;
(function (KnownLiveEventResourceState) {
    /** This is the initial state of the live event after creation (unless autostart was set to true.) No billing occurs in this state. In this state, the live event properties can be updated but streaming is not allowed. */
    KnownLiveEventResourceState["Stopped"] = "Stopped";
    /** Allocate action was called on the live event and resources are being provisioned for this live event. Once allocation completes successfully, the live event will transition to StandBy state. */
    KnownLiveEventResourceState["Allocating"] = "Allocating";
    /** Live event resources have been provisioned and is ready to start. Billing occurs in this state. Most properties can still be updated, however ingest or streaming is not allowed during this state. */
    KnownLiveEventResourceState["StandBy"] = "StandBy";
    /** The live event is being started and resources are being allocated. No billing occurs in this state. Updates or streaming are not allowed during this state. If an error occurs, the live event returns to the Stopped state. */
    KnownLiveEventResourceState["Starting"] = "Starting";
    /** The live event resources have been allocated, ingest and preview URLs have been generated, and it is capable of receiving live streams. At this point, billing is active. You must explicitly call Stop on the live event resource to halt further billing. */
    KnownLiveEventResourceState["Running"] = "Running";
    /** The live event is being stopped and resources are being de-provisioned. No billing occurs in this transient state. Updates or streaming are not allowed during this state. */
    KnownLiveEventResourceState["Stopping"] = "Stopping";
    /** The live event is being deleted. No billing occurs in this transient state. Updates or streaming are not allowed during this state. */
    KnownLiveEventResourceState["Deleting"] = "Deleting";
})(exports.KnownLiveEventResourceState || (exports.KnownLiveEventResourceState = {}));
/** Known values of {@link StreamOptionsFlag} that the service accepts. */
exports.KnownStreamOptionsFlag = void 0;
(function (KnownStreamOptionsFlag) {
    /** Live streaming with no special latency optimizations. */
    KnownStreamOptionsFlag["Default"] = "Default";
    /** The live event provides lower end to end latency by reducing its internal buffers. */
    KnownStreamOptionsFlag["LowLatency"] = "LowLatency";
    /** The live event is optimized for end to end latency. This option is only available for encoding live events with RTMP input. The outputs can be streamed using HLS or DASH formats. The outputs' archive or DVR rewind length is limited to 6 hours. Use "LowLatency" stream option for all other scenarios. */
    KnownStreamOptionsFlag["LowLatencyV2"] = "LowLatencyV2";
})(exports.KnownStreamOptionsFlag || (exports.KnownStreamOptionsFlag = {}));
/** Known values of {@link AsyncOperationStatus} that the service accepts. */
exports.KnownAsyncOperationStatus = void 0;
(function (KnownAsyncOperationStatus) {
    /** Succeeded */
    KnownAsyncOperationStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownAsyncOperationStatus["Failed"] = "Failed";
    /** InProgress */
    KnownAsyncOperationStatus["InProgress"] = "InProgress";
})(exports.KnownAsyncOperationStatus || (exports.KnownAsyncOperationStatus = {}));
/** Known values of {@link LiveOutputResourceState} that the service accepts. */
exports.KnownLiveOutputResourceState = void 0;
(function (KnownLiveOutputResourceState) {
    /** Live output is being created. No content is archived in the asset until the live output is in running state. */
    KnownLiveOutputResourceState["Creating"] = "Creating";
    /** Live output is running and archiving live streaming content to the asset if there is valid input from a contribution encoder. */
    KnownLiveOutputResourceState["Running"] = "Running";
    /** Live output is being deleted. The live asset is being converted from live to on-demand asset. Any streaming URLs created on the live output asset continue to work. */
    KnownLiveOutputResourceState["Deleting"] = "Deleting";
})(exports.KnownLiveOutputResourceState || (exports.KnownLiveOutputResourceState = {}));
/** Known values of {@link StreamingEndpointResourceState} that the service accepts. */
exports.KnownStreamingEndpointResourceState = void 0;
(function (KnownStreamingEndpointResourceState) {
    /** The initial state of a streaming endpoint after creation. Content is not ready to be streamed from this endpoint. */
    KnownStreamingEndpointResourceState["Stopped"] = "Stopped";
    /** The streaming endpoint is transitioning to the running state. */
    KnownStreamingEndpointResourceState["Starting"] = "Starting";
    /** The streaming endpoint is running. It is able to stream content to clients */
    KnownStreamingEndpointResourceState["Running"] = "Running";
    /** The streaming endpoint is transitioning to the stopped state. */
    KnownStreamingEndpointResourceState["Stopping"] = "Stopping";
    /** The streaming endpoint is being deleted. */
    KnownStreamingEndpointResourceState["Deleting"] = "Deleting";
    /** The streaming endpoint is increasing or decreasing scale units. */
    KnownStreamingEndpointResourceState["Scaling"] = "Scaling";
})(exports.KnownStreamingEndpointResourceState || (exports.KnownStreamingEndpointResourceState = {}));
/** Known values of {@link Visibility} that the service accepts. */
exports.KnownVisibility = void 0;
(function (KnownVisibility) {
    /** The track is hidden to video player. */
    KnownVisibility["Hidden"] = "Hidden";
    /** The track is visible to video player. */
    KnownVisibility["Visible"] = "Visible";
})(exports.KnownVisibility || (exports.KnownVisibility = {}));
/** Known values of {@link ContentKeyPolicyPlayReadyUnknownOutputPassingOption} that the service accepts. */
exports.KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption = void 0;
(function (KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption) {
    /** Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version. */
    KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption["Unknown"] = "Unknown";
    /** Passing the video portion of protected content to an Unknown Output is not allowed. */
    KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption["NotAllowed"] = "NotAllowed";
    /** Passing the video portion of protected content to an Unknown Output is allowed. */
    KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption["Allowed"] = "Allowed";
    /** Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution. */
    KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption["AllowedWithVideoConstriction"] = "AllowedWithVideoConstriction";
})(exports.KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption || (exports.KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption = {}));
/** Known values of {@link SecurityLevel} that the service accepts. */
exports.KnownSecurityLevel = void 0;
(function (KnownSecurityLevel) {
    /** Represents a SecurityLevel that is unavailable in current API version. */
    KnownSecurityLevel["Unknown"] = "Unknown";
    /** For clients under development or test. No protection against unauthorized use. */
    KnownSecurityLevel["SL150"] = "SL150";
    /** For hardened devices and applications consuming commercial content. Software or hardware protection. */
    KnownSecurityLevel["SL2000"] = "SL2000";
    /** For hardened devices only. Hardware protection. */
    KnownSecurityLevel["SL3000"] = "SL3000";
})(exports.KnownSecurityLevel || (exports.KnownSecurityLevel = {}));
/** Known values of {@link ContentKeyPolicyPlayReadyLicenseType} that the service accepts. */
exports.KnownContentKeyPolicyPlayReadyLicenseType = void 0;
(function (KnownContentKeyPolicyPlayReadyLicenseType) {
    /** Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version. */
    KnownContentKeyPolicyPlayReadyLicenseType["Unknown"] = "Unknown";
    /** Non persistent license. */
    KnownContentKeyPolicyPlayReadyLicenseType["NonPersistent"] = "NonPersistent";
    /** Persistent license. Allows offline playback. */
    KnownContentKeyPolicyPlayReadyLicenseType["Persistent"] = "Persistent";
})(exports.KnownContentKeyPolicyPlayReadyLicenseType || (exports.KnownContentKeyPolicyPlayReadyLicenseType = {}));
/** Known values of {@link ContentKeyPolicyPlayReadyContentType} that the service accepts. */
exports.KnownContentKeyPolicyPlayReadyContentType = void 0;
(function (KnownContentKeyPolicyPlayReadyContentType) {
    /** Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version. */
    KnownContentKeyPolicyPlayReadyContentType["Unknown"] = "Unknown";
    /** Unspecified content type. */
    KnownContentKeyPolicyPlayReadyContentType["Unspecified"] = "Unspecified";
    /** Ultraviolet download content type. */
    KnownContentKeyPolicyPlayReadyContentType["UltraVioletDownload"] = "UltraVioletDownload";
    /** Ultraviolet streaming content type. */
    KnownContentKeyPolicyPlayReadyContentType["UltraVioletStreaming"] = "UltraVioletStreaming";
})(exports.KnownContentKeyPolicyPlayReadyContentType || (exports.KnownContentKeyPolicyPlayReadyContentType = {}));
/** Known values of {@link ContentKeyPolicyRestrictionTokenType} that the service accepts. */
exports.KnownContentKeyPolicyRestrictionTokenType = void 0;
(function (KnownContentKeyPolicyRestrictionTokenType) {
    /** Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version. */
    KnownContentKeyPolicyRestrictionTokenType["Unknown"] = "Unknown";
    /** Simple Web Token. */
    KnownContentKeyPolicyRestrictionTokenType["Swt"] = "Swt";
    /** JSON Web Token. */
    KnownContentKeyPolicyRestrictionTokenType["Jwt"] = "Jwt";
})(exports.KnownContentKeyPolicyRestrictionTokenType || (exports.KnownContentKeyPolicyRestrictionTokenType = {}));
/** Known values of {@link ContentKeyPolicyFairPlayRentalAndLeaseKeyType} that the service accepts. */
exports.KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType = void 0;
(function (KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType) {
    /** Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version. */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["Unknown"] = "Unknown";
    /** Key duration is not specified. */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["Undefined"] = "Undefined";
    /** Dual expiry for offline rental. */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["DualExpiry"] = "DualExpiry";
    /** Content key can be persisted with an unlimited duration */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["PersistentUnlimited"] = "PersistentUnlimited";
    /** Content key can be persisted and the valid duration is limited by the Rental Duration value */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["PersistentLimited"] = "PersistentLimited";
})(exports.KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType || (exports.KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType = {}));
/** Known values of {@link AacAudioProfile} that the service accepts. */
exports.KnownAacAudioProfile = void 0;
(function (KnownAacAudioProfile) {
    /** Specifies that the output audio is to be encoded into AAC Low Complexity profile (AAC-LC). */
    KnownAacAudioProfile["AacLc"] = "AacLc";
    /** Specifies that the output audio is to be encoded into HE-AAC v1 profile. */
    KnownAacAudioProfile["HeAacV1"] = "HeAacV1";
    /** Specifies that the output audio is to be encoded into HE-AAC v2 profile. */
    KnownAacAudioProfile["HeAacV2"] = "HeAacV2";
})(exports.KnownAacAudioProfile || (exports.KnownAacAudioProfile = {}));
/** Known values of {@link H265VideoProfile} that the service accepts. */
exports.KnownH265VideoProfile = void 0;
(function (KnownH265VideoProfile) {
    /** Tells the encoder to automatically determine the appropriate H.265 profile. */
    KnownH265VideoProfile["Auto"] = "Auto";
    /** Main profile (https://x265.readthedocs.io/en/default/cli.html?highlight=profile#profile-level-tier) */
    KnownH265VideoProfile["Main"] = "Main";
    /** Main 10 profile (https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding#Main_10) */
    KnownH265VideoProfile["Main10"] = "Main10";
})(exports.KnownH265VideoProfile || (exports.KnownH265VideoProfile = {}));
/** Known values of {@link VideoSyncMode} that the service accepts. */
exports.KnownVideoSyncMode = void 0;
(function (KnownVideoSyncMode) {
    /** This is the default method. Chooses between Cfr and Vfr depending on muxer capabilities. For output format MP4, the default mode is Cfr. */
    KnownVideoSyncMode["Auto"] = "Auto";
    /** The presentation timestamps on frames are passed through from the input file to the output file writer. Recommended when the input source has variable frame rate, and are attempting to produce multiple layers for adaptive streaming in the output which have aligned GOP boundaries. Note: if two or more frames in the input have duplicate timestamps, then the output will also have the same behavior */
    KnownVideoSyncMode["Passthrough"] = "Passthrough";
    /** Input frames will be repeated and/or dropped as needed to achieve exactly the requested constant frame rate. Recommended when the output frame rate is explicitly set at a specified value */
    KnownVideoSyncMode["Cfr"] = "Cfr";
    /** Similar to the Passthrough mode, but if the input has frames that have duplicate timestamps, then only one frame is passed through to the output, and others are dropped. Recommended when the number of output frames is expected to be equal to the number of input frames. For example, the output is used to calculate a quality metric like PSNR against the input */
    KnownVideoSyncMode["Vfr"] = "Vfr";
})(exports.KnownVideoSyncMode || (exports.KnownVideoSyncMode = {}));
/** Known values of {@link H265Complexity} that the service accepts. */
exports.KnownH265Complexity = void 0;
(function (KnownH265Complexity) {
    /** Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    KnownH265Complexity["Speed"] = "Speed";
    /** Tells the encoder to use settings that achieve a balance between speed and quality. */
    KnownH265Complexity["Balanced"] = "Balanced";
    /** Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time. */
    KnownH265Complexity["Quality"] = "Quality";
})(exports.KnownH265Complexity || (exports.KnownH265Complexity = {}));
/** Known values of {@link ChannelMapping} that the service accepts. */
exports.KnownChannelMapping = void 0;
(function (KnownChannelMapping) {
    /** The Front Left Channel. */
    KnownChannelMapping["FrontLeft"] = "FrontLeft";
    /** The Front Right Channel. */
    KnownChannelMapping["FrontRight"] = "FrontRight";
    /** The Center Channel. */
    KnownChannelMapping["Center"] = "Center";
    /** Low Frequency Effects Channel.  Sometimes referred to as the Subwoofer. */
    KnownChannelMapping["LowFrequencyEffects"] = "LowFrequencyEffects";
    /** The Back Left Channel.  Sometimes referred to as the Left Surround Channel. */
    KnownChannelMapping["BackLeft"] = "BackLeft";
    /** The Back Right Channel.  Sometimes referred to as the Right Surround Channel. */
    KnownChannelMapping["BackRight"] = "BackRight";
    /** The Left Stereo channel.  Sometimes referred to as Down Mix Left. */
    KnownChannelMapping["StereoLeft"] = "StereoLeft";
    /** The Right Stereo channel.  Sometimes referred to as Down Mix Right. */
    KnownChannelMapping["StereoRight"] = "StereoRight";
})(exports.KnownChannelMapping || (exports.KnownChannelMapping = {}));
/** Known values of {@link TrackAttribute} that the service accepts. */
exports.KnownTrackAttribute = void 0;
(function (KnownTrackAttribute) {
    /** The bitrate of the track. */
    KnownTrackAttribute["Bitrate"] = "Bitrate";
    /** The language of the track. */
    KnownTrackAttribute["Language"] = "Language";
})(exports.KnownTrackAttribute || (exports.KnownTrackAttribute = {}));
/** Known values of {@link AttributeFilter} that the service accepts. */
exports.KnownAttributeFilter = void 0;
(function (KnownAttributeFilter) {
    /** All tracks will be included. */
    KnownAttributeFilter["All"] = "All";
    /** The first track will be included when the attribute is sorted in descending order.  Generally used to select the largest bitrate. */
    KnownAttributeFilter["Top"] = "Top";
    /** The first track will be included when the attribute is sorted in ascending order.  Generally used to select the smallest bitrate. */
    KnownAttributeFilter["Bottom"] = "Bottom";
    /** Any tracks that have an attribute equal to the value given will be included. */
    KnownAttributeFilter["ValueEquals"] = "ValueEquals";
})(exports.KnownAttributeFilter || (exports.KnownAttributeFilter = {}));
/** Known values of {@link AnalysisResolution} that the service accepts. */
exports.KnownAnalysisResolution = void 0;
(function (KnownAnalysisResolution) {
    /** SourceResolution */
    KnownAnalysisResolution["SourceResolution"] = "SourceResolution";
    /** StandardDefinition */
    KnownAnalysisResolution["StandardDefinition"] = "StandardDefinition";
})(exports.KnownAnalysisResolution || (exports.KnownAnalysisResolution = {}));
/** Known values of {@link FaceRedactorMode} that the service accepts. */
exports.KnownFaceRedactorMode = void 0;
(function (KnownFaceRedactorMode) {
    /** Analyze mode detects faces and outputs a metadata file with the results. Allows editing of the metadata file before faces are blurred with Redact mode. */
    KnownFaceRedactorMode["Analyze"] = "Analyze";
    /** Redact mode consumes the metadata file from Analyze mode and redacts the faces found. */
    KnownFaceRedactorMode["Redact"] = "Redact";
    /** Combined mode does the Analyze and Redact steps in one pass when editing the analyzed faces is not desired. */
    KnownFaceRedactorMode["Combined"] = "Combined";
})(exports.KnownFaceRedactorMode || (exports.KnownFaceRedactorMode = {}));
/** Known values of {@link BlurType} that the service accepts. */
exports.KnownBlurType = void 0;
(function (KnownBlurType) {
    /** Box: debug filter, bounding box only */
    KnownBlurType["Box"] = "Box";
    /** Low: box-car blur filter */
    KnownBlurType["Low"] = "Low";
    /** Med: Gaussian blur filter */
    KnownBlurType["Med"] = "Med";
    /** High: Confuse blur filter */
    KnownBlurType["High"] = "High";
    /** Black: Black out filter */
    KnownBlurType["Black"] = "Black";
})(exports.KnownBlurType || (exports.KnownBlurType = {}));
/** Known values of {@link AudioAnalysisMode} that the service accepts. */
exports.KnownAudioAnalysisMode = void 0;
(function (KnownAudioAnalysisMode) {
    /** Performs all operations included in the Basic mode, additionally performing language detection and speaker diarization. */
    KnownAudioAnalysisMode["Standard"] = "Standard";
    /** This mode performs speech-to-text transcription and generation of a VTT subtitle/caption file. The output of this mode includes an Insights JSON file including only the keywords, transcription,and timing information. Automatic language detection and speaker diarization are not included in this mode. */
    KnownAudioAnalysisMode["Basic"] = "Basic";
})(exports.KnownAudioAnalysisMode || (exports.KnownAudioAnalysisMode = {}));
/** Known values of {@link DeinterlaceParity} that the service accepts. */
exports.KnownDeinterlaceParity = void 0;
(function (KnownDeinterlaceParity) {
    /** Automatically detect the order of fields */
    KnownDeinterlaceParity["Auto"] = "Auto";
    /** Apply top field first processing of input video. */
    KnownDeinterlaceParity["TopFieldFirst"] = "TopFieldFirst";
    /** Apply bottom field first processing of input video. */
    KnownDeinterlaceParity["BottomFieldFirst"] = "BottomFieldFirst";
})(exports.KnownDeinterlaceParity || (exports.KnownDeinterlaceParity = {}));
/** Known values of {@link DeinterlaceMode} that the service accepts. */
exports.KnownDeinterlaceMode = void 0;
(function (KnownDeinterlaceMode) {
    /** Disables de-interlacing of the source video. */
    KnownDeinterlaceMode["Off"] = "Off";
    /** Apply automatic pixel adaptive de-interlacing on each frame in the input video. */
    KnownDeinterlaceMode["AutoPixelAdaptive"] = "AutoPixelAdaptive";
})(exports.KnownDeinterlaceMode || (exports.KnownDeinterlaceMode = {}));
/** Known values of {@link Rotation} that the service accepts. */
exports.KnownRotation = void 0;
(function (KnownRotation) {
    /** Automatically detect and rotate as needed. */
    KnownRotation["Auto"] = "Auto";
    /** Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact. */
    KnownRotation["None"] = "None";
    /** Do not rotate the video but remove any metadata about the rotation. */
    KnownRotation["Rotate0"] = "Rotate0";
    /** Rotate 90 degrees clockwise. */
    KnownRotation["Rotate90"] = "Rotate90";
    /** Rotate 180 degrees clockwise. */
    KnownRotation["Rotate180"] = "Rotate180";
    /** Rotate 270 degrees clockwise. */
    KnownRotation["Rotate270"] = "Rotate270";
})(exports.KnownRotation || (exports.KnownRotation = {}));
/** Known values of {@link H264VideoProfile} that the service accepts. */
exports.KnownH264VideoProfile = void 0;
(function (KnownH264VideoProfile) {
    /** Tells the encoder to automatically determine the appropriate H.264 profile. */
    KnownH264VideoProfile["Auto"] = "Auto";
    /** Baseline profile */
    KnownH264VideoProfile["Baseline"] = "Baseline";
    /** Main profile */
    KnownH264VideoProfile["Main"] = "Main";
    /** High profile. */
    KnownH264VideoProfile["High"] = "High";
    /** High 4:2:2 profile. */
    KnownH264VideoProfile["High422"] = "High422";
    /** High 4:4:4 predictive profile. */
    KnownH264VideoProfile["High444"] = "High444";
})(exports.KnownH264VideoProfile || (exports.KnownH264VideoProfile = {}));
/** Known values of {@link EntropyMode} that the service accepts. */
exports.KnownEntropyMode = void 0;
(function (KnownEntropyMode) {
    /** Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding. */
    KnownEntropyMode["Cabac"] = "Cabac";
    /** Context Adaptive Variable Length Coder (CAVLC) entropy encoding. */
    KnownEntropyMode["Cavlc"] = "Cavlc";
})(exports.KnownEntropyMode || (exports.KnownEntropyMode = {}));
/** Known values of {@link H264Complexity} that the service accepts. */
exports.KnownH264Complexity = void 0;
(function (KnownH264Complexity) {
    /** Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    KnownH264Complexity["Speed"] = "Speed";
    /** Tells the encoder to use settings that achieve a balance between speed and quality. */
    KnownH264Complexity["Balanced"] = "Balanced";
    /** Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time. */
    KnownH264Complexity["Quality"] = "Quality";
})(exports.KnownH264Complexity || (exports.KnownH264Complexity = {}));
/** Known values of {@link H264RateControlMode} that the service accepts. */
exports.KnownH264RateControlMode = void 0;
(function (KnownH264RateControlMode) {
    /** Average Bitrate (ABR) mode that hits the target bitrate: Default mode. */
    KnownH264RateControlMode["ABR"] = "ABR";
    /** Constant Bitrate (CBR) mode that tightens bitrate variations around target bitrate. */
    KnownH264RateControlMode["CBR"] = "CBR";
    /** Constant Rate Factor (CRF) mode that targets at constant subjective quality. */
    KnownH264RateControlMode["CRF"] = "CRF";
})(exports.KnownH264RateControlMode || (exports.KnownH264RateControlMode = {}));
/** Known values of {@link Complexity} that the service accepts. */
exports.KnownComplexity = void 0;
(function (KnownComplexity) {
    /** Configures the encoder to use settings optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    KnownComplexity["Speed"] = "Speed";
    /** Configures the encoder to use settings that achieve a balance between speed and quality. */
    KnownComplexity["Balanced"] = "Balanced";
    /** Configures the encoder to use settings optimized to produce higher quality output at the expense of slower overall encode time. */
    KnownComplexity["Quality"] = "Quality";
})(exports.KnownComplexity || (exports.KnownComplexity = {}));
/** Known values of {@link InterleaveOutput} that the service accepts. */
exports.KnownInterleaveOutput = void 0;
(function (KnownInterleaveOutput) {
    /** The output is video-only or audio-only. */
    KnownInterleaveOutput["NonInterleavedOutput"] = "NonInterleavedOutput";
    /** The output includes both audio and video. */
    KnownInterleaveOutput["InterleavedOutput"] = "InterleavedOutput";
})(exports.KnownInterleaveOutput || (exports.KnownInterleaveOutput = {}));
/** Known values of {@link EncoderNamedPreset} that the service accepts. */
exports.KnownEncoderNamedPreset = void 0;
(function (KnownEncoderNamedPreset) {
    /** Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H264SingleBitrateSD"] = "H264SingleBitrateSD";
    /** Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H264SingleBitrate720P"] = "H264SingleBitrate720p";
    /** Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H264SingleBitrate1080P"] = "H264SingleBitrate1080p";
    /** Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best. */
    KnownEncoderNamedPreset["AdaptiveStreaming"] = "AdaptiveStreaming";
    /** Produces a single MP4 file containing only stereo audio encoded at 192 kbps. */
    KnownEncoderNamedPreset["AACGoodQualityAudio"] = "AACGoodQualityAudio";
    /** Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved. */
    KnownEncoderNamedPreset["ContentAwareEncodingExperimental"] = "ContentAwareEncodingExperimental";
    /** Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved. */
    KnownEncoderNamedPreset["ContentAwareEncoding"] = "ContentAwareEncoding";
    /** Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed. */
    KnownEncoderNamedPreset["CopyAllBitrateNonInterleaved"] = "CopyAllBitrateNonInterleaved";
    /** Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 180p. */
    KnownEncoderNamedPreset["H264MultipleBitrate1080P"] = "H264MultipleBitrate1080p";
    /** Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 180p. */
    KnownEncoderNamedPreset["H264MultipleBitrate720P"] = "H264MultipleBitrate720p";
    /** Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 240p. */
    KnownEncoderNamedPreset["H264MultipleBitrateSD"] = "H264MultipleBitrateSD";
    /** Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved. */
    KnownEncoderNamedPreset["H265ContentAwareEncoding"] = "H265ContentAwareEncoding";
    /** Produces a set of GOP aligned MP4 files with H.265 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best. */
    KnownEncoderNamedPreset["H265AdaptiveStreaming"] = "H265AdaptiveStreaming";
    /** Produces an MP4 file where the video is encoded with H.265 codec at 1800 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H265SingleBitrate720P"] = "H265SingleBitrate720p";
    /** Produces an MP4 file where the video is encoded with H.265 codec at 3500 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H265SingleBitrate1080P"] = "H265SingleBitrate1080p";
    /** Produces an MP4 file where the video is encoded with H.265 codec at 9500 kbps and a picture height of 2160 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H265SingleBitrate4K"] = "H265SingleBitrate4K";
})(exports.KnownEncoderNamedPreset || (exports.KnownEncoderNamedPreset = {}));
/** Known values of {@link InsightsType} that the service accepts. */
exports.KnownInsightsType = void 0;
(function (KnownInsightsType) {
    /** Generate audio only insights. Ignore video even if present. Fails if no audio is present. */
    KnownInsightsType["AudioInsightsOnly"] = "AudioInsightsOnly";
    /** Generate video only insights. Ignore audio if present. Fails if no video is present. */
    KnownInsightsType["VideoInsightsOnly"] = "VideoInsightsOnly";
    /** Generate both audio and video insights. Fails if either audio or video Insights fail. */
    KnownInsightsType["AllInsights"] = "AllInsights";
})(exports.KnownInsightsType || (exports.KnownInsightsType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AccountFilterCollection = {
    type: {
        name: "Composite",
        className: "AccountFilterCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AccountFilter"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PresentationTimeRange = {
    type: {
        name: "Composite",
        className: "PresentationTimeRange",
        modelProperties: {
            startTimestamp: {
                serializedName: "startTimestamp",
                type: {
                    name: "Number"
                }
            },
            endTimestamp: {
                serializedName: "endTimestamp",
                type: {
                    name: "Number"
                }
            },
            presentationWindowDuration: {
                serializedName: "presentationWindowDuration",
                type: {
                    name: "Number"
                }
            },
            liveBackoffDuration: {
                serializedName: "liveBackoffDuration",
                type: {
                    name: "Number"
                }
            },
            timescale: {
                serializedName: "timescale",
                type: {
                    name: "Number"
                }
            },
            forceEndTimestamp: {
                serializedName: "forceEndTimestamp",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const FirstQuality = {
    type: {
        name: "Composite",
        className: "FirstQuality",
        modelProperties: {
            bitrate: {
                serializedName: "bitrate",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const FilterTrackSelection = {
    type: {
        name: "Composite",
        className: "FilterTrackSelection",
        modelProperties: {
            trackSelections: {
                serializedName: "trackSelections",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterTrackPropertyCondition"
                        }
                    }
                }
            }
        }
    }
};
const FilterTrackPropertyCondition = {
    type: {
        name: "Composite",
        className: "FilterTrackPropertyCondition",
        modelProperties: {
            property: {
                serializedName: "property",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const OperationCollection = {
    type: {
        name: "Composite",
        className: "OperationCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Properties"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            actionType: {
                serializedName: "actionType",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Properties = {
    type: {
        name: "Composite",
        className: "Properties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ServiceSpecification"
                }
            }
        }
    }
};
const ServiceSpecification = {
    type: {
        name: "Composite",
        className: "ServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
const LogSpecification = {
    type: {
        name: "Composite",
        className: "LogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricSpecification = {
    type: {
        name: "Composite",
        className: "MetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lockAggregationType: {
                serializedName: "lockAggregationType",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            supportedAggregationTypes: {
                serializedName: "supportedAggregationTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            dimensions: {
                serializedName: "dimensions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricDimension"
                        }
                    }
                }
            },
            enableRegionalMdmAccount: {
                serializedName: "enableRegionalMdmAccount",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            sourceMdmAccount: {
                serializedName: "sourceMdmAccount",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sourceMdmNamespace: {
                serializedName: "sourceMdmNamespace",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedTimeGrainTypes: {
                serializedName: "supportedTimeGrainTypes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const MetricDimension = {
    type: {
        name: "Composite",
        className: "MetricDimension",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            toBeExportedForShoebox: {
                serializedName: "toBeExportedForShoebox",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const MediaServiceCollection = {
    type: {
        name: "Composite",
        className: "MediaServiceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MediaService"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageAccount = {
    type: {
        name: "Composite",
        className: "StorageAccount",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceIdentity = {
    type: {
        name: "Composite",
        className: "ResourceIdentity",
        modelProperties: {
            userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            },
            useSystemAssignedIdentity: {
                serializedName: "useSystemAssignedIdentity",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const AccountEncryption = {
    type: {
        name: "Composite",
        className: "AccountEncryption",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            keyVaultProperties: {
                serializedName: "keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyIdentifier: {
                serializedName: "keyIdentifier",
                type: {
                    name: "String"
                }
            },
            currentKeyIdentifier: {
                serializedName: "currentKeyIdentifier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyDelivery = {
    type: {
        name: "Composite",
        className: "KeyDelivery",
        modelProperties: {
            accessControl: {
                serializedName: "accessControl",
                type: {
                    name: "Composite",
                    className: "AccessControl"
                }
            }
        }
    }
};
const AccessControl = {
    type: {
        name: "Composite",
        className: "AccessControl",
        modelProperties: {
            defaultAction: {
                serializedName: "defaultAction",
                type: {
                    name: "String"
                }
            },
            ipAllowList: {
                serializedName: "ipAllowList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaServiceIdentity = {
    type: {
        name: "Composite",
        className: "MediaServiceIdentity",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "UserAssignedManagedIdentity"
                        }
                    }
                }
            }
        }
    }
};
const UserAssignedManagedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedManagedIdentity",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
const MediaServiceUpdate = {
    type: {
        name: "Composite",
        className: "MediaServiceUpdate",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "MediaServiceIdentity"
                }
            },
            mediaServiceId: {
                serializedName: "properties.mediaServiceId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            storageAccounts: {
                serializedName: "properties.storageAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageAccount"
                        }
                    }
                }
            },
            storageAuthentication: {
                serializedName: "properties.storageAuthentication",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "AccountEncryption"
                }
            },
            keyDelivery: {
                serializedName: "properties.keyDelivery",
                type: {
                    name: "Composite",
                    className: "KeyDelivery"
                }
            },
            publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
const SyncStorageKeysInput = {
    type: {
        name: "Composite",
        className: "SyncStorageKeysInput",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ListEdgePoliciesInput = {
    type: {
        name: "Composite",
        className: "ListEdgePoliciesInput",
        modelProperties: {
            deviceId: {
                serializedName: "deviceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EdgePolicies = {
    type: {
        name: "Composite",
        className: "EdgePolicies",
        modelProperties: {
            usageDataCollectionPolicy: {
                serializedName: "usageDataCollectionPolicy",
                type: {
                    name: "Composite",
                    className: "EdgeUsageDataCollectionPolicy"
                }
            }
        }
    }
};
const EdgeUsageDataCollectionPolicy = {
    type: {
        name: "Composite",
        className: "EdgeUsageDataCollectionPolicy",
        modelProperties: {
            dataCollectionFrequency: {
                serializedName: "dataCollectionFrequency",
                type: {
                    name: "String"
                }
            },
            dataReportingFrequency: {
                serializedName: "dataReportingFrequency",
                type: {
                    name: "String"
                }
            },
            maxAllowedUnreportedUsageDuration: {
                serializedName: "maxAllowedUnreportedUsageDuration",
                type: {
                    name: "String"
                }
            },
            eventHubDetails: {
                serializedName: "eventHubDetails",
                type: {
                    name: "Composite",
                    className: "EdgeUsageDataEventHub"
                }
            }
        }
    }
};
const EdgeUsageDataEventHub = {
    type: {
        name: "Composite",
        className: "EdgeUsageDataEventHub",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            namespace: {
                serializedName: "namespace",
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
const CheckNameAvailabilityInput = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityInput",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EntityNameAvailabilityCheckOutput = {
    type: {
        name: "Composite",
        className: "EntityNameAvailabilityCheckOutput",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaServiceOperationStatus = {
    type: {
        name: "Composite",
        className: "MediaServiceOperationStatus",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const AssetCollection = {
    type: {
        name: "Composite",
        className: "AssetCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Asset"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ListContainerSasInput = {
    type: {
        name: "Composite",
        className: "ListContainerSasInput",
        modelProperties: {
            permissions: {
                serializedName: "permissions",
                type: {
                    name: "String"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const AssetContainerSas = {
    type: {
        name: "Composite",
        className: "AssetContainerSas",
        modelProperties: {
            assetContainerSasUrls: {
                serializedName: "assetContainerSasUrls",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const StorageEncryptedAssetDecryptionData = {
    type: {
        name: "Composite",
        className: "StorageEncryptedAssetDecryptionData",
        modelProperties: {
            key: {
                serializedName: "key",
                type: {
                    name: "ByteArray"
                }
            },
            assetFileEncryptionMetadata: {
                serializedName: "assetFileEncryptionMetadata",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssetFileEncryptionMetadata"
                        }
                    }
                }
            }
        }
    }
};
const AssetFileEncryptionMetadata = {
    type: {
        name: "Composite",
        className: "AssetFileEncryptionMetadata",
        modelProperties: {
            initializationVector: {
                serializedName: "initializationVector",
                type: {
                    name: "String"
                }
            },
            assetFileName: {
                serializedName: "assetFileName",
                type: {
                    name: "String"
                }
            },
            assetFileId: {
                serializedName: "assetFileId",
                required: true,
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
const ListStreamingLocatorsResponse = {
    type: {
        name: "Composite",
        className: "ListStreamingLocatorsResponse",
        modelProperties: {
            streamingLocators: {
                serializedName: "streamingLocators",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssetStreamingLocator"
                        }
                    }
                }
            }
        }
    }
};
const AssetStreamingLocator = {
    type: {
        name: "Composite",
        className: "AssetStreamingLocator",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            assetName: {
                serializedName: "assetName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            streamingLocatorId: {
                serializedName: "streamingLocatorId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            streamingPolicyName: {
                serializedName: "streamingPolicyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            defaultContentKeyPolicyName: {
                serializedName: "defaultContentKeyPolicyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssetFilterCollection = {
    type: {
        name: "Composite",
        className: "AssetFilterCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssetFilter"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssetTrackCollection = {
    type: {
        name: "Composite",
        className: "AssetTrackCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssetTrack"
                        }
                    }
                }
            }
        }
    }
};
const TrackBase = {
    type: {
        name: "Composite",
        className: "TrackBase",
        uberParent: "TrackBase",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssetTrackOperationStatus = {
    type: {
        name: "Composite",
        className: "AssetTrackOperationStatus",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ContentKeyPolicyCollection = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicy"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContentKeyPolicyProperties = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyProperties",
        modelProperties: {
            policyId: {
                serializedName: "policyId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            created: {
                serializedName: "created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastModified: {
                serializedName: "lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            options: {
                serializedName: "options",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyOption"
                        }
                    }
                }
            }
        }
    }
};
const ContentKeyPolicyOption = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyOption",
        modelProperties: {
            policyOptionId: {
                serializedName: "policyOptionId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            configuration: {
                serializedName: "configuration",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyConfiguration"
                }
            },
            restriction: {
                serializedName: "restriction",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyRestriction"
                }
            }
        }
    }
};
const ContentKeyPolicyConfiguration = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContentKeyPolicyRestriction = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyRestriction",
        uberParent: "ContentKeyPolicyRestriction",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TransformCollection = {
    type: {
        name: "Composite",
        className: "TransformCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transform"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TransformOutput = {
    type: {
        name: "Composite",
        className: "TransformOutput",
        modelProperties: {
            onError: {
                serializedName: "onError",
                type: {
                    name: "String"
                }
            },
            relativePriority: {
                serializedName: "relativePriority",
                type: {
                    name: "String"
                }
            },
            preset: {
                serializedName: "preset",
                type: {
                    name: "Composite",
                    className: "Preset"
                }
            }
        }
    }
};
const Preset = {
    type: {
        name: "Composite",
        className: "Preset",
        uberParent: "Preset",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobCollection = {
    type: {
        name: "Composite",
        className: "JobCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Job"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobInput = {
    type: {
        name: "Composite",
        className: "JobInput",
        uberParent: "JobInput",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JobOutput = {
    type: {
        name: "Composite",
        className: "JobOutput",
        uberParent: "JobOutput",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "JobError"
                }
            },
            presetOverride: {
                serializedName: "presetOverride",
                type: {
                    name: "Composite",
                    className: "Preset"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            progress: {
                serializedName: "progress",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const JobError = {
    type: {
        name: "Composite",
        className: "JobError",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            retry: {
                serializedName: "retry",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobErrorDetail"
                        }
                    }
                }
            }
        }
    }
};
const JobErrorDetail = {
    type: {
        name: "Composite",
        className: "JobErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StreamingPolicyCollection = {
    type: {
        name: "Composite",
        className: "StreamingPolicyCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingPolicy"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnvelopeEncryption = {
    type: {
        name: "Composite",
        className: "EnvelopeEncryption",
        modelProperties: {
            enabledProtocols: {
                serializedName: "enabledProtocols",
                type: {
                    name: "Composite",
                    className: "EnabledProtocols"
                }
            },
            clearTracks: {
                serializedName: "clearTracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            },
            contentKeys: {
                serializedName: "contentKeys",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyContentKeys"
                }
            },
            customKeyAcquisitionUrlTemplate: {
                serializedName: "customKeyAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnabledProtocols = {
    type: {
        name: "Composite",
        className: "EnabledProtocols",
        modelProperties: {
            download: {
                serializedName: "download",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            dash: {
                serializedName: "dash",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            hls: {
                serializedName: "hls",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            smoothStreaming: {
                serializedName: "smoothStreaming",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const TrackSelection = {
    type: {
        name: "Composite",
        className: "TrackSelection",
        modelProperties: {
            trackSelections: {
                serializedName: "trackSelections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackPropertyCondition"
                        }
                    }
                }
            }
        }
    }
};
const TrackPropertyCondition = {
    type: {
        name: "Composite",
        className: "TrackPropertyCondition",
        modelProperties: {
            property: {
                serializedName: "property",
                required: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StreamingPolicyContentKeys = {
    type: {
        name: "Composite",
        className: "StreamingPolicyContentKeys",
        modelProperties: {
            defaultKey: {
                serializedName: "defaultKey",
                type: {
                    name: "Composite",
                    className: "DefaultKey"
                }
            },
            keyToTrackMappings: {
                serializedName: "keyToTrackMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingPolicyContentKey"
                        }
                    }
                }
            }
        }
    }
};
const DefaultKey = {
    type: {
        name: "Composite",
        className: "DefaultKey",
        modelProperties: {
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            policyName: {
                serializedName: "policyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StreamingPolicyContentKey = {
    type: {
        name: "Composite",
        className: "StreamingPolicyContentKey",
        modelProperties: {
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            policyName: {
                serializedName: "policyName",
                type: {
                    name: "String"
                }
            },
            tracks: {
                serializedName: "tracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            }
        }
    }
};
const CommonEncryptionCenc = {
    type: {
        name: "Composite",
        className: "CommonEncryptionCenc",
        modelProperties: {
            enabledProtocols: {
                serializedName: "enabledProtocols",
                type: {
                    name: "Composite",
                    className: "EnabledProtocols"
                }
            },
            clearTracks: {
                serializedName: "clearTracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            },
            contentKeys: {
                serializedName: "contentKeys",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyContentKeys"
                }
            },
            drm: {
                serializedName: "drm",
                type: {
                    name: "Composite",
                    className: "CencDrmConfiguration"
                }
            },
            clearKeyEncryptionConfiguration: {
                serializedName: "clearKeyEncryptionConfiguration",
                type: {
                    name: "Composite",
                    className: "ClearKeyEncryptionConfiguration"
                }
            }
        }
    }
};
const CencDrmConfiguration = {
    type: {
        name: "Composite",
        className: "CencDrmConfiguration",
        modelProperties: {
            playReady: {
                serializedName: "playReady",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyPlayReadyConfiguration"
                }
            },
            widevine: {
                serializedName: "widevine",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyWidevineConfiguration"
                }
            }
        }
    }
};
const StreamingPolicyPlayReadyConfiguration = {
    type: {
        name: "Composite",
        className: "StreamingPolicyPlayReadyConfiguration",
        modelProperties: {
            customLicenseAcquisitionUrlTemplate: {
                serializedName: "customLicenseAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            },
            playReadyCustomAttributes: {
                serializedName: "playReadyCustomAttributes",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StreamingPolicyWidevineConfiguration = {
    type: {
        name: "Composite",
        className: "StreamingPolicyWidevineConfiguration",
        modelProperties: {
            customLicenseAcquisitionUrlTemplate: {
                serializedName: "customLicenseAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClearKeyEncryptionConfiguration = {
    type: {
        name: "Composite",
        className: "ClearKeyEncryptionConfiguration",
        modelProperties: {
            customKeysAcquisitionUrlTemplate: {
                serializedName: "customKeysAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommonEncryptionCbcs = {
    type: {
        name: "Composite",
        className: "CommonEncryptionCbcs",
        modelProperties: {
            enabledProtocols: {
                serializedName: "enabledProtocols",
                type: {
                    name: "Composite",
                    className: "EnabledProtocols"
                }
            },
            clearTracks: {
                serializedName: "clearTracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            },
            contentKeys: {
                serializedName: "contentKeys",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyContentKeys"
                }
            },
            drm: {
                serializedName: "drm",
                type: {
                    name: "Composite",
                    className: "CbcsDrmConfiguration"
                }
            },
            clearKeyEncryptionConfiguration: {
                serializedName: "clearKeyEncryptionConfiguration",
                type: {
                    name: "Composite",
                    className: "ClearKeyEncryptionConfiguration"
                }
            }
        }
    }
};
const CbcsDrmConfiguration = {
    type: {
        name: "Composite",
        className: "CbcsDrmConfiguration",
        modelProperties: {
            fairPlay: {
                serializedName: "fairPlay",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyFairPlayConfiguration"
                }
            },
            playReady: {
                serializedName: "playReady",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyPlayReadyConfiguration"
                }
            },
            widevine: {
                serializedName: "widevine",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyWidevineConfiguration"
                }
            }
        }
    }
};
const StreamingPolicyFairPlayConfiguration = {
    type: {
        name: "Composite",
        className: "StreamingPolicyFairPlayConfiguration",
        modelProperties: {
            customLicenseAcquisitionUrlTemplate: {
                serializedName: "customLicenseAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            },
            allowPersistentLicense: {
                serializedName: "allowPersistentLicense",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const NoEncryption = {
    type: {
        name: "Composite",
        className: "NoEncryption",
        modelProperties: {
            enabledProtocols: {
                serializedName: "enabledProtocols",
                type: {
                    name: "Composite",
                    className: "EnabledProtocols"
                }
            }
        }
    }
};
const StreamingLocatorCollection = {
    type: {
        name: "Composite",
        className: "StreamingLocatorCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingLocator"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StreamingLocatorContentKey = {
    type: {
        name: "Composite",
        className: "StreamingLocatorContentKey",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "Uuid"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            labelReferenceInStreamingPolicy: {
                serializedName: "labelReferenceInStreamingPolicy",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            policyName: {
                serializedName: "policyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tracks: {
                serializedName: "tracks",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            }
        }
    }
};
const ListContentKeysResponse = {
    type: {
        name: "Composite",
        className: "ListContentKeysResponse",
        modelProperties: {
            contentKeys: {
                serializedName: "contentKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingLocatorContentKey"
                        }
                    }
                }
            }
        }
    }
};
const ListPathsResponse = {
    type: {
        name: "Composite",
        className: "ListPathsResponse",
        modelProperties: {
            streamingPaths: {
                serializedName: "streamingPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingPath"
                        }
                    }
                }
            },
            downloadPaths: {
                serializedName: "downloadPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const StreamingPath = {
    type: {
        name: "Composite",
        className: "StreamingPath",
        modelProperties: {
            streamingProtocol: {
                serializedName: "streamingProtocol",
                required: true,
                type: {
                    name: "String"
                }
            },
            encryptionScheme: {
                serializedName: "encryptionScheme",
                required: true,
                type: {
                    name: "String"
                }
            },
            paths: {
                serializedName: "paths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const LiveEventListResult = {
    type: {
        name: "Composite",
        className: "LiveEventListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEvent"
                        }
                    }
                }
            },
            odataCount: {
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LiveEventInput = {
    type: {
        name: "Composite",
        className: "LiveEventInput",
        modelProperties: {
            streamingProtocol: {
                serializedName: "streamingProtocol",
                required: true,
                type: {
                    name: "String"
                }
            },
            accessControl: {
                serializedName: "accessControl",
                type: {
                    name: "Composite",
                    className: "LiveEventInputAccessControl"
                }
            },
            keyFrameIntervalDuration: {
                serializedName: "keyFrameIntervalDuration",
                type: {
                    name: "String"
                }
            },
            accessToken: {
                serializedName: "accessToken",
                type: {
                    name: "String"
                }
            },
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEventEndpoint"
                        }
                    }
                }
            }
        }
    }
};
const LiveEventInputAccessControl = {
    type: {
        name: "Composite",
        className: "LiveEventInputAccessControl",
        modelProperties: {
            ip: {
                serializedName: "ip",
                type: {
                    name: "Composite",
                    className: "IPAccessControl"
                }
            }
        }
    }
};
const IPAccessControl = {
    type: {
        name: "Composite",
        className: "IPAccessControl",
        modelProperties: {
            allow: {
                serializedName: "allow",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IPRange"
                        }
                    }
                }
            }
        }
    }
};
const IPRange = {
    type: {
        name: "Composite",
        className: "IPRange",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                type: {
                    name: "String"
                }
            },
            subnetPrefixLength: {
                serializedName: "subnetPrefixLength",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const LiveEventEndpoint = {
    type: {
        name: "Composite",
        className: "LiveEventEndpoint",
        modelProperties: {
            protocol: {
                serializedName: "protocol",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LiveEventPreview = {
    type: {
        name: "Composite",
        className: "LiveEventPreview",
        modelProperties: {
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEventEndpoint"
                        }
                    }
                }
            },
            accessControl: {
                serializedName: "accessControl",
                type: {
                    name: "Composite",
                    className: "LiveEventPreviewAccessControl"
                }
            },
            previewLocator: {
                serializedName: "previewLocator",
                type: {
                    name: "String"
                }
            },
            streamingPolicyName: {
                serializedName: "streamingPolicyName",
                type: {
                    name: "String"
                }
            },
            alternativeMediaId: {
                serializedName: "alternativeMediaId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LiveEventPreviewAccessControl = {
    type: {
        name: "Composite",
        className: "LiveEventPreviewAccessControl",
        modelProperties: {
            ip: {
                serializedName: "ip",
                type: {
                    name: "Composite",
                    className: "IPAccessControl"
                }
            }
        }
    }
};
const LiveEventEncoding = {
    type: {
        name: "Composite",
        className: "LiveEventEncoding",
        modelProperties: {
            encodingType: {
                serializedName: "encodingType",
                type: {
                    name: "String"
                }
            },
            presetName: {
                serializedName: "presetName",
                type: {
                    name: "String"
                }
            },
            stretchMode: {
                serializedName: "stretchMode",
                type: {
                    name: "String"
                }
            },
            keyFrameInterval: {
                serializedName: "keyFrameInterval",
                type: {
                    name: "TimeSpan"
                }
            }
        }
    }
};
const LiveEventTranscription = {
    type: {
        name: "Composite",
        className: "LiveEventTranscription",
        modelProperties: {
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            inputTrackSelection: {
                serializedName: "inputTrackSelection",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEventInputTrackSelection"
                        }
                    }
                }
            },
            outputTranscriptionTrack: {
                serializedName: "outputTranscriptionTrack",
                type: {
                    name: "Composite",
                    className: "LiveEventOutputTranscriptionTrack"
                }
            }
        }
    }
};
const LiveEventInputTrackSelection = {
    type: {
        name: "Composite",
        className: "LiveEventInputTrackSelection",
        modelProperties: {
            property: {
                serializedName: "property",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LiveEventOutputTranscriptionTrack = {
    type: {
        name: "Composite",
        className: "LiveEventOutputTranscriptionTrack",
        modelProperties: {
            trackName: {
                serializedName: "trackName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CrossSiteAccessPolicies = {
    type: {
        name: "Composite",
        className: "CrossSiteAccessPolicies",
        modelProperties: {
            clientAccessPolicy: {
                serializedName: "clientAccessPolicy",
                type: {
                    name: "String"
                }
            },
            crossDomainPolicy: {
                serializedName: "crossDomainPolicy",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LiveEventActionInput = {
    type: {
        name: "Composite",
        className: "LiveEventActionInput",
        modelProperties: {
            removeOutputsOnStop: {
                serializedName: "removeOutputsOnStop",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const AsyncOperationResult = {
    type: {
        name: "Composite",
        className: "AsyncOperationResult",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LiveOutputListResult = {
    type: {
        name: "Composite",
        className: "LiveOutputListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveOutput"
                        }
                    }
                }
            },
            odataCount: {
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Hls = {
    type: {
        name: "Composite",
        className: "Hls",
        modelProperties: {
            fragmentsPerTsSegment: {
                serializedName: "fragmentsPerTsSegment",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const StreamingEndpointListResult = {
    type: {
        name: "Composite",
        className: "StreamingEndpointListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingEndpoint"
                        }
                    }
                }
            },
            odataCount: {
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StreamingEndpointAccessControl = {
    type: {
        name: "Composite",
        className: "StreamingEndpointAccessControl",
        modelProperties: {
            akamai: {
                serializedName: "akamai",
                type: {
                    name: "Composite",
                    className: "AkamaiAccessControl"
                }
            },
            ip: {
                serializedName: "ip",
                type: {
                    name: "Composite",
                    className: "IPAccessControl"
                }
            }
        }
    }
};
const AkamaiAccessControl = {
    type: {
        name: "Composite",
        className: "AkamaiAccessControl",
        modelProperties: {
            akamaiSignatureHeaderAuthenticationKeyList: {
                serializedName: "akamaiSignatureHeaderAuthenticationKeyList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AkamaiSignatureHeaderAuthenticationKey"
                        }
                    }
                }
            }
        }
    }
};
const AkamaiSignatureHeaderAuthenticationKey = {
    type: {
        name: "Composite",
        className: "AkamaiSignatureHeaderAuthenticationKey",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String"
                }
            },
            base64Key: {
                serializedName: "base64Key",
                type: {
                    name: "String"
                }
            },
            expiration: {
                serializedName: "expiration",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ArmStreamingEndpointCurrentSku = {
    type: {
        name: "Composite",
        className: "ArmStreamingEndpointCurrentSku",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const StreamingEndpointSkuInfoListResult = {
    type: {
        name: "Composite",
        className: "StreamingEndpointSkuInfoListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArmStreamingEndpointSkuInfo"
                        }
                    }
                }
            }
        }
    }
};
const ArmStreamingEndpointSkuInfo = {
    type: {
        name: "Composite",
        className: "ArmStreamingEndpointSkuInfo",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "ArmStreamingEndpointCapacity"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ArmStreamingEndpointSku"
                }
            }
        }
    }
};
const ArmStreamingEndpointCapacity = {
    type: {
        name: "Composite",
        className: "ArmStreamingEndpointCapacity",
        modelProperties: {
            scaleType: {
                serializedName: "scaleType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            default: {
                serializedName: "default",
                type: {
                    name: "Number"
                }
            },
            minimum: {
                serializedName: "minimum",
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ArmStreamingEndpointSku = {
    type: {
        name: "Composite",
        className: "ArmStreamingEndpointSku",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StreamingEntityScaleUnit = {
    type: {
        name: "Composite",
        className: "StreamingEntityScaleUnit",
        modelProperties: {
            scaleUnit: {
                serializedName: "scaleUnit",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const HlsSettings = {
    type: {
        name: "Composite",
        className: "HlsSettings",
        modelProperties: {
            default: {
                serializedName: "default",
                type: {
                    name: "Boolean"
                }
            },
            forced: {
                serializedName: "forced",
                type: {
                    name: "Boolean"
                }
            },
            characteristics: {
                serializedName: "characteristics",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DashSettings = {
    type: {
        name: "Composite",
        className: "DashSettings",
        modelProperties: {
            role: {
                serializedName: "role",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction",
        modelProperties: {
            bestEffort: {
                serializedName: "bestEffort",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            configurationData: {
                serializedName: "configurationData",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ContentKeyPolicyPlayReadyContentKeyLocation = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyContentKeyLocation",
        uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContentKeyPolicyPlayReadyPlayRight = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyPlayRight",
        modelProperties: {
            firstPlayExpiration: {
                serializedName: "firstPlayExpiration",
                type: {
                    name: "TimeSpan"
                }
            },
            scmsRestriction: {
                serializedName: "scmsRestriction",
                type: {
                    name: "Number"
                }
            },
            agcAndColorStripeRestriction: {
                serializedName: "agcAndColorStripeRestriction",
                type: {
                    name: "Number"
                }
            },
            explicitAnalogTelevisionOutputRestriction: {
                serializedName: "explicitAnalogTelevisionOutputRestriction",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction"
                }
            },
            digitalVideoOnlyContentRestriction: {
                serializedName: "digitalVideoOnlyContentRestriction",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            imageConstraintForAnalogComponentVideoRestriction: {
                serializedName: "imageConstraintForAnalogComponentVideoRestriction",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            imageConstraintForAnalogComputerMonitorRestriction: {
                serializedName: "imageConstraintForAnalogComputerMonitorRestriction",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            allowPassingVideoContentToUnknownOutput: {
                serializedName: "allowPassingVideoContentToUnknownOutput",
                required: true,
                type: {
                    name: "String"
                }
            },
            uncompressedDigitalVideoOpl: {
                serializedName: "uncompressedDigitalVideoOpl",
                type: {
                    name: "Number"
                }
            },
            compressedDigitalVideoOpl: {
                serializedName: "compressedDigitalVideoOpl",
                type: {
                    name: "Number"
                }
            },
            analogVideoOpl: {
                serializedName: "analogVideoOpl",
                type: {
                    name: "Number"
                }
            },
            compressedDigitalAudioOpl: {
                serializedName: "compressedDigitalAudioOpl",
                type: {
                    name: "Number"
                }
            },
            uncompressedDigitalAudioOpl: {
                serializedName: "uncompressedDigitalAudioOpl",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ContentKeyPolicyTokenClaim = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyTokenClaim",
        modelProperties: {
            claimType: {
                serializedName: "claimType",
                type: {
                    name: "String"
                }
            },
            claimValue: {
                serializedName: "claimValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContentKeyPolicyPlayReadyLicense = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyLicense",
        modelProperties: {
            allowTestDevices: {
                serializedName: "allowTestDevices",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            securityLevel: {
                serializedName: "securityLevel",
                type: {
                    name: "String"
                }
            },
            beginDate: {
                serializedName: "beginDate",
                type: {
                    name: "DateTime"
                }
            },
            expirationDate: {
                serializedName: "expirationDate",
                type: {
                    name: "DateTime"
                }
            },
            relativeBeginDate: {
                serializedName: "relativeBeginDate",
                type: {
                    name: "TimeSpan"
                }
            },
            relativeExpirationDate: {
                serializedName: "relativeExpirationDate",
                type: {
                    name: "TimeSpan"
                }
            },
            gracePeriod: {
                serializedName: "gracePeriod",
                type: {
                    name: "TimeSpan"
                }
            },
            playRight: {
                serializedName: "playRight",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyPlayReadyPlayRight"
                }
            },
            licenseType: {
                serializedName: "licenseType",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentKeyLocation: {
                serializedName: "contentKeyLocation",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyPlayReadyContentKeyLocation"
                }
            },
            contentType: {
                serializedName: "contentType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContentKeyPolicyRestrictionTokenKey = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyRestrictionTokenKey",
        uberParent: "ContentKeyPolicyRestrictionTokenKey",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContentKeyPolicyFairPlayOfflineRentalConfiguration = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyFairPlayOfflineRentalConfiguration",
        modelProperties: {
            playbackDurationSeconds: {
                serializedName: "playbackDurationSeconds",
                required: true,
                type: {
                    name: "Number"
                }
            },
            storageDurationSeconds: {
                serializedName: "storageDurationSeconds",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Codec = {
    type: {
        name: "Composite",
        className: "Codec",
        uberParent: "Codec",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Layer = {
    type: {
        name: "Composite",
        className: "Layer",
        modelProperties: {
            width: {
                serializedName: "width",
                type: {
                    name: "String"
                }
            },
            height: {
                serializedName: "height",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrackDescriptor = {
    type: {
        name: "Composite",
        className: "TrackDescriptor",
        uberParent: "TrackDescriptor",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InputDefinition = {
    type: {
        name: "Composite",
        className: "InputDefinition",
        uberParent: "InputDefinition",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            includedTracks: {
                serializedName: "includedTracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackDescriptor"
                        }
                    }
                }
            }
        }
    }
};
const Overlay = {
    type: {
        name: "Composite",
        className: "Overlay",
        uberParent: "Overlay",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            inputLabel: {
                serializedName: "inputLabel",
                required: true,
                type: {
                    name: "String"
                }
            },
            start: {
                serializedName: "start",
                type: {
                    name: "TimeSpan"
                }
            },
            end: {
                serializedName: "end",
                type: {
                    name: "TimeSpan"
                }
            },
            fadeInDuration: {
                serializedName: "fadeInDuration",
                type: {
                    name: "TimeSpan"
                }
            },
            fadeOutDuration: {
                serializedName: "fadeOutDuration",
                type: {
                    name: "TimeSpan"
                }
            },
            audioGainLevel: {
                serializedName: "audioGainLevel",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Format = {
    type: {
        name: "Composite",
        className: "Format",
        uberParent: "Format",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            filenamePattern: {
                serializedName: "filenamePattern",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Deinterlace = {
    type: {
        name: "Composite",
        className: "Deinterlace",
        modelProperties: {
            parity: {
                serializedName: "parity",
                type: {
                    name: "String"
                }
            },
            mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Rectangle = {
    type: {
        name: "Composite",
        className: "Rectangle",
        modelProperties: {
            left: {
                serializedName: "left",
                type: {
                    name: "String"
                }
            },
            top: {
                serializedName: "top",
                type: {
                    name: "String"
                }
            },
            width: {
                serializedName: "width",
                type: {
                    name: "String"
                }
            },
            height: {
                serializedName: "height",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Filters = {
    type: {
        name: "Composite",
        className: "Filters",
        modelProperties: {
            deinterlace: {
                serializedName: "deinterlace",
                type: {
                    name: "Composite",
                    className: "Deinterlace"
                }
            },
            rotation: {
                serializedName: "rotation",
                type: {
                    name: "String"
                }
            },
            crop: {
                serializedName: "crop",
                type: {
                    name: "Composite",
                    className: "Rectangle"
                }
            },
            overlays: {
                serializedName: "overlays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Overlay"
                        }
                    }
                }
            }
        }
    }
};
const OutputFile = {
    type: {
        name: "Composite",
        className: "OutputFile",
        modelProperties: {
            labels: {
                serializedName: "labels",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const PresetConfigurations = {
    type: {
        name: "Composite",
        className: "PresetConfigurations",
        modelProperties: {
            complexity: {
                serializedName: "complexity",
                type: {
                    name: "String"
                }
            },
            interleaveOutput: {
                serializedName: "interleaveOutput",
                type: {
                    name: "String"
                }
            },
            keyFrameIntervalInSeconds: {
                serializedName: "keyFrameIntervalInSeconds",
                type: {
                    name: "Number"
                }
            },
            maxBitrateBps: {
                serializedName: "maxBitrateBps",
                type: {
                    name: "Number"
                }
            },
            maxHeight: {
                serializedName: "maxHeight",
                type: {
                    name: "Number"
                }
            },
            maxLayers: {
                serializedName: "maxLayers",
                type: {
                    name: "Number"
                }
            },
            minBitrateBps: {
                serializedName: "minBitrateBps",
                type: {
                    name: "Number"
                }
            },
            minHeight: {
                serializedName: "minHeight",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ClipTime = {
    type: {
        name: "Composite",
        className: "ClipTime",
        uberParent: "ClipTime",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { groupId: {
                serializedName: "properties.groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, requiredMembers: {
                serializedName: "properties.requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const AudioTrack = {
    serializedName: "#Microsoft.Media.AudioTrack",
    type: {
        name: "Composite",
        className: "AudioTrack",
        uberParent: "TrackBase",
        polymorphicDiscriminator: TrackBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TrackBase.type.modelProperties), { fileName: {
                serializedName: "fileName",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }, languageCode: {
                serializedName: "languageCode",
                type: {
                    name: "String"
                }
            }, hlsSettings: {
                serializedName: "hlsSettings",
                type: {
                    name: "Composite",
                    className: "HlsSettings"
                }
            }, dashSettings: {
                serializedName: "dashSettings",
                type: {
                    name: "Composite",
                    className: "DashSettings"
                }
            }, mpeg4TrackId: {
                serializedName: "mpeg4TrackId",
                nullable: true,
                type: {
                    name: "Number"
                }
            }, bitRate: {
                serializedName: "bitRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const VideoTrack = {
    serializedName: "#Microsoft.Media.VideoTrack",
    type: {
        name: "Composite",
        className: "VideoTrack",
        uberParent: "TrackBase",
        polymorphicDiscriminator: TrackBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, TrackBase.type.modelProperties)
    }
};
const TextTrack = {
    serializedName: "#Microsoft.Media.TextTrack",
    type: {
        name: "Composite",
        className: "TextTrack",
        uberParent: "TrackBase",
        polymorphicDiscriminator: TrackBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TrackBase.type.modelProperties), { fileName: {
                serializedName: "fileName",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }, languageCode: {
                serializedName: "languageCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, playerVisibility: {
                serializedName: "playerVisibility",
                type: {
                    name: "String"
                }
            }, hlsSettings: {
                serializedName: "hlsSettings",
                type: {
                    name: "Composite",
                    className: "HlsSettings"
                }
            } })
    }
};
const ContentKeyPolicyClearKeyConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyClearKeyConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties)
    }
};
const ContentKeyPolicyUnknownConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyUnknownConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyUnknownConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties)
    }
};
const ContentKeyPolicyWidevineConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyWidevineConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties), { widevineTemplate: {
                serializedName: "widevineTemplate",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ContentKeyPolicyPlayReadyConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties), { licenses: {
                serializedName: "licenses",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyPlayReadyLicense"
                        }
                    }
                }
            }, responseCustomData: {
                serializedName: "responseCustomData",
                type: {
                    name: "String"
                }
            } })
    }
};
const ContentKeyPolicyFairPlayConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyFairPlayConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties), { ask: {
                serializedName: "ask",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            }, fairPlayPfxPassword: {
                serializedName: "fairPlayPfxPassword",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, fairPlayPfx: {
                serializedName: "fairPlayPfx",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, rentalAndLeaseKeyType: {
                serializedName: "rentalAndLeaseKeyType",
                required: true,
                type: {
                    name: "String"
                }
            }, rentalDuration: {
                serializedName: "rentalDuration",
                required: true,
                type: {
                    name: "Number"
                }
            }, offlineRentalConfiguration: {
                serializedName: "offlineRentalConfiguration",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyFairPlayOfflineRentalConfiguration"
                }
            } })
    }
};
const ContentKeyPolicyOpenRestriction = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyOpenRestriction",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyOpenRestriction",
        uberParent: "ContentKeyPolicyRestriction",
        polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyRestriction.type.modelProperties)
    }
};
const ContentKeyPolicyUnknownRestriction = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyUnknownRestriction",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyUnknownRestriction",
        uberParent: "ContentKeyPolicyRestriction",
        polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyRestriction.type.modelProperties)
    }
};
const ContentKeyPolicyTokenRestriction = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyTokenRestriction",
        uberParent: "ContentKeyPolicyRestriction",
        polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyRestriction.type.modelProperties), { issuer: {
                serializedName: "issuer",
                required: true,
                type: {
                    name: "String"
                }
            }, audience: {
                serializedName: "audience",
                required: true,
                type: {
                    name: "String"
                }
            }, primaryVerificationKey: {
                serializedName: "primaryVerificationKey",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyRestrictionTokenKey"
                }
            }, alternateVerificationKeys: {
                serializedName: "alternateVerificationKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyRestrictionTokenKey"
                        }
                    }
                }
            }, requiredClaims: {
                serializedName: "requiredClaims",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyTokenClaim"
                        }
                    }
                }
            }, restrictionTokenType: {
                serializedName: "restrictionTokenType",
                required: true,
                type: {
                    name: "String"
                }
            }, openIdConnectDiscoveryDocument: {
                serializedName: "openIdConnectDiscoveryDocument",
                type: {
                    name: "String"
                }
            } })
    }
};
const FaceDetectorPreset = {
    serializedName: "#Microsoft.Media.FaceDetectorPreset",
    type: {
        name: "Composite",
        className: "FaceDetectorPreset",
        uberParent: "Preset",
        polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Preset.type.modelProperties), { resolution: {
                serializedName: "resolution",
                type: {
                    name: "String"
                }
            }, mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }, blurType: {
                serializedName: "blurType",
                type: {
                    name: "String"
                }
            }, experimentalOptions: {
                serializedName: "experimentalOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const AudioAnalyzerPreset = {
    serializedName: "#Microsoft.Media.AudioAnalyzerPreset",
    type: {
        name: "Composite",
        className: "AudioAnalyzerPreset",
        uberParent: "Preset",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Preset.type.modelProperties), { audioLanguage: {
                serializedName: "audioLanguage",
                type: {
                    name: "String"
                }
            }, mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }, experimentalOptions: {
                serializedName: "experimentalOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const BuiltInStandardEncoderPreset = {
    serializedName: "#Microsoft.Media.BuiltInStandardEncoderPreset",
    type: {
        name: "Composite",
        className: "BuiltInStandardEncoderPreset",
        uberParent: "Preset",
        polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Preset.type.modelProperties), { configurations: {
                serializedName: "configurations",
                type: {
                    name: "Composite",
                    className: "PresetConfigurations"
                }
            }, presetName: {
                serializedName: "presetName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const StandardEncoderPreset = {
    serializedName: "#Microsoft.Media.StandardEncoderPreset",
    type: {
        name: "Composite",
        className: "StandardEncoderPreset",
        uberParent: "Preset",
        polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Preset.type.modelProperties), { filters: {
                serializedName: "filters",
                type: {
                    name: "Composite",
                    className: "Filters"
                }
            }, codecs: {
                serializedName: "codecs",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Codec"
                        }
                    }
                }
            }, formats: {
                serializedName: "formats",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Format"
                        }
                    }
                }
            } })
    }
};
const JobInputClip = {
    serializedName: "#Microsoft.Media.JobInputClip",
    type: {
        name: "Composite",
        className: "JobInputClip",
        uberParent: "JobInput",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, JobInput.type.modelProperties), { files: {
                serializedName: "files",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, start: {
                serializedName: "start",
                type: {
                    name: "Composite",
                    className: "ClipTime"
                }
            }, end: {
                serializedName: "end",
                type: {
                    name: "Composite",
                    className: "ClipTime"
                }
            }, label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            }, inputDefinitions: {
                serializedName: "inputDefinitions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InputDefinition"
                        }
                    }
                }
            } })
    }
};
const JobInputs = {
    serializedName: "#Microsoft.Media.JobInputs",
    type: {
        name: "Composite",
        className: "JobInputs",
        uberParent: "JobInput",
        polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobInput.type.modelProperties), { inputs: {
                serializedName: "inputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobInput"
                        }
                    }
                }
            } })
    }
};
const JobInputSequence = {
    serializedName: "#Microsoft.Media.JobInputSequence",
    type: {
        name: "Composite",
        className: "JobInputSequence",
        uberParent: "JobInput",
        polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobInput.type.modelProperties), { inputs: {
                serializedName: "inputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobInputClip"
                        }
                    }
                }
            } })
    }
};
const JobOutputAsset = {
    serializedName: "#Microsoft.Media.JobOutputAsset",
    type: {
        name: "Composite",
        className: "JobOutputAsset",
        uberParent: "JobOutput",
        polymorphicDiscriminator: JobOutput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobOutput.type.modelProperties), { assetName: {
                serializedName: "assetName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
        uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
        polymorphicDiscriminator: ContentKeyPolicyPlayReadyContentKeyLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyPlayReadyContentKeyLocation.type.modelProperties)
    }
};
const ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier",
        uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
        polymorphicDiscriminator: ContentKeyPolicyPlayReadyContentKeyLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyPlayReadyContentKeyLocation.type.modelProperties), { keyId: {
                serializedName: "keyId",
                required: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            } })
    }
};
const ContentKeyPolicySymmetricTokenKey = {
    serializedName: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
    type: {
        name: "Composite",
        className: "ContentKeyPolicySymmetricTokenKey",
        uberParent: "ContentKeyPolicyRestrictionTokenKey",
        polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties), { keyValue: {
                serializedName: "keyValue",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            } })
    }
};
const ContentKeyPolicyRsaTokenKey = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyRsaTokenKey",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyRsaTokenKey",
        uberParent: "ContentKeyPolicyRestrictionTokenKey",
        polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties), { exponent: {
                serializedName: "exponent",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            }, modulus: {
                serializedName: "modulus",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            } })
    }
};
const ContentKeyPolicyX509CertificateTokenKey = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyX509CertificateTokenKey",
        uberParent: "ContentKeyPolicyRestrictionTokenKey",
        polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties), { rawBody: {
                serializedName: "rawBody",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            } })
    }
};
const Audio = {
    serializedName: "#Microsoft.Media.Audio",
    type: {
        name: "Composite",
        className: "Audio",
        uberParent: "Codec",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Codec.type.modelProperties), { channels: {
                serializedName: "channels",
                type: {
                    name: "Number"
                }
            }, samplingRate: {
                serializedName: "samplingRate",
                type: {
                    name: "Number"
                }
            }, bitrate: {
                serializedName: "bitrate",
                type: {
                    name: "Number"
                }
            } })
    }
};
const Video = {
    serializedName: "#Microsoft.Media.Video",
    type: {
        name: "Composite",
        className: "Video",
        uberParent: "Codec",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Codec.type.modelProperties), { keyFrameInterval: {
                serializedName: "keyFrameInterval",
                type: {
                    name: "TimeSpan"
                }
            }, stretchMode: {
                serializedName: "stretchMode",
                type: {
                    name: "String"
                }
            }, syncMode: {
                serializedName: "syncMode",
                type: {
                    name: "String"
                }
            } })
    }
};
const CopyVideo = {
    serializedName: "#Microsoft.Media.CopyVideo",
    type: {
        name: "Composite",
        className: "CopyVideo",
        uberParent: "Codec",
        polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Codec.type.modelProperties)
    }
};
const CopyAudio = {
    serializedName: "#Microsoft.Media.CopyAudio",
    type: {
        name: "Composite",
        className: "CopyAudio",
        uberParent: "Codec",
        polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Codec.type.modelProperties)
    }
};
const H265VideoLayer = {
    type: {
        name: "Composite",
        className: "H265VideoLayer",
        modelProperties: Object.assign(Object.assign({}, Layer.type.modelProperties), { bitrate: {
                serializedName: "bitrate",
                required: true,
                type: {
                    name: "Number"
                }
            }, maxBitrate: {
                serializedName: "maxBitrate",
                type: {
                    name: "Number"
                }
            }, bFrames: {
                serializedName: "bFrames",
                type: {
                    name: "Number"
                }
            }, frameRate: {
                serializedName: "frameRate",
                type: {
                    name: "String"
                }
            }, slices: {
                serializedName: "slices",
                type: {
                    name: "Number"
                }
            }, adaptiveBFrame: {
                serializedName: "adaptiveBFrame",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const VideoLayer = {
    type: {
        name: "Composite",
        className: "VideoLayer",
        modelProperties: Object.assign(Object.assign({}, Layer.type.modelProperties), { bitrate: {
                serializedName: "bitrate",
                required: true,
                type: {
                    name: "Number"
                }
            }, maxBitrate: {
                serializedName: "maxBitrate",
                type: {
                    name: "Number"
                }
            }, bFrames: {
                serializedName: "bFrames",
                type: {
                    name: "Number"
                }
            }, frameRate: {
                serializedName: "frameRate",
                type: {
                    name: "String"
                }
            }, slices: {
                serializedName: "slices",
                type: {
                    name: "Number"
                }
            }, adaptiveBFrame: {
                serializedName: "adaptiveBFrame",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const JpgLayer = {
    type: {
        name: "Composite",
        className: "JpgLayer",
        modelProperties: Object.assign(Object.assign({}, Layer.type.modelProperties), { quality: {
                serializedName: "quality",
                type: {
                    name: "Number"
                }
            } })
    }
};
const PngLayer = {
    type: {
        name: "Composite",
        className: "PngLayer",
        modelProperties: Object.assign({}, Layer.type.modelProperties)
    }
};
const AudioTrackDescriptor = {
    serializedName: "#Microsoft.Media.AudioTrackDescriptor",
    type: {
        name: "Composite",
        className: "AudioTrackDescriptor",
        uberParent: "TrackDescriptor",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, TrackDescriptor.type.modelProperties), { channelMapping: {
                serializedName: "channelMapping",
                type: {
                    name: "String"
                }
            } })
    }
};
const VideoTrackDescriptor = {
    serializedName: "#Microsoft.Media.VideoTrackDescriptor",
    type: {
        name: "Composite",
        className: "VideoTrackDescriptor",
        uberParent: "TrackDescriptor",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign({}, TrackDescriptor.type.modelProperties)
    }
};
const FromAllInputFile = {
    serializedName: "#Microsoft.Media.FromAllInputFile",
    type: {
        name: "Composite",
        className: "FromAllInputFile",
        uberParent: "InputDefinition",
        polymorphicDiscriminator: InputDefinition.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, InputDefinition.type.modelProperties)
    }
};
const FromEachInputFile = {
    serializedName: "#Microsoft.Media.FromEachInputFile",
    type: {
        name: "Composite",
        className: "FromEachInputFile",
        uberParent: "InputDefinition",
        polymorphicDiscriminator: InputDefinition.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, InputDefinition.type.modelProperties)
    }
};
const InputFile = {
    serializedName: "#Microsoft.Media.InputFile",
    type: {
        name: "Composite",
        className: "InputFile",
        uberParent: "InputDefinition",
        polymorphicDiscriminator: InputDefinition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, InputDefinition.type.modelProperties), { filename: {
                serializedName: "filename",
                type: {
                    name: "String"
                }
            } })
    }
};
const AudioOverlay = {
    serializedName: "#Microsoft.Media.AudioOverlay",
    type: {
        name: "Composite",
        className: "AudioOverlay",
        uberParent: "Overlay",
        polymorphicDiscriminator: Overlay.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Overlay.type.modelProperties)
    }
};
const VideoOverlay = {
    serializedName: "#Microsoft.Media.VideoOverlay",
    type: {
        name: "Composite",
        className: "VideoOverlay",
        uberParent: "Overlay",
        polymorphicDiscriminator: Overlay.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Overlay.type.modelProperties), { position: {
                serializedName: "position",
                type: {
                    name: "Composite",
                    className: "Rectangle"
                }
            }, opacity: {
                serializedName: "opacity",
                type: {
                    name: "Number"
                }
            }, cropRectangle: {
                serializedName: "cropRectangle",
                type: {
                    name: "Composite",
                    className: "Rectangle"
                }
            } })
    }
};
const ImageFormat = {
    serializedName: "#Microsoft.Media.ImageFormat",
    type: {
        name: "Composite",
        className: "ImageFormat",
        uberParent: "Format",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign({}, Format.type.modelProperties)
    }
};
const MultiBitrateFormat = {
    serializedName: "#Microsoft.Media.MultiBitrateFormat",
    type: {
        name: "Composite",
        className: "MultiBitrateFormat",
        uberParent: "Format",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Format.type.modelProperties), { outputFiles: {
                serializedName: "outputFiles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OutputFile"
                        }
                    }
                }
            } })
    }
};
const AbsoluteClipTime = {
    serializedName: "#Microsoft.Media.AbsoluteClipTime",
    type: {
        name: "Composite",
        className: "AbsoluteClipTime",
        uberParent: "ClipTime",
        polymorphicDiscriminator: ClipTime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ClipTime.type.modelProperties), { time: {
                serializedName: "time",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            } })
    }
};
const UtcClipTime = {
    serializedName: "#Microsoft.Media.UtcClipTime",
    type: {
        name: "Composite",
        className: "UtcClipTime",
        uberParent: "ClipTime",
        polymorphicDiscriminator: ClipTime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ClipTime.type.modelProperties), { time: {
                serializedName: "time",
                required: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const AccountFilter = {
    type: {
        name: "Composite",
        className: "AccountFilter",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, presentationTimeRange: {
                serializedName: "properties.presentationTimeRange",
                type: {
                    name: "Composite",
                    className: "PresentationTimeRange"
                }
            }, firstQuality: {
                serializedName: "properties.firstQuality",
                type: {
                    name: "Composite",
                    className: "FirstQuality"
                }
            }, tracks: {
                serializedName: "properties.tracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterTrackSelection"
                        }
                    }
                }
            } })
    }
};
const Asset = {
    type: {
        name: "Composite",
        className: "Asset",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, assetId: {
                serializedName: "properties.assetId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, alternateId: {
                serializedName: "properties.alternateId",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, container: {
                serializedName: "properties.container",
                type: {
                    name: "String"
                }
            }, storageAccountName: {
                serializedName: "properties.storageAccountName",
                type: {
                    name: "String"
                }
            }, storageEncryptionFormat: {
                serializedName: "properties.storageEncryptionFormat",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AssetFilter = {
    type: {
        name: "Composite",
        className: "AssetFilter",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, presentationTimeRange: {
                serializedName: "properties.presentationTimeRange",
                type: {
                    name: "Composite",
                    className: "PresentationTimeRange"
                }
            }, firstQuality: {
                serializedName: "properties.firstQuality",
                type: {
                    name: "Composite",
                    className: "FirstQuality"
                }
            }, tracks: {
                serializedName: "properties.tracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterTrackSelection"
                        }
                    }
                }
            } })
    }
};
const AssetTrack = {
    type: {
        name: "Composite",
        className: "AssetTrack",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { track: {
                serializedName: "properties.track",
                type: {
                    name: "Composite",
                    className: "TrackBase"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ContentKeyPolicy = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicy",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, policyId: {
                serializedName: "properties.policyId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, options: {
                serializedName: "properties.options",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyOption"
                        }
                    }
                }
            } })
    }
};
const Transform = {
    type: {
        name: "Composite",
        className: "Transform",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, outputs: {
                serializedName: "properties.outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TransformOutput"
                        }
                    }
                }
            } })
    }
};
const Job = {
    type: {
        name: "Composite",
        className: "Job",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, input: {
                serializedName: "properties.input",
                type: {
                    name: "Composite",
                    className: "JobInput"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, outputs: {
                serializedName: "properties.outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobOutput"
                        }
                    }
                }
            }, priority: {
                serializedName: "properties.priority",
                type: {
                    name: "String"
                }
            }, correlationData: {
                serializedName: "properties.correlationData",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, startTime: {
                serializedName: "properties.startTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }, endTime: {
                serializedName: "properties.endTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const StreamingPolicy = {
    type: {
        name: "Composite",
        className: "StreamingPolicy",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, defaultContentKeyPolicyName: {
                serializedName: "properties.defaultContentKeyPolicyName",
                type: {
                    name: "String"
                }
            }, envelopeEncryption: {
                serializedName: "properties.envelopeEncryption",
                type: {
                    name: "Composite",
                    className: "EnvelopeEncryption"
                }
            }, commonEncryptionCenc: {
                serializedName: "properties.commonEncryptionCenc",
                type: {
                    name: "Composite",
                    className: "CommonEncryptionCenc"
                }
            }, commonEncryptionCbcs: {
                serializedName: "properties.commonEncryptionCbcs",
                type: {
                    name: "Composite",
                    className: "CommonEncryptionCbcs"
                }
            }, noEncryption: {
                serializedName: "properties.noEncryption",
                type: {
                    name: "Composite",
                    className: "NoEncryption"
                }
            } })
    }
};
const StreamingLocator = {
    type: {
        name: "Composite",
        className: "StreamingLocator",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, assetName: {
                serializedName: "properties.assetName",
                type: {
                    name: "String"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, startTime: {
                serializedName: "properties.startTime",
                type: {
                    name: "DateTime"
                }
            }, endTime: {
                serializedName: "properties.endTime",
                type: {
                    name: "DateTime"
                }
            }, streamingLocatorId: {
                serializedName: "properties.streamingLocatorId",
                type: {
                    name: "Uuid"
                }
            }, streamingPolicyName: {
                serializedName: "properties.streamingPolicyName",
                type: {
                    name: "String"
                }
            }, defaultContentKeyPolicyName: {
                serializedName: "properties.defaultContentKeyPolicyName",
                type: {
                    name: "String"
                }
            }, contentKeys: {
                serializedName: "properties.contentKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingLocatorContentKey"
                        }
                    }
                }
            }, alternativeMediaId: {
                serializedName: "properties.alternativeMediaId",
                type: {
                    name: "String"
                }
            }, filters: {
                serializedName: "properties.filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const LiveOutput = {
    type: {
        name: "Composite",
        className: "LiveOutput",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, assetName: {
                serializedName: "properties.assetName",
                type: {
                    name: "String"
                }
            }, archiveWindowLength: {
                serializedName: "properties.archiveWindowLength",
                type: {
                    name: "TimeSpan"
                }
            }, rewindWindowLength: {
                serializedName: "properties.rewindWindowLength",
                type: {
                    name: "TimeSpan"
                }
            }, manifestName: {
                serializedName: "properties.manifestName",
                type: {
                    name: "String"
                }
            }, hls: {
                serializedName: "properties.hls",
                type: {
                    name: "Composite",
                    className: "Hls"
                }
            }, outputSnapTime: {
                serializedName: "properties.outputSnapTime",
                type: {
                    name: "Number"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const MediaService = {
    type: {
        name: "Composite",
        className: "MediaService",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "MediaServiceIdentity"
                }
            }, mediaServiceId: {
                serializedName: "properties.mediaServiceId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, storageAccounts: {
                serializedName: "properties.storageAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageAccount"
                        }
                    }
                }
            }, storageAuthentication: {
                serializedName: "properties.storageAuthentication",
                nullable: true,
                type: {
                    name: "String"
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "AccountEncryption"
                }
            }, keyDelivery: {
                serializedName: "properties.keyDelivery",
                type: {
                    name: "Composite",
                    className: "KeyDelivery"
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                nullable: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            } })
    }
};
const LiveEvent = {
    type: {
        name: "Composite",
        className: "LiveEvent",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, input: {
                serializedName: "properties.input",
                type: {
                    name: "Composite",
                    className: "LiveEventInput"
                }
            }, preview: {
                serializedName: "properties.preview",
                type: {
                    name: "Composite",
                    className: "LiveEventPreview"
                }
            }, encoding: {
                serializedName: "properties.encoding",
                type: {
                    name: "Composite",
                    className: "LiveEventEncoding"
                }
            }, transcriptions: {
                serializedName: "properties.transcriptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEventTranscription"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, crossSiteAccessPolicies: {
                serializedName: "properties.crossSiteAccessPolicies",
                type: {
                    name: "Composite",
                    className: "CrossSiteAccessPolicies"
                }
            }, useStaticHostname: {
                serializedName: "properties.useStaticHostname",
                type: {
                    name: "Boolean"
                }
            }, hostnamePrefix: {
                serializedName: "properties.hostnamePrefix",
                type: {
                    name: "String"
                }
            }, streamOptions: {
                serializedName: "properties.streamOptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const StreamingEndpoint = {
    type: {
        name: "Composite",
        className: "StreamingEndpoint",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ArmStreamingEndpointCurrentSku"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, scaleUnits: {
                serializedName: "properties.scaleUnits",
                type: {
                    name: "Number"
                }
            }, availabilitySetName: {
                serializedName: "properties.availabilitySetName",
                type: {
                    name: "String"
                }
            }, accessControl: {
                serializedName: "properties.accessControl",
                type: {
                    name: "Composite",
                    className: "StreamingEndpointAccessControl"
                }
            }, maxCacheAge: {
                serializedName: "properties.maxCacheAge",
                type: {
                    name: "Number"
                }
            }, customHostNames: {
                serializedName: "properties.customHostNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, hostName: {
                serializedName: "properties.hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, cdnEnabled: {
                serializedName: "properties.cdnEnabled",
                type: {
                    name: "Boolean"
                }
            }, cdnProvider: {
                serializedName: "properties.cdnProvider",
                type: {
                    name: "String"
                }
            }, cdnProfile: {
                serializedName: "properties.cdnProfile",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, crossSiteAccessPolicies: {
                serializedName: "properties.crossSiteAccessPolicies",
                type: {
                    name: "Composite",
                    className: "CrossSiteAccessPolicies"
                }
            }, freeTrialEndTime: {
                serializedName: "properties.freeTrialEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const VideoAnalyzerPreset = {
    serializedName: "#Microsoft.Media.VideoAnalyzerPreset",
    type: {
        name: "Composite",
        className: "VideoAnalyzerPreset",
        uberParent: "AudioAnalyzerPreset",
        polymorphicDiscriminator: AudioAnalyzerPreset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AudioAnalyzerPreset.type.modelProperties), { insightsToExtract: {
                serializedName: "insightsToExtract",
                type: {
                    name: "String"
                }
            } })
    }
};
const JobInputAsset = {
    serializedName: "#Microsoft.Media.JobInputAsset",
    type: {
        name: "Composite",
        className: "JobInputAsset",
        uberParent: "JobInputClip",
        polymorphicDiscriminator: JobInputClip.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobInputClip.type.modelProperties), { assetName: {
                serializedName: "assetName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const JobInputHttp = {
    serializedName: "#Microsoft.Media.JobInputHttp",
    type: {
        name: "Composite",
        className: "JobInputHttp",
        uberParent: "JobInputClip",
        polymorphicDiscriminator: JobInputClip.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobInputClip.type.modelProperties), { baseUri: {
                serializedName: "baseUri",
                type: {
                    name: "String"
                }
            } })
    }
};
const AacAudio = {
    serializedName: "#Microsoft.Media.AacAudio",
    type: {
        name: "Composite",
        className: "AacAudio",
        uberParent: "Audio",
        polymorphicDiscriminator: Audio.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Audio.type.modelProperties), { profile: {
                serializedName: "profile",
                type: {
                    name: "String"
                }
            } })
    }
};
const H265Video = {
    serializedName: "#Microsoft.Media.H265Video",
    type: {
        name: "Composite",
        className: "H265Video",
        uberParent: "Video",
        polymorphicDiscriminator: Video.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Video.type.modelProperties), { sceneChangeDetection: {
                serializedName: "sceneChangeDetection",
                type: {
                    name: "Boolean"
                }
            }, complexity: {
                serializedName: "complexity",
                type: {
                    name: "String"
                }
            }, layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "H265Layer"
                        }
                    }
                }
            } })
    }
};
const Image = {
    serializedName: "#Microsoft.Media.Image",
    type: {
        name: "Composite",
        className: "Image",
        uberParent: "Video",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Video.type.modelProperties), { start: {
                serializedName: "start",
                required: true,
                type: {
                    name: "String"
                }
            }, step: {
                serializedName: "step",
                type: {
                    name: "String"
                }
            }, range: {
                serializedName: "range",
                type: {
                    name: "String"
                }
            } })
    }
};
const H264Video = {
    serializedName: "#Microsoft.Media.H264Video",
    type: {
        name: "Composite",
        className: "H264Video",
        uberParent: "Video",
        polymorphicDiscriminator: Video.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Video.type.modelProperties), { complexity: {
                serializedName: "complexity",
                type: {
                    name: "String"
                }
            }, layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "H264Layer"
                        }
                    }
                }
            }, rateControlMode: {
                serializedName: "rateControlMode",
                type: {
                    name: "String"
                }
            }, sceneChangeDetection: {
                serializedName: "sceneChangeDetection",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const H265Layer = {
    type: {
        name: "Composite",
        className: "H265Layer",
        modelProperties: Object.assign(Object.assign({}, H265VideoLayer.type.modelProperties), { profile: {
                serializedName: "profile",
                type: {
                    name: "String"
                }
            }, level: {
                serializedName: "level",
                type: {
                    name: "String"
                }
            }, bufferWindow: {
                serializedName: "bufferWindow",
                type: {
                    name: "TimeSpan"
                }
            }, crf: {
                serializedName: "crf",
                type: {
                    name: "Number"
                }
            }, referenceFrames: {
                serializedName: "referenceFrames",
                type: {
                    name: "Number"
                }
            } })
    }
};
const H264Layer = {
    type: {
        name: "Composite",
        className: "H264Layer",
        modelProperties: Object.assign(Object.assign({}, VideoLayer.type.modelProperties), { profile: {
                serializedName: "profile",
                type: {
                    name: "String"
                }
            }, level: {
                serializedName: "level",
                type: {
                    name: "String"
                }
            }, bufferWindow: {
                serializedName: "bufferWindow",
                type: {
                    name: "TimeSpan"
                }
            }, crf: {
                serializedName: "crf",
                type: {
                    name: "Number"
                }
            }, referenceFrames: {
                serializedName: "referenceFrames",
                type: {
                    name: "Number"
                }
            }, entropyMode: {
                serializedName: "entropyMode",
                type: {
                    name: "String"
                }
            } })
    }
};
const SelectAudioTrackByAttribute = {
    serializedName: "#Microsoft.Media.SelectAudioTrackByAttribute",
    type: {
        name: "Composite",
        className: "SelectAudioTrackByAttribute",
        uberParent: "AudioTrackDescriptor",
        polymorphicDiscriminator: AudioTrackDescriptor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AudioTrackDescriptor.type.modelProperties), { attribute: {
                serializedName: "attribute",
                required: true,
                type: {
                    name: "String"
                }
            }, filter: {
                serializedName: "filter",
                required: true,
                type: {
                    name: "String"
                }
            }, filterValue: {
                serializedName: "filterValue",
                type: {
                    name: "String"
                }
            } })
    }
};
const SelectAudioTrackById = {
    serializedName: "#Microsoft.Media.SelectAudioTrackById",
    type: {
        name: "Composite",
        className: "SelectAudioTrackById",
        uberParent: "AudioTrackDescriptor",
        polymorphicDiscriminator: AudioTrackDescriptor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AudioTrackDescriptor.type.modelProperties), { trackId: {
                serializedName: "trackId",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const SelectVideoTrackByAttribute = {
    serializedName: "#Microsoft.Media.SelectVideoTrackByAttribute",
    type: {
        name: "Composite",
        className: "SelectVideoTrackByAttribute",
        uberParent: "VideoTrackDescriptor",
        polymorphicDiscriminator: VideoTrackDescriptor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, VideoTrackDescriptor.type.modelProperties), { attribute: {
                serializedName: "attribute",
                required: true,
                type: {
                    name: "String"
                }
            }, filter: {
                serializedName: "filter",
                required: true,
                type: {
                    name: "String"
                }
            }, filterValue: {
                serializedName: "filterValue",
                type: {
                    name: "String"
                }
            } })
    }
};
const SelectVideoTrackById = {
    serializedName: "#Microsoft.Media.SelectVideoTrackById",
    type: {
        name: "Composite",
        className: "SelectVideoTrackById",
        uberParent: "VideoTrackDescriptor",
        polymorphicDiscriminator: VideoTrackDescriptor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, VideoTrackDescriptor.type.modelProperties), { trackId: {
                serializedName: "trackId",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const JpgFormat = {
    serializedName: "#Microsoft.Media.JpgFormat",
    type: {
        name: "Composite",
        className: "JpgFormat",
        uberParent: "ImageFormat",
        polymorphicDiscriminator: ImageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ImageFormat.type.modelProperties)
    }
};
const PngFormat = {
    serializedName: "#Microsoft.Media.PngFormat",
    type: {
        name: "Composite",
        className: "PngFormat",
        uberParent: "ImageFormat",
        polymorphicDiscriminator: ImageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ImageFormat.type.modelProperties)
    }
};
const Mp4Format = {
    serializedName: "#Microsoft.Media.Mp4Format",
    type: {
        name: "Composite",
        className: "Mp4Format",
        uberParent: "MultiBitrateFormat",
        polymorphicDiscriminator: MultiBitrateFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, MultiBitrateFormat.type.modelProperties)
    }
};
const TransportStreamFormat = {
    serializedName: "#Microsoft.Media.TransportStreamFormat",
    type: {
        name: "Composite",
        className: "TransportStreamFormat",
        uberParent: "MultiBitrateFormat",
        polymorphicDiscriminator: MultiBitrateFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, MultiBitrateFormat.type.modelProperties)
    }
};
const JpgImage = {
    serializedName: "#Microsoft.Media.JpgImage",
    type: {
        name: "Composite",
        className: "JpgImage",
        uberParent: "Image",
        polymorphicDiscriminator: Image.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Image.type.modelProperties), { layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JpgLayer"
                        }
                    }
                }
            }, spriteColumn: {
                serializedName: "spriteColumn",
                type: {
                    name: "Number"
                }
            } })
    }
};
const PngImage = {
    serializedName: "#Microsoft.Media.PngImage",
    type: {
        name: "Composite",
        className: "PngImage",
        uberParent: "Image",
        polymorphicDiscriminator: Image.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Image.type.modelProperties), { layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PngLayer"
                        }
                    }
                }
            } })
    }
};
const MediaservicesCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "MediaservicesCreateOrUpdateHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaservicesUpdateHeaders = {
    type: {
        name: "Composite",
        className: "MediaservicesUpdateHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaServicesOperationResultsGetHeaders = {
    type: {
        name: "Composite",
        className: "MediaServicesOperationResultsGetHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TracksCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "TracksCreateOrUpdateHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TracksDeleteHeaders = {
    type: {
        name: "Composite",
        className: "TracksDeleteHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TracksUpdateHeaders = {
    type: {
        name: "Composite",
        className: "TracksUpdateHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TracksUpdateTrackDataHeaders = {
    type: {
        name: "Composite",
        className: "TracksUpdateTrackDataHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResultsGetHeaders = {
    type: {
        name: "Composite",
        className: "OperationResultsGetHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    TrackBase: TrackBase,
    ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
    ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
    Preset: Preset,
    JobInput: JobInput,
    JobOutput: JobOutput,
    ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
    ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
    Codec: Codec,
    TrackDescriptor: TrackDescriptor,
    InputDefinition: InputDefinition,
    Overlay: Overlay,
    Format: Format,
    ClipTime: ClipTime,
    "TrackBase.#Microsoft.Media.AudioTrack": AudioTrack,
    "TrackBase.#Microsoft.Media.VideoTrack": VideoTrack,
    "TrackBase.#Microsoft.Media.TextTrack": TextTrack,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration": ContentKeyPolicyClearKeyConfiguration,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyUnknownConfiguration": ContentKeyPolicyUnknownConfiguration,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyWidevineConfiguration": ContentKeyPolicyWidevineConfiguration,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration": ContentKeyPolicyPlayReadyConfiguration,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration": ContentKeyPolicyFairPlayConfiguration,
    "ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyOpenRestriction": ContentKeyPolicyOpenRestriction,
    "ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyUnknownRestriction": ContentKeyPolicyUnknownRestriction,
    "ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyTokenRestriction": ContentKeyPolicyTokenRestriction,
    "Preset.#Microsoft.Media.FaceDetectorPreset": FaceDetectorPreset,
    "Preset.#Microsoft.Media.AudioAnalyzerPreset": AudioAnalyzerPreset,
    "Preset.#Microsoft.Media.BuiltInStandardEncoderPreset": BuiltInStandardEncoderPreset,
    "Preset.#Microsoft.Media.StandardEncoderPreset": StandardEncoderPreset,
    "JobInput.#Microsoft.Media.JobInputClip": JobInputClip,
    "JobInput.#Microsoft.Media.JobInputs": JobInputs,
    "JobInput.#Microsoft.Media.JobInputSequence": JobInputSequence,
    "JobOutput.#Microsoft.Media.JobOutputAsset": JobOutputAsset,
    "ContentKeyPolicyPlayReadyContentKeyLocation.#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader": ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
    "ContentKeyPolicyPlayReadyContentKeyLocation.#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier": ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
    "ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicySymmetricTokenKey": ContentKeyPolicySymmetricTokenKey,
    "ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicyRsaTokenKey": ContentKeyPolicyRsaTokenKey,
    "ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey": ContentKeyPolicyX509CertificateTokenKey,
    "Codec.#Microsoft.Media.Audio": Audio,
    "Codec.#Microsoft.Media.Video": Video,
    "Codec.#Microsoft.Media.CopyVideo": CopyVideo,
    "Codec.#Microsoft.Media.CopyAudio": CopyAudio,
    "TrackDescriptor.#Microsoft.Media.AudioTrackDescriptor": AudioTrackDescriptor,
    "TrackDescriptor.#Microsoft.Media.VideoTrackDescriptor": VideoTrackDescriptor,
    "InputDefinition.#Microsoft.Media.FromAllInputFile": FromAllInputFile,
    "InputDefinition.#Microsoft.Media.FromEachInputFile": FromEachInputFile,
    "InputDefinition.#Microsoft.Media.InputFile": InputFile,
    "Overlay.#Microsoft.Media.AudioOverlay": AudioOverlay,
    "Overlay.#Microsoft.Media.VideoOverlay": VideoOverlay,
    "Format.#Microsoft.Media.ImageFormat": ImageFormat,
    "Format.#Microsoft.Media.MultiBitrateFormat": MultiBitrateFormat,
    "ClipTime.#Microsoft.Media.AbsoluteClipTime": AbsoluteClipTime,
    "ClipTime.#Microsoft.Media.UtcClipTime": UtcClipTime,
    "AudioAnalyzerPreset.#Microsoft.Media.VideoAnalyzerPreset": VideoAnalyzerPreset,
    "JobInputClip.#Microsoft.Media.JobInputAsset": JobInputAsset,
    "JobInputClip.#Microsoft.Media.JobInputHttp": JobInputHttp,
    "Audio.#Microsoft.Media.AacAudio": AacAudio,
    "Video.#Microsoft.Media.H265Video": H265Video,
    "Video.#Microsoft.Media.Image": Image,
    "Video.#Microsoft.Media.H264Video": H264Video,
    "AudioTrackDescriptor.#Microsoft.Media.SelectAudioTrackByAttribute": SelectAudioTrackByAttribute,
    "AudioTrackDescriptor.#Microsoft.Media.SelectAudioTrackById": SelectAudioTrackById,
    "VideoTrackDescriptor.#Microsoft.Media.SelectVideoTrackByAttribute": SelectVideoTrackByAttribute,
    "VideoTrackDescriptor.#Microsoft.Media.SelectVideoTrackById": SelectVideoTrackById,
    "ImageFormat.#Microsoft.Media.JpgFormat": JpgFormat,
    "ImageFormat.#Microsoft.Media.PngFormat": PngFormat,
    "MultiBitrateFormat.#Microsoft.Media.Mp4Format": Mp4Format,
    "MultiBitrateFormat.#Microsoft.Media.TransportStreamFormat": TransportStreamFormat,
    "Image.#Microsoft.Media.JpgImage": JpgImage,
    "Image.#Microsoft.Media.PngImage": PngImage
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AccountFilterCollection: AccountFilterCollection,
    PresentationTimeRange: PresentationTimeRange,
    FirstQuality: FirstQuality,
    FilterTrackSelection: FilterTrackSelection,
    FilterTrackPropertyCondition: FilterTrackPropertyCondition,
    SystemData: SystemData,
    Resource: Resource,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    OperationCollection: OperationCollection,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    Properties: Properties,
    ServiceSpecification: ServiceSpecification,
    LogSpecification: LogSpecification,
    MetricSpecification: MetricSpecification,
    MetricDimension: MetricDimension,
    MediaServiceCollection: MediaServiceCollection,
    StorageAccount: StorageAccount,
    ResourceIdentity: ResourceIdentity,
    AccountEncryption: AccountEncryption,
    KeyVaultProperties: KeyVaultProperties,
    KeyDelivery: KeyDelivery,
    AccessControl: AccessControl,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    MediaServiceIdentity: MediaServiceIdentity,
    UserAssignedManagedIdentity: UserAssignedManagedIdentity,
    MediaServiceUpdate: MediaServiceUpdate,
    SyncStorageKeysInput: SyncStorageKeysInput,
    ListEdgePoliciesInput: ListEdgePoliciesInput,
    EdgePolicies: EdgePolicies,
    EdgeUsageDataCollectionPolicy: EdgeUsageDataCollectionPolicy,
    EdgeUsageDataEventHub: EdgeUsageDataEventHub,
    PrivateLinkResourceListResult: PrivateLinkResourceListResult,
    PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
    CheckNameAvailabilityInput: CheckNameAvailabilityInput,
    EntityNameAvailabilityCheckOutput: EntityNameAvailabilityCheckOutput,
    MediaServiceOperationStatus: MediaServiceOperationStatus,
    AssetCollection: AssetCollection,
    ListContainerSasInput: ListContainerSasInput,
    AssetContainerSas: AssetContainerSas,
    StorageEncryptedAssetDecryptionData: StorageEncryptedAssetDecryptionData,
    AssetFileEncryptionMetadata: AssetFileEncryptionMetadata,
    ListStreamingLocatorsResponse: ListStreamingLocatorsResponse,
    AssetStreamingLocator: AssetStreamingLocator,
    AssetFilterCollection: AssetFilterCollection,
    AssetTrackCollection: AssetTrackCollection,
    TrackBase: TrackBase,
    AssetTrackOperationStatus: AssetTrackOperationStatus,
    ContentKeyPolicyCollection: ContentKeyPolicyCollection,
    ContentKeyPolicyProperties: ContentKeyPolicyProperties,
    ContentKeyPolicyOption: ContentKeyPolicyOption,
    ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
    ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
    TransformCollection: TransformCollection,
    TransformOutput: TransformOutput,
    Preset: Preset,
    JobCollection: JobCollection,
    JobInput: JobInput,
    JobOutput: JobOutput,
    JobError: JobError,
    JobErrorDetail: JobErrorDetail,
    StreamingPolicyCollection: StreamingPolicyCollection,
    EnvelopeEncryption: EnvelopeEncryption,
    EnabledProtocols: EnabledProtocols,
    TrackSelection: TrackSelection,
    TrackPropertyCondition: TrackPropertyCondition,
    StreamingPolicyContentKeys: StreamingPolicyContentKeys,
    DefaultKey: DefaultKey,
    StreamingPolicyContentKey: StreamingPolicyContentKey,
    CommonEncryptionCenc: CommonEncryptionCenc,
    CencDrmConfiguration: CencDrmConfiguration,
    StreamingPolicyPlayReadyConfiguration: StreamingPolicyPlayReadyConfiguration,
    StreamingPolicyWidevineConfiguration: StreamingPolicyWidevineConfiguration,
    ClearKeyEncryptionConfiguration: ClearKeyEncryptionConfiguration,
    CommonEncryptionCbcs: CommonEncryptionCbcs,
    CbcsDrmConfiguration: CbcsDrmConfiguration,
    StreamingPolicyFairPlayConfiguration: StreamingPolicyFairPlayConfiguration,
    NoEncryption: NoEncryption,
    StreamingLocatorCollection: StreamingLocatorCollection,
    StreamingLocatorContentKey: StreamingLocatorContentKey,
    ListContentKeysResponse: ListContentKeysResponse,
    ListPathsResponse: ListPathsResponse,
    StreamingPath: StreamingPath,
    LiveEventListResult: LiveEventListResult,
    LiveEventInput: LiveEventInput,
    LiveEventInputAccessControl: LiveEventInputAccessControl,
    IPAccessControl: IPAccessControl,
    IPRange: IPRange,
    LiveEventEndpoint: LiveEventEndpoint,
    LiveEventPreview: LiveEventPreview,
    LiveEventPreviewAccessControl: LiveEventPreviewAccessControl,
    LiveEventEncoding: LiveEventEncoding,
    LiveEventTranscription: LiveEventTranscription,
    LiveEventInputTrackSelection: LiveEventInputTrackSelection,
    LiveEventOutputTranscriptionTrack: LiveEventOutputTranscriptionTrack,
    CrossSiteAccessPolicies: CrossSiteAccessPolicies,
    LiveEventActionInput: LiveEventActionInput,
    AsyncOperationResult: AsyncOperationResult,
    LiveOutputListResult: LiveOutputListResult,
    Hls: Hls,
    StreamingEndpointListResult: StreamingEndpointListResult,
    StreamingEndpointAccessControl: StreamingEndpointAccessControl,
    AkamaiAccessControl: AkamaiAccessControl,
    AkamaiSignatureHeaderAuthenticationKey: AkamaiSignatureHeaderAuthenticationKey,
    ArmStreamingEndpointCurrentSku: ArmStreamingEndpointCurrentSku,
    StreamingEndpointSkuInfoListResult: StreamingEndpointSkuInfoListResult,
    ArmStreamingEndpointSkuInfo: ArmStreamingEndpointSkuInfo,
    ArmStreamingEndpointCapacity: ArmStreamingEndpointCapacity,
    ArmStreamingEndpointSku: ArmStreamingEndpointSku,
    StreamingEntityScaleUnit: StreamingEntityScaleUnit,
    HlsSettings: HlsSettings,
    DashSettings: DashSettings,
    ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction,
    ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
    ContentKeyPolicyPlayReadyPlayRight: ContentKeyPolicyPlayReadyPlayRight,
    ContentKeyPolicyTokenClaim: ContentKeyPolicyTokenClaim,
    ContentKeyPolicyPlayReadyLicense: ContentKeyPolicyPlayReadyLicense,
    ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
    ContentKeyPolicyFairPlayOfflineRentalConfiguration: ContentKeyPolicyFairPlayOfflineRentalConfiguration,
    Codec: Codec,
    Layer: Layer,
    TrackDescriptor: TrackDescriptor,
    InputDefinition: InputDefinition,
    Overlay: Overlay,
    Format: Format,
    Deinterlace: Deinterlace,
    Rectangle: Rectangle,
    Filters: Filters,
    OutputFile: OutputFile,
    PresetConfigurations: PresetConfigurations,
    ClipTime: ClipTime,
    ProxyResource: ProxyResource,
    PrivateEndpointConnection: PrivateEndpointConnection,
    TrackedResource: TrackedResource,
    PrivateLinkResource: PrivateLinkResource,
    AudioTrack: AudioTrack,
    VideoTrack: VideoTrack,
    TextTrack: TextTrack,
    ContentKeyPolicyClearKeyConfiguration: ContentKeyPolicyClearKeyConfiguration,
    ContentKeyPolicyUnknownConfiguration: ContentKeyPolicyUnknownConfiguration,
    ContentKeyPolicyWidevineConfiguration: ContentKeyPolicyWidevineConfiguration,
    ContentKeyPolicyPlayReadyConfiguration: ContentKeyPolicyPlayReadyConfiguration,
    ContentKeyPolicyFairPlayConfiguration: ContentKeyPolicyFairPlayConfiguration,
    ContentKeyPolicyOpenRestriction: ContentKeyPolicyOpenRestriction,
    ContentKeyPolicyUnknownRestriction: ContentKeyPolicyUnknownRestriction,
    ContentKeyPolicyTokenRestriction: ContentKeyPolicyTokenRestriction,
    FaceDetectorPreset: FaceDetectorPreset,
    AudioAnalyzerPreset: AudioAnalyzerPreset,
    BuiltInStandardEncoderPreset: BuiltInStandardEncoderPreset,
    StandardEncoderPreset: StandardEncoderPreset,
    JobInputClip: JobInputClip,
    JobInputs: JobInputs,
    JobInputSequence: JobInputSequence,
    JobOutputAsset: JobOutputAsset,
    ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
    ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
    ContentKeyPolicySymmetricTokenKey: ContentKeyPolicySymmetricTokenKey,
    ContentKeyPolicyRsaTokenKey: ContentKeyPolicyRsaTokenKey,
    ContentKeyPolicyX509CertificateTokenKey: ContentKeyPolicyX509CertificateTokenKey,
    Audio: Audio,
    Video: Video,
    CopyVideo: CopyVideo,
    CopyAudio: CopyAudio,
    H265VideoLayer: H265VideoLayer,
    VideoLayer: VideoLayer,
    JpgLayer: JpgLayer,
    PngLayer: PngLayer,
    AudioTrackDescriptor: AudioTrackDescriptor,
    VideoTrackDescriptor: VideoTrackDescriptor,
    FromAllInputFile: FromAllInputFile,
    FromEachInputFile: FromEachInputFile,
    InputFile: InputFile,
    AudioOverlay: AudioOverlay,
    VideoOverlay: VideoOverlay,
    ImageFormat: ImageFormat,
    MultiBitrateFormat: MultiBitrateFormat,
    AbsoluteClipTime: AbsoluteClipTime,
    UtcClipTime: UtcClipTime,
    AccountFilter: AccountFilter,
    Asset: Asset,
    AssetFilter: AssetFilter,
    AssetTrack: AssetTrack,
    ContentKeyPolicy: ContentKeyPolicy,
    Transform: Transform,
    Job: Job,
    StreamingPolicy: StreamingPolicy,
    StreamingLocator: StreamingLocator,
    LiveOutput: LiveOutput,
    MediaService: MediaService,
    LiveEvent: LiveEvent,
    StreamingEndpoint: StreamingEndpoint,
    VideoAnalyzerPreset: VideoAnalyzerPreset,
    JobInputAsset: JobInputAsset,
    JobInputHttp: JobInputHttp,
    AacAudio: AacAudio,
    H265Video: H265Video,
    Image: Image,
    H264Video: H264Video,
    H265Layer: H265Layer,
    H264Layer: H264Layer,
    SelectAudioTrackByAttribute: SelectAudioTrackByAttribute,
    SelectAudioTrackById: SelectAudioTrackById,
    SelectVideoTrackByAttribute: SelectVideoTrackByAttribute,
    SelectVideoTrackById: SelectVideoTrackById,
    JpgFormat: JpgFormat,
    PngFormat: PngFormat,
    Mp4Format: Mp4Format,
    TransportStreamFormat: TransportStreamFormat,
    JpgImage: JpgImage,
    PngImage: PngImage,
    MediaservicesCreateOrUpdateHeaders: MediaservicesCreateOrUpdateHeaders,
    MediaservicesUpdateHeaders: MediaservicesUpdateHeaders,
    MediaServicesOperationResultsGetHeaders: MediaServicesOperationResultsGetHeaders,
    TracksCreateOrUpdateHeaders: TracksCreateOrUpdateHeaders,
    TracksDeleteHeaders: TracksDeleteHeaders,
    TracksUpdateHeaders: TracksUpdateHeaders,
    TracksUpdateTrackDataHeaders: TracksUpdateTrackDataHeaders,
    OperationResultsGetHeaders: OperationResultsGetHeaders,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const accountName = {
    parameterPath: "accountName",
    mapper: {
        serializedName: "accountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const filterName = {
    parameterPath: "filterName",
    mapper: {
        serializedName: "filterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: AccountFilter
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: MediaService
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: MediaServiceUpdate
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: SyncStorageKeysInput
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: ListEdgePoliciesInput
};
const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnection
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: CheckNameAvailabilityInput
};
const locationName = {
    parameterPath: "locationName",
    mapper: {
        serializedName: "locationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
const assetName = {
    parameterPath: "assetName",
    mapper: {
        serializedName: "assetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: Asset
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: ListContainerSasInput
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: AssetFilter
};
const trackName = {
    parameterPath: "trackName",
    mapper: {
        serializedName: "trackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters10 = {
    parameterPath: "parameters",
    mapper: AssetTrack
};
const contentKeyPolicyName = {
    parameterPath: "contentKeyPolicyName",
    mapper: {
        serializedName: "contentKeyPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters11 = {
    parameterPath: "parameters",
    mapper: ContentKeyPolicy
};
const transformName = {
    parameterPath: "transformName",
    mapper: {
        serializedName: "transformName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters12 = {
    parameterPath: "parameters",
    mapper: Transform
};
const jobName = {
    parameterPath: "jobName",
    mapper: {
        serializedName: "jobName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters13 = {
    parameterPath: "parameters",
    mapper: Job
};
const streamingPolicyName = {
    parameterPath: "streamingPolicyName",
    mapper: {
        serializedName: "streamingPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters14 = {
    parameterPath: "parameters",
    mapper: StreamingPolicy
};
const streamingLocatorName = {
    parameterPath: "streamingLocatorName",
    mapper: {
        serializedName: "streamingLocatorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters15 = {
    parameterPath: "parameters",
    mapper: StreamingLocator
};
const liveEventName = {
    parameterPath: "liveEventName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$"),
            MaxLength: 32,
            MinLength: 1
        },
        serializedName: "liveEventName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters16 = {
    parameterPath: "parameters",
    mapper: LiveEvent
};
const autoStart = {
    parameterPath: ["options", "autoStart"],
    mapper: {
        serializedName: "autoStart",
        type: {
            name: "Boolean"
        }
    }
};
const parameters17 = {
    parameterPath: "parameters",
    mapper: LiveEventActionInput
};
const operationId1 = {
    parameterPath: "operationId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const liveOutputName = {
    parameterPath: "liveOutputName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^([a-zA-Z0-9])+(-*[a-zA-Z0-9])*$"),
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "liveOutputName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters18 = {
    parameterPath: "parameters",
    mapper: LiveOutput
};
const streamingEndpointName = {
    parameterPath: "streamingEndpointName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$"),
            MaxLength: 24,
            MinLength: 1
        },
        serializedName: "streamingEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters19 = {
    parameterPath: "parameters",
    mapper: StreamingEndpoint
};
const parameters20 = {
    parameterPath: "parameters",
    mapper: StreamingEntityScaleUnit
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AccountFilters operations. */
class AccountFiltersImpl {
    /**
     * Initialize a new instance of the class AccountFilters class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Account Filters in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List Account Filters in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$f);
    }
    /**
     * Get the details of an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, filterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, filterName, options }, getOperationSpec$i);
    }
    /**
     * Creates or updates an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, filterName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, filterName, parameters, options }, createOrUpdateOperationSpec$7);
    }
    /**
     * Deletes an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, filterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, filterName, options }, deleteOperationSpec$d);
    }
    /**
     * Updates an existing Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName, accountName, filterName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, filterName, parameters, options }, updateOperationSpec$9);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec$b);
    }
}
// Operation Specifications
const serializer$k = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountFilterCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const getOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountFilter
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        filterName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const createOrUpdateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AccountFilter
        },
        201: {
            bodyMapper: AccountFilter
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        filterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const deleteOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        filterName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const updateOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/accountFilters/{filterName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AccountFilter
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        filterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const listNextOperationSpec$b = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AccountFilterCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$k
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the Media Services operations.
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$e);
    }
}
// Operation Specifications
const serializer$j = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$e = {
    path: "/providers/Microsoft.Media/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$j
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Mediaservices operations. */
class MediaservicesImpl {
    /**
     * Initialize a new instance of the class Mediaservices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Media Services accounts in the resource group
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List Media Services accounts in the subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBySubscriptionPagingPage(options);
            }
        };
    }
    listBySubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List Media Services accounts in the resource group
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$d);
    }
    /**
     * Get the details of a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, getOperationSpec$h);
    }
    /**
     * Creates or updates a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, accountName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, parameters, options }, createOrUpdateOperationSpec$6);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, accountName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, accountName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, deleteOperationSpec$c);
    }
    /**
     * Updates an existing Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, accountName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, parameters, options }, updateOperationSpec$8);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an existing Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, accountName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, accountName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    syncStorageKeys(resourceGroupName, accountName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, parameters, options }, syncStorageKeysOperationSpec);
    }
    /**
     * List all the media edge policies associated with the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    listEdgePolicies(resourceGroupName, accountName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, parameters, options }, listEdgePoliciesOperationSpec);
    }
    /**
     * List Media Services accounts in the subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec$a);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer$i = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MediaServiceCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const getOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MediaService
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MediaService,
            headersMapper: MediaservicesCreateOrUpdateHeaders
        },
        201: {
            bodyMapper: MediaService,
            headersMapper: MediaservicesCreateOrUpdateHeaders
        },
        202: {
            bodyMapper: MediaService,
            headersMapper: MediaservicesCreateOrUpdateHeaders
        },
        204: {
            bodyMapper: MediaService,
            headersMapper: MediaservicesCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i
};
const deleteOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const updateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MediaService,
            headersMapper: MediaservicesUpdateHeaders
        },
        201: {
            bodyMapper: MediaService,
            headersMapper: MediaservicesUpdateHeaders
        },
        202: {
            bodyMapper: MediaService,
            headersMapper: MediaservicesUpdateHeaders
        },
        204: {
            bodyMapper: MediaService,
            headersMapper: MediaservicesUpdateHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i
};
const syncStorageKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/syncStorageKeys",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i
};
const listEdgePoliciesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/listEdgePolicies",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EdgePolicies
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Media/mediaservices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MediaServiceCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$i
};
const listNextOperationSpec$a = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MediaServiceCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MediaServiceCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$i
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List supported group IDs.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$c);
    }
    /**
     * Get details of a group ID.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param name
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, name, options }, getOperationSpec$g);
    }
}
// Operation Specifications
const serializer$h = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const getOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/privateLinkResources/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        name
    ],
    headerParameters: [accept],
    serializer: serializer$h
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all private endpoint connections.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$b);
    }
    /**
     * Get the details of a private endpoint connection.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param name
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, name, options }, getOperationSpec$f);
    }
    /**
     * Update an existing private endpoint connection.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, name, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, name, parameters, options }, createOrUpdateOperationSpec$5);
    }
    /**
     * Deletes a private endpoint connection.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param name
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, name, options }, deleteOperationSpec$b);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const getOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/privateEndpointConnections/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        name
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/privateEndpointConnections/{name}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        name
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const deleteOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/privateEndpointConnections/{name}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        name
    ],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Locations operations. */
class LocationsImpl {
    /**
     * Initialize a new instance of the class Locations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Checks whether the Media Service resource name is available.
     * @param locationName Location name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    checkNameAvailability(locationName, parameters, options) {
        return this.client.sendOperationRequest({ locationName, parameters, options }, checkNameAvailabilityOperationSpec);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Media/locations/{locationName}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EntityNameAvailabilityCheckOutput
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        locationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing MediaServicesOperationStatuses operations. */
class MediaServicesOperationStatusesImpl {
    /**
     * Initialize a new instance of the class MediaServicesOperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get media service operation status.
     * @param locationName Location name.
     * @param operationId Operation ID.
     * @param options The options parameters.
     */
    get(locationName, operationId, options) {
        return this.client.sendOperationRequest({ locationName, operationId, options }, getOperationSpec$e);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Media/locations/{locationName}/mediaServicesOperationStatuses/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MediaServiceOperationStatus
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        locationName,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing MediaServicesOperationResults operations. */
class MediaServicesOperationResultsImpl {
    /**
     * Initialize a new instance of the class MediaServicesOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get media service operation result.
     * @param locationName Location name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(locationName, operationId, options) {
        return this.client.sendOperationRequest({ locationName, operationId, options }, getOperationSpec$d);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Media/locations/{locationName}/mediaServicesOperationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MediaService
        },
        202: {
            headersMapper: MediaServicesOperationResultsGetHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        locationName,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Assets operations. */
class AssetsImpl {
    /**
     * Initialize a new instance of the class Assets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Assets in the Media Services account with optional filtering and ordering
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List Assets in the Media Services account with optional filtering and ordering
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$a);
    }
    /**
     * Get the details of an Asset in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, assetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, options }, getOperationSpec$c);
    }
    /**
     * Creates or updates an Asset in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, assetName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, parameters, options }, createOrUpdateOperationSpec$4);
    }
    /**
     * Deletes an Asset in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, assetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, options }, deleteOperationSpec$a);
    }
    /**
     * Updates an existing Asset in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName, accountName, assetName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, parameters, options }, updateOperationSpec$7);
    }
    /**
     * Lists storage container URLs with shared access signatures (SAS) for uploading and downloading Asset
     * content. The signatures are derived from the storage account keys.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    listContainerSas(resourceGroupName, accountName, assetName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, parameters, options }, listContainerSasOperationSpec);
    }
    /**
     * Gets the Asset storage encryption keys used to decrypt content created by version 2 of the Media
     * Services API
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    getEncryptionKey(resourceGroupName, accountName, assetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, options }, getEncryptionKeyOperationSpec);
    }
    /**
     * Lists Streaming Locators which are associated with this asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    listStreamingLocators(resourceGroupName, accountName, assetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, options }, listStreamingLocatorsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Asset
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Asset
        },
        201: {
            bodyMapper: Asset
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const deleteOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const updateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Asset
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const listContainerSasOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/listContainerSas",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AssetContainerSas
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const getEncryptionKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/getEncryptionKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: StorageEncryptedAssetDecryptionData
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listStreamingLocatorsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/listStreamingLocators",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ListStreamingLocatorsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AssetFilters operations. */
class AssetFiltersImpl {
    /**
     * Initialize a new instance of the class AssetFilters class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Asset Filters associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, assetName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, assetName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, assetName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, assetName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, assetName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, assetName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, assetName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, assetName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List Asset Filters associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, assetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, options }, listOperationSpec$9);
    }
    /**
     * Get the details of an Asset Filter associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param filterName The Asset Filter name
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, assetName, filterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, filterName, options }, getOperationSpec$b);
    }
    /**
     * Creates or updates an Asset Filter associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param filterName The Asset Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, assetName, filterName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            assetName,
            filterName,
            parameters,
            options
        }, createOrUpdateOperationSpec$3);
    }
    /**
     * Deletes an Asset Filter associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param filterName The Asset Filter name
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, assetName, filterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, filterName, options }, deleteOperationSpec$9);
    }
    /**
     * Updates an existing Asset Filter associated with the specified Asset.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param filterName The Asset Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName, accountName, assetName, filterName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            assetName,
            filterName,
            parameters,
            options
        }, updateOperationSpec$6);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, assetName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, nextLink, options }, listNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetFilterCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetFilter
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        filterName,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AssetFilter
        },
        201: {
            bodyMapper: AssetFilter
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        filterName,
        assetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        filterName,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const updateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AssetFilter
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        filterName,
        assetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetFilterCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Tracks operations. */
class TracksImpl {
    /**
     * Initialize a new instance of the class Tracks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the Tracks in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, assetName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, assetName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, assetName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, assetName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, assetName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, accountName, assetName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, assetName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the Tracks in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, assetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, options }, listOperationSpec$8);
    }
    /**
     * Get the details of a Track in the Asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, assetName, trackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, assetName, trackName, options }, getOperationSpec$a);
    }
    /**
     * Create or update a Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, accountName, assetName, trackName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                assetName,
                trackName,
                parameters,
                options
            }, createOrUpdateOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, accountName, assetName, trackName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, accountName, assetName, trackName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, assetName, trackName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, assetName, trackName, options }, deleteOperationSpec$8);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, assetName, trackName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, assetName, trackName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an existing Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, accountName, assetName, trackName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                assetName,
                trackName,
                parameters,
                options
            }, updateOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an existing Track in the asset
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, accountName, assetName, trackName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, accountName, assetName, trackName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the track data. Call this API after any changes are made to the track data stored in the
     * asset container. For example, you have modified the WebVTT captions file in the Azure blob storage
     * container for the asset, viewers will not see the new version of the captions unless this API is
     * called. Note, the changes may not be reflected immediately. CDN cache may also need to be purged if
     * applicable.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    beginUpdateTrackData(resourceGroupName, accountName, assetName, trackName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, assetName, trackName, options }, updateTrackDataOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the track data. Call this API after any changes are made to the track data stored in the
     * asset container. For example, you have modified the WebVTT captions file in the Azure blob storage
     * container for the asset, viewers will not see the new version of the captions unless this API is
     * called. Note, the changes may not be reflected immediately. CDN cache may also need to be purged if
     * applicable.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param options The options parameters.
     */
    beginUpdateTrackDataAndWait(resourceGroupName, accountName, assetName, trackName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateTrackData(resourceGroupName, accountName, assetName, trackName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetTrackCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetTrack
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName,
        trackName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AssetTrack,
            headersMapper: TracksCreateOrUpdateHeaders
        },
        201: {
            bodyMapper: AssetTrack,
            headersMapper: TracksCreateOrUpdateHeaders
        },
        202: {
            bodyMapper: AssetTrack,
            headersMapper: TracksCreateOrUpdateHeaders
        },
        204: {
            bodyMapper: AssetTrack,
            headersMapper: TracksCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName,
        trackName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: TracksDeleteHeaders
        },
        201: {
            headersMapper: TracksDeleteHeaders
        },
        202: {
            headersMapper: TracksDeleteHeaders
        },
        204: {
            headersMapper: TracksDeleteHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName,
        trackName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const updateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AssetTrack,
            headersMapper: TracksUpdateHeaders
        },
        201: {
            bodyMapper: AssetTrack,
            headersMapper: TracksUpdateHeaders
        },
        202: {
            bodyMapper: AssetTrack,
            headersMapper: TracksUpdateHeaders
        },
        204: {
            bodyMapper: AssetTrack,
            headersMapper: TracksUpdateHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName,
        trackName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const updateTrackDataOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}/updateTrackData",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: TracksUpdateTrackDataHeaders
        },
        201: {
            headersMapper: TracksUpdateTrackDataHeaders
        },
        202: {
            headersMapper: TracksUpdateTrackDataHeaders
        },
        204: {
            headersMapper: TracksUpdateTrackDataHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        assetName,
        trackName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationStatuses operations. */
class OperationStatusesImpl {
    /**
     * Initialize a new instance of the class OperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get asset track operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, assetName, trackName, operationId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            assetName,
            trackName,
            operationId,
            options
        }, getOperationSpec$9);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}/operationStatuses/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetTrackOperationStatus
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        operationId,
        assetName,
        trackName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationResults operations. */
class OperationResultsImpl {
    /**
     * Initialize a new instance of the class OperationResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get asset track operation result.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param assetName The Asset name.
     * @param trackName The Asset Track name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, assetName, trackName, operationId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            assetName,
            trackName,
            operationId,
            options
        }, getOperationSpec$8);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/tracks/{trackName}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssetTrack
        },
        202: {
            headersMapper: OperationResultsGetHeaders
        },
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        operationId,
        assetName,
        trackName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ContentKeyPolicies operations. */
class ContentKeyPoliciesImpl {
    /**
     * Initialize a new instance of the class ContentKeyPolicies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the Content Key Policies in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the Content Key Policies in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$7);
    }
    /**
     * Get the details of a Content Key Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, contentKeyPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, contentKeyPolicyName, options }, getOperationSpec$7);
    }
    /**
     * Create or update a Content Key Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, contentKeyPolicyName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            contentKeyPolicyName,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Deletes a Content Key Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, contentKeyPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, contentKeyPolicyName, options }, deleteOperationSpec$7);
    }
    /**
     * Updates an existing Content Key Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName, accountName, contentKeyPolicyName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            contentKeyPolicyName,
            parameters,
            options
        }, updateOperationSpec$4);
    }
    /**
     * Get a Content Key Policy including secret values
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param contentKeyPolicyName The Content Key Policy name.
     * @param options The options parameters.
     */
    getPolicyPropertiesWithSecrets(resourceGroupName, accountName, contentKeyPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, contentKeyPolicyName, options }, getPolicyPropertiesWithSecretsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContentKeyPolicyCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContentKeyPolicy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        contentKeyPolicyName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ContentKeyPolicy
        },
        201: {
            bodyMapper: ContentKeyPolicy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        contentKeyPolicyName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        contentKeyPolicyName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const updateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ContentKeyPolicy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        contentKeyPolicyName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const getPolicyPropertiesWithSecretsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/contentKeyPolicies/{contentKeyPolicyName}/getPolicyPropertiesWithSecrets",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ContentKeyPolicyProperties
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        contentKeyPolicyName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContentKeyPolicyCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Transforms operations. */
class TransformsImpl {
    /**
     * Initialize a new instance of the class Transforms class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the Transforms in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the Transforms in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$6);
    }
    /**
     * Gets a Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, transformName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, options }, getOperationSpec$6);
    }
    /**
     * Creates or updates a new Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, accountName, transformName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, transformName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, options }, deleteOperationSpec$6);
    }
    /**
     * Updates a Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName, accountName, transformName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, parameters, options }, updateOperationSpec$3);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TransformCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion1,
        filter,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Transform
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Transform
        },
        201: {
            bodyMapper: Transform
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters12,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Transform
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters12,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TransformCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion1,
        filter,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Jobs operations. */
class JobsImpl {
    /**
     * Initialize a new instance of the class Jobs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the Jobs for the Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, transformName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, transformName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, transformName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, transformName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, transformName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, transformName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, transformName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, transformName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the Jobs for the Transform.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, transformName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, options }, listOperationSpec$5);
    }
    /**
     * Gets a Job.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, transformName, jobName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, jobName, options }, getOperationSpec$5);
    }
    /**
     * Creates a Job.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    create(resourceGroupName, accountName, transformName, jobName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            transformName,
            jobName,
            parameters,
            options
        }, createOperationSpec$5);
    }
    /**
     * Deletes a Job.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, transformName, jobName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, jobName, options }, deleteOperationSpec$5);
    }
    /**
     * Update is only supported for description and priority. Updating Priority will take effect when the
     * Job state is Queued or Scheduled and depending on the timing the priority update may be ignored.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName, accountName, transformName, jobName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            transformName,
            jobName,
            parameters,
            options
        }, updateOperationSpec$2);
    }
    /**
     * Cancel a Job.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param jobName The Job name.
     * @param options The options parameters.
     */
    cancelJob(resourceGroupName, accountName, transformName, jobName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, jobName, options }, cancelJobOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param transformName The Transform name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, transformName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, transformName, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion1,
        filter,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Job
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName,
        jobName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Job
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters13,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName,
        jobName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName,
        jobName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Job
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters13,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName,
        jobName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const cancelJobOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}/cancelJob",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        transformName,
        jobName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion1,
        filter,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink,
        transformName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing StreamingPolicies operations. */
class StreamingPoliciesImpl {
    /**
     * Initialize a new instance of the class StreamingPolicies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the Streaming Policies in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the Streaming Policies in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$4);
    }
    /**
     * Get the details of a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, streamingPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, streamingPolicyName, options }, getOperationSpec$4);
    }
    /**
     * Create a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    create(resourceGroupName, accountName, streamingPolicyName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            streamingPolicyName,
            parameters,
            options
        }, createOperationSpec$4);
    }
    /**
     * Deletes a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, streamingPolicyName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, streamingPolicyName, options }, deleteOperationSpec$4);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingPolicyCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingPolicy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingPolicyName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: StreamingPolicy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters14,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingPolicyName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingPolicies/{streamingPolicyName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingPolicyName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingPolicyCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing StreamingLocators operations. */
class StreamingLocatorsImpl {
    /**
     * Initialize a new instance of the class StreamingLocators class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the Streaming Locators in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the Streaming Locators in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$3);
    }
    /**
     * Get the details of a Streaming Locator in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, streamingLocatorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, streamingLocatorName, options }, getOperationSpec$3);
    }
    /**
     * Create a Streaming Locator in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    create(resourceGroupName, accountName, streamingLocatorName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            streamingLocatorName,
            parameters,
            options
        }, createOperationSpec$3);
    }
    /**
     * Deletes a Streaming Locator in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, accountName, streamingLocatorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, streamingLocatorName, options }, deleteOperationSpec$3);
    }
    /**
     * List Content Keys used by this Streaming Locator
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param options The options parameters.
     */
    listContentKeys(resourceGroupName, accountName, streamingLocatorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, streamingLocatorName, options }, listContentKeysOperationSpec);
    }
    /**
     * List Paths supported by this Streaming Locator
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingLocatorName The Streaming Locator name.
     * @param options The options parameters.
     */
    listPaths(resourceGroupName, accountName, streamingLocatorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, streamingLocatorName, options }, listPathsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingLocatorCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingLocator
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingLocatorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: StreamingLocator
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters15,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingLocatorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingLocatorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listContentKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listContentKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ListContentKeysResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingLocatorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listPathsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listPaths",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ListPathsResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingLocatorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingLocatorCollection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        orderby
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing LiveEvents operations. */
class LiveEventsImpl {
    /**
     * Initialize a new instance of the class LiveEvents class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the live events in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the live events in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec$2);
    }
    /**
     * Gets properties of a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, liveEventName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, liveEventName, options }, getOperationSpec$2);
    }
    /**
     * Creates a new live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters Live event properties needed for creation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, accountName, liveEventName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, liveEventName, parameters, options }, createOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters Live event properties needed for creation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, accountName, liveEventName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, accountName, liveEventName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates settings on an existing live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters Live event properties needed for patch.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, accountName, liveEventName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, liveEventName, parameters, options }, updateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates settings on an existing live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters Live event properties needed for patch.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, accountName, liveEventName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, accountName, liveEventName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, liveEventName, options }, deleteOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, liveEventName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * A live event is in StandBy state after allocation completes, and is ready to start.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginAllocate(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, liveEventName, options }, allocateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * A live event is in StandBy state after allocation completes, and is ready to start.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginAllocateAndWait(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginAllocate(resourceGroupName, accountName, liveEventName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * A live event in Stopped or StandBy state will be in Running state after the start operation
     * completes.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, liveEventName, options }, startOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * A live event in Stopped or StandBy state will be in Running state after the start operation
     * completes.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, accountName, liveEventName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stops a running live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters LiveEvent stop parameters
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, accountName, liveEventName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, liveEventName, parameters, options }, stopOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stops a running live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param parameters LiveEvent stop parameters
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, accountName, liveEventName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, accountName, liveEventName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Resets an existing live event. All live outputs for the live event are deleted and the live event is
     * stopped and will be started again. All assets used by the live outputs and streaming locators
     * created on these assets are unaffected.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginReset(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, liveEventName, options }, resetOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Resets an existing live event. All live outputs for the live event are deleted and the live event is
     * stopped and will be started again. All assets used by the live outputs and streaming locators
     * created on these assets are unaffected.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    beginResetAndWait(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginReset(resourceGroupName, accountName, liveEventName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a live event operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    asyncOperation(resourceGroupName, accountName, operationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, operationId, options }, asyncOperationOperationSpec$2);
    }
    /**
     * Get a live event operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    operationLocation(resourceGroupName, accountName, liveEventName, operationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, liveEventName, operationId, options }, operationLocationOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LiveEventListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LiveEvent
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LiveEvent
        },
        201: {
            bodyMapper: LiveEvent
        },
        202: {
            bodyMapper: LiveEvent
        },
        204: {
            bodyMapper: LiveEvent
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters16,
    queryParameters: [apiVersion, autoStart],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: LiveEvent
        },
        201: {
            bodyMapper: LiveEvent
        },
        202: {
            bodyMapper: LiveEvent
        },
        204: {
            bodyMapper: LiveEvent
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters16,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const allocateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/allocate",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const startOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const stopOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters17,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const resetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/reset",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const asyncOperationOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEventOperations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AsyncOperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        operationId1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const operationLocationOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/operationLocations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LiveEvent
        },
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName,
        operationId1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LiveEventListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing LiveOutputs operations. */
class LiveOutputsImpl {
    /**
     * Initialize a new instance of the class LiveOutputs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the live outputs of a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, liveEventName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, liveEventName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, liveEventName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, liveEventName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, liveEventName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, liveEventName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, liveEventName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the live outputs of a live event.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, liveEventName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, liveEventName, options }, listOperationSpec$1);
    }
    /**
     * Gets a live output.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, liveEventName, liveOutputName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            liveEventName,
            liveOutputName,
            options
        }, getOperationSpec$1);
    }
    /**
     * Creates a new live output.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param parameters Live Output properties needed for creation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, accountName, liveEventName, liveOutputName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                liveEventName,
                liveOutputName,
                parameters,
                options
            }, createOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new live output.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param parameters Live Output properties needed for creation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, accountName, liveEventName, liveOutputName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, accountName, liveEventName, liveOutputName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a live output. Deleting a live output does not delete the asset the live output is writing
     * to.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, liveEventName, liveOutputName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                liveEventName,
                liveOutputName,
                options
            }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a live output. Deleting a live output does not delete the asset the live output is writing
     * to.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, liveEventName, liveOutputName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, liveEventName, liveOutputName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a Live Output operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    asyncOperation(resourceGroupName, accountName, operationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, operationId, options }, asyncOperationOperationSpec$1);
    }
    /**
     * Get a Live Output operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param liveOutputName The name of the live output.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    operationLocation(resourceGroupName, accountName, liveEventName, liveOutputName, operationId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            liveEventName,
            liveOutputName,
            operationId,
            options
        }, operationLocationOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param liveEventName The name of the live event, maximum length is 32.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, liveEventName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, liveEventName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LiveOutputListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LiveOutput
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName,
        liveOutputName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LiveOutput
        },
        201: {
            bodyMapper: LiveOutput
        },
        202: {
            bodyMapper: LiveOutput
        },
        204: {
            bodyMapper: LiveOutput
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters18,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName,
        liveOutputName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName,
        liveOutputName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const asyncOperationOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveOutputOperations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AsyncOperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        operationId1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const operationLocationOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/liveEvents/{liveEventName}/liveOutputs/{liveOutputName}/operationLocations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LiveOutput
        },
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        liveEventName,
        operationId1,
        liveOutputName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LiveOutputListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink,
        liveEventName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing StreamingEndpoints operations. */
class StreamingEndpointsImpl {
    /**
     * Initialize a new instance of the class StreamingEndpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the streaming endpoints in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName, accountName, options) {
        const iter = this.listPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, accountName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, accountName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.odataNextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, accountName, continuationToken, options));
                continuationToken = result.odataNextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, accountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, accountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the streaming endpoints in the account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listOperationSpec);
    }
    /**
     * Gets a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    get(resourceGroupName, accountName, streamingEndpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, streamingEndpointName, options }, getOperationSpec);
    }
    /**
     * Creates a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint properties needed for creation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, accountName, streamingEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                streamingEndpointName,
                parameters,
                options
            }, createOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint properties needed for creation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, accountName, streamingEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, accountName, streamingEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint properties needed for creation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, accountName, streamingEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                streamingEndpointName,
                parameters,
                options
            }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint properties needed for creation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, accountName, streamingEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, accountName, streamingEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, accountName, streamingEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, streamingEndpointName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, accountName, streamingEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, accountName, streamingEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List streaming endpoint supported skus.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    skus(resourceGroupName, accountName, streamingEndpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, streamingEndpointName, options }, skusOperationSpec);
    }
    /**
     * Starts an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, accountName, streamingEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, streamingEndpointName, options }, startOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, accountName, streamingEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, accountName, streamingEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stops an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, accountName, streamingEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, accountName, streamingEndpointName, options }, stopOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stops an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, accountName, streamingEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, accountName, streamingEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Scales an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint scale parameters
     * @param options The options parameters.
     */
    beginScale(resourceGroupName, accountName, streamingEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                accountName,
                streamingEndpointName,
                parameters,
                options
            }, scaleOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Scales an existing streaming endpoint.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param parameters Streaming endpoint scale parameters
     * @param options The options parameters.
     */
    beginScaleAndWait(resourceGroupName, accountName, streamingEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginScale(resourceGroupName, accountName, streamingEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a streaming endpoint operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    asyncOperation(resourceGroupName, accountName, operationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, operationId, options }, asyncOperationOperationSpec);
    }
    /**
     * Get a streaming endpoint operation status.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    operationLocation(resourceGroupName, accountName, streamingEndpointName, operationId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            accountName,
            streamingEndpointName,
            operationId,
            options
        }, operationLocationOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, accountName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingEndpointListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingEndpoint
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingEndpointName
    ],
    headerParameters: [accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: StreamingEndpoint
        },
        201: {
            bodyMapper: StreamingEndpoint
        },
        202: {
            bodyMapper: StreamingEndpoint
        },
        204: {
            bodyMapper: StreamingEndpoint
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters19,
    queryParameters: [apiVersion, autoStart],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: StreamingEndpoint
        },
        201: {
            bodyMapper: StreamingEndpoint
        },
        202: {
            bodyMapper: StreamingEndpoint
        },
        204: {
            bodyMapper: StreamingEndpoint
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters19,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingEndpointName
    ],
    headerParameters: [accept],
    serializer
};
const skusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingEndpointSkuInfoListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingEndpointName
    ],
    headerParameters: [accept],
    serializer
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingEndpointName
    ],
    headerParameters: [accept],
    serializer
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingEndpointName
    ],
    headerParameters: [accept],
    serializer
};
const scaleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/scale",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters20,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        streamingEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const asyncOperationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpointOperations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AsyncOperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        operationId1
    ],
    headerParameters: [accept],
    serializer
};
const operationLocationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/operationLocations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingEndpoint
        },
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        operationId1,
        streamingEndpointName
    ],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StreamingEndpointListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        accountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AzureMediaServices extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureMediaServices class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-mediaservices/13.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: `${optionsWithDefaults.credentialScopes}`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.accountFilters = new AccountFiltersImpl(this);
        this.operations = new OperationsImpl(this);
        this.mediaservices = new MediaservicesImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.locations = new LocationsImpl(this);
        this.mediaServicesOperationStatuses = new MediaServicesOperationStatusesImpl(this);
        this.mediaServicesOperationResults = new MediaServicesOperationResultsImpl(this);
        this.assets = new AssetsImpl(this);
        this.assetFilters = new AssetFiltersImpl(this);
        this.tracks = new TracksImpl(this);
        this.operationStatuses = new OperationStatusesImpl(this);
        this.operationResults = new OperationResultsImpl(this);
        this.contentKeyPolicies = new ContentKeyPoliciesImpl(this);
        this.transforms = new TransformsImpl(this);
        this.jobs = new JobsImpl(this);
        this.streamingPolicies = new StreamingPoliciesImpl(this);
        this.streamingLocators = new StreamingLocatorsImpl(this);
        this.liveEvents = new LiveEventsImpl(this);
        this.liveOutputs = new LiveOutputsImpl(this);
        this.streamingEndpoints = new StreamingEndpointsImpl(this);
    }
}

exports.AzureMediaServices = AzureMediaServices;
//# sourceMappingURL=index.js.map
