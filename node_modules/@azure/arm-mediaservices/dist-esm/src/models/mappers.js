/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
export const AccountFilterCollection = {
    type: {
        name: "Composite",
        className: "AccountFilterCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AccountFilter"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PresentationTimeRange = {
    type: {
        name: "Composite",
        className: "PresentationTimeRange",
        modelProperties: {
            startTimestamp: {
                serializedName: "startTimestamp",
                type: {
                    name: "Number"
                }
            },
            endTimestamp: {
                serializedName: "endTimestamp",
                type: {
                    name: "Number"
                }
            },
            presentationWindowDuration: {
                serializedName: "presentationWindowDuration",
                type: {
                    name: "Number"
                }
            },
            liveBackoffDuration: {
                serializedName: "liveBackoffDuration",
                type: {
                    name: "Number"
                }
            },
            timescale: {
                serializedName: "timescale",
                type: {
                    name: "Number"
                }
            },
            forceEndTimestamp: {
                serializedName: "forceEndTimestamp",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const FirstQuality = {
    type: {
        name: "Composite",
        className: "FirstQuality",
        modelProperties: {
            bitrate: {
                serializedName: "bitrate",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const FilterTrackSelection = {
    type: {
        name: "Composite",
        className: "FilterTrackSelection",
        modelProperties: {
            trackSelections: {
                serializedName: "trackSelections",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterTrackPropertyCondition"
                        }
                    }
                }
            }
        }
    }
};
export const FilterTrackPropertyCondition = {
    type: {
        name: "Composite",
        className: "FilterTrackPropertyCondition",
        modelProperties: {
            property: {
                serializedName: "property",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
export const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
export const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const OperationCollection = {
    type: {
        name: "Composite",
        className: "OperationCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
export const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Properties"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            actionType: {
                serializedName: "actionType",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Properties = {
    type: {
        name: "Composite",
        className: "Properties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ServiceSpecification"
                }
            }
        }
    }
};
export const ServiceSpecification = {
    type: {
        name: "Composite",
        className: "ServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
export const LogSpecification = {
    type: {
        name: "Composite",
        className: "LogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MetricSpecification = {
    type: {
        name: "Composite",
        className: "MetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lockAggregationType: {
                serializedName: "lockAggregationType",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            supportedAggregationTypes: {
                serializedName: "supportedAggregationTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            dimensions: {
                serializedName: "dimensions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricDimension"
                        }
                    }
                }
            },
            enableRegionalMdmAccount: {
                serializedName: "enableRegionalMdmAccount",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            sourceMdmAccount: {
                serializedName: "sourceMdmAccount",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sourceMdmNamespace: {
                serializedName: "sourceMdmNamespace",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedTimeGrainTypes: {
                serializedName: "supportedTimeGrainTypes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const MetricDimension = {
    type: {
        name: "Composite",
        className: "MetricDimension",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            toBeExportedForShoebox: {
                serializedName: "toBeExportedForShoebox",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const MediaServiceCollection = {
    type: {
        name: "Composite",
        className: "MediaServiceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MediaService"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StorageAccount = {
    type: {
        name: "Composite",
        className: "StorageAccount",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ResourceIdentity = {
    type: {
        name: "Composite",
        className: "ResourceIdentity",
        modelProperties: {
            userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            },
            useSystemAssignedIdentity: {
                serializedName: "useSystemAssignedIdentity",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const AccountEncryption = {
    type: {
        name: "Composite",
        className: "AccountEncryption",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            keyVaultProperties: {
                serializedName: "keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyIdentifier: {
                serializedName: "keyIdentifier",
                type: {
                    name: "String"
                }
            },
            currentKeyIdentifier: {
                serializedName: "currentKeyIdentifier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const KeyDelivery = {
    type: {
        name: "Composite",
        className: "KeyDelivery",
        modelProperties: {
            accessControl: {
                serializedName: "accessControl",
                type: {
                    name: "Composite",
                    className: "AccessControl"
                }
            }
        }
    }
};
export const AccessControl = {
    type: {
        name: "Composite",
        className: "AccessControl",
        modelProperties: {
            defaultAction: {
                serializedName: "defaultAction",
                type: {
                    name: "String"
                }
            },
            ipAllowList: {
                serializedName: "ipAllowList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MediaServiceIdentity = {
    type: {
        name: "Composite",
        className: "MediaServiceIdentity",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "UserAssignedManagedIdentity"
                        }
                    }
                }
            }
        }
    }
};
export const UserAssignedManagedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedManagedIdentity",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
export const MediaServiceUpdate = {
    type: {
        name: "Composite",
        className: "MediaServiceUpdate",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "MediaServiceIdentity"
                }
            },
            mediaServiceId: {
                serializedName: "properties.mediaServiceId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            storageAccounts: {
                serializedName: "properties.storageAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageAccount"
                        }
                    }
                }
            },
            storageAuthentication: {
                serializedName: "properties.storageAuthentication",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "AccountEncryption"
                }
            },
            keyDelivery: {
                serializedName: "properties.keyDelivery",
                type: {
                    name: "Composite",
                    className: "KeyDelivery"
                }
            },
            publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
export const SyncStorageKeysInput = {
    type: {
        name: "Composite",
        className: "SyncStorageKeysInput",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ListEdgePoliciesInput = {
    type: {
        name: "Composite",
        className: "ListEdgePoliciesInput",
        modelProperties: {
            deviceId: {
                serializedName: "deviceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EdgePolicies = {
    type: {
        name: "Composite",
        className: "EdgePolicies",
        modelProperties: {
            usageDataCollectionPolicy: {
                serializedName: "usageDataCollectionPolicy",
                type: {
                    name: "Composite",
                    className: "EdgeUsageDataCollectionPolicy"
                }
            }
        }
    }
};
export const EdgeUsageDataCollectionPolicy = {
    type: {
        name: "Composite",
        className: "EdgeUsageDataCollectionPolicy",
        modelProperties: {
            dataCollectionFrequency: {
                serializedName: "dataCollectionFrequency",
                type: {
                    name: "String"
                }
            },
            dataReportingFrequency: {
                serializedName: "dataReportingFrequency",
                type: {
                    name: "String"
                }
            },
            maxAllowedUnreportedUsageDuration: {
                serializedName: "maxAllowedUnreportedUsageDuration",
                type: {
                    name: "String"
                }
            },
            eventHubDetails: {
                serializedName: "eventHubDetails",
                type: {
                    name: "Composite",
                    className: "EdgeUsageDataEventHub"
                }
            }
        }
    }
};
export const EdgeUsageDataEventHub = {
    type: {
        name: "Composite",
        className: "EdgeUsageDataEventHub",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            namespace: {
                serializedName: "namespace",
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
export const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
export const CheckNameAvailabilityInput = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityInput",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EntityNameAvailabilityCheckOutput = {
    type: {
        name: "Composite",
        className: "EntityNameAvailabilityCheckOutput",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MediaServiceOperationStatus = {
    type: {
        name: "Composite",
        className: "MediaServiceOperationStatus",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
export const AssetCollection = {
    type: {
        name: "Composite",
        className: "AssetCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Asset"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ListContainerSasInput = {
    type: {
        name: "Composite",
        className: "ListContainerSasInput",
        modelProperties: {
            permissions: {
                serializedName: "permissions",
                type: {
                    name: "String"
                }
            },
            expiryTime: {
                serializedName: "expiryTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const AssetContainerSas = {
    type: {
        name: "Composite",
        className: "AssetContainerSas",
        modelProperties: {
            assetContainerSasUrls: {
                serializedName: "assetContainerSasUrls",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const StorageEncryptedAssetDecryptionData = {
    type: {
        name: "Composite",
        className: "StorageEncryptedAssetDecryptionData",
        modelProperties: {
            key: {
                serializedName: "key",
                type: {
                    name: "ByteArray"
                }
            },
            assetFileEncryptionMetadata: {
                serializedName: "assetFileEncryptionMetadata",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssetFileEncryptionMetadata"
                        }
                    }
                }
            }
        }
    }
};
export const AssetFileEncryptionMetadata = {
    type: {
        name: "Composite",
        className: "AssetFileEncryptionMetadata",
        modelProperties: {
            initializationVector: {
                serializedName: "initializationVector",
                type: {
                    name: "String"
                }
            },
            assetFileName: {
                serializedName: "assetFileName",
                type: {
                    name: "String"
                }
            },
            assetFileId: {
                serializedName: "assetFileId",
                required: true,
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
export const ListStreamingLocatorsResponse = {
    type: {
        name: "Composite",
        className: "ListStreamingLocatorsResponse",
        modelProperties: {
            streamingLocators: {
                serializedName: "streamingLocators",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssetStreamingLocator"
                        }
                    }
                }
            }
        }
    }
};
export const AssetStreamingLocator = {
    type: {
        name: "Composite",
        className: "AssetStreamingLocator",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            assetName: {
                serializedName: "assetName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            streamingLocatorId: {
                serializedName: "streamingLocatorId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            streamingPolicyName: {
                serializedName: "streamingPolicyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            defaultContentKeyPolicyName: {
                serializedName: "defaultContentKeyPolicyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AssetFilterCollection = {
    type: {
        name: "Composite",
        className: "AssetFilterCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssetFilter"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AssetTrackCollection = {
    type: {
        name: "Composite",
        className: "AssetTrackCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssetTrack"
                        }
                    }
                }
            }
        }
    }
};
export const TrackBase = {
    type: {
        name: "Composite",
        className: "TrackBase",
        uberParent: "TrackBase",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AssetTrackOperationStatus = {
    type: {
        name: "Composite",
        className: "AssetTrackOperationStatus",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
export const ContentKeyPolicyCollection = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicy"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContentKeyPolicyProperties = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyProperties",
        modelProperties: {
            policyId: {
                serializedName: "policyId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            created: {
                serializedName: "created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastModified: {
                serializedName: "lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            options: {
                serializedName: "options",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyOption"
                        }
                    }
                }
            }
        }
    }
};
export const ContentKeyPolicyOption = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyOption",
        modelProperties: {
            policyOptionId: {
                serializedName: "policyOptionId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            configuration: {
                serializedName: "configuration",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyConfiguration"
                }
            },
            restriction: {
                serializedName: "restriction",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyRestriction"
                }
            }
        }
    }
};
export const ContentKeyPolicyConfiguration = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContentKeyPolicyRestriction = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyRestriction",
        uberParent: "ContentKeyPolicyRestriction",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TransformCollection = {
    type: {
        name: "Composite",
        className: "TransformCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transform"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TransformOutput = {
    type: {
        name: "Composite",
        className: "TransformOutput",
        modelProperties: {
            onError: {
                serializedName: "onError",
                type: {
                    name: "String"
                }
            },
            relativePriority: {
                serializedName: "relativePriority",
                type: {
                    name: "String"
                }
            },
            preset: {
                serializedName: "preset",
                type: {
                    name: "Composite",
                    className: "Preset"
                }
            }
        }
    }
};
export const Preset = {
    type: {
        name: "Composite",
        className: "Preset",
        uberParent: "Preset",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const JobCollection = {
    type: {
        name: "Composite",
        className: "JobCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Job"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const JobInput = {
    type: {
        name: "Composite",
        className: "JobInput",
        uberParent: "JobInput",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const JobOutput = {
    type: {
        name: "Composite",
        className: "JobOutput",
        uberParent: "JobOutput",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "JobError"
                }
            },
            presetOverride: {
                serializedName: "presetOverride",
                type: {
                    name: "Composite",
                    className: "Preset"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            progress: {
                serializedName: "progress",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const JobError = {
    type: {
        name: "Composite",
        className: "JobError",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            retry: {
                serializedName: "retry",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobErrorDetail"
                        }
                    }
                }
            }
        }
    }
};
export const JobErrorDetail = {
    type: {
        name: "Composite",
        className: "JobErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StreamingPolicyCollection = {
    type: {
        name: "Composite",
        className: "StreamingPolicyCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingPolicy"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EnvelopeEncryption = {
    type: {
        name: "Composite",
        className: "EnvelopeEncryption",
        modelProperties: {
            enabledProtocols: {
                serializedName: "enabledProtocols",
                type: {
                    name: "Composite",
                    className: "EnabledProtocols"
                }
            },
            clearTracks: {
                serializedName: "clearTracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            },
            contentKeys: {
                serializedName: "contentKeys",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyContentKeys"
                }
            },
            customKeyAcquisitionUrlTemplate: {
                serializedName: "customKeyAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EnabledProtocols = {
    type: {
        name: "Composite",
        className: "EnabledProtocols",
        modelProperties: {
            download: {
                serializedName: "download",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            dash: {
                serializedName: "dash",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            hls: {
                serializedName: "hls",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            smoothStreaming: {
                serializedName: "smoothStreaming",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const TrackSelection = {
    type: {
        name: "Composite",
        className: "TrackSelection",
        modelProperties: {
            trackSelections: {
                serializedName: "trackSelections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackPropertyCondition"
                        }
                    }
                }
            }
        }
    }
};
export const TrackPropertyCondition = {
    type: {
        name: "Composite",
        className: "TrackPropertyCondition",
        modelProperties: {
            property: {
                serializedName: "property",
                required: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StreamingPolicyContentKeys = {
    type: {
        name: "Composite",
        className: "StreamingPolicyContentKeys",
        modelProperties: {
            defaultKey: {
                serializedName: "defaultKey",
                type: {
                    name: "Composite",
                    className: "DefaultKey"
                }
            },
            keyToTrackMappings: {
                serializedName: "keyToTrackMappings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingPolicyContentKey"
                        }
                    }
                }
            }
        }
    }
};
export const DefaultKey = {
    type: {
        name: "Composite",
        className: "DefaultKey",
        modelProperties: {
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            policyName: {
                serializedName: "policyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StreamingPolicyContentKey = {
    type: {
        name: "Composite",
        className: "StreamingPolicyContentKey",
        modelProperties: {
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            policyName: {
                serializedName: "policyName",
                type: {
                    name: "String"
                }
            },
            tracks: {
                serializedName: "tracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            }
        }
    }
};
export const CommonEncryptionCenc = {
    type: {
        name: "Composite",
        className: "CommonEncryptionCenc",
        modelProperties: {
            enabledProtocols: {
                serializedName: "enabledProtocols",
                type: {
                    name: "Composite",
                    className: "EnabledProtocols"
                }
            },
            clearTracks: {
                serializedName: "clearTracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            },
            contentKeys: {
                serializedName: "contentKeys",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyContentKeys"
                }
            },
            drm: {
                serializedName: "drm",
                type: {
                    name: "Composite",
                    className: "CencDrmConfiguration"
                }
            },
            clearKeyEncryptionConfiguration: {
                serializedName: "clearKeyEncryptionConfiguration",
                type: {
                    name: "Composite",
                    className: "ClearKeyEncryptionConfiguration"
                }
            }
        }
    }
};
export const CencDrmConfiguration = {
    type: {
        name: "Composite",
        className: "CencDrmConfiguration",
        modelProperties: {
            playReady: {
                serializedName: "playReady",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyPlayReadyConfiguration"
                }
            },
            widevine: {
                serializedName: "widevine",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyWidevineConfiguration"
                }
            }
        }
    }
};
export const StreamingPolicyPlayReadyConfiguration = {
    type: {
        name: "Composite",
        className: "StreamingPolicyPlayReadyConfiguration",
        modelProperties: {
            customLicenseAcquisitionUrlTemplate: {
                serializedName: "customLicenseAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            },
            playReadyCustomAttributes: {
                serializedName: "playReadyCustomAttributes",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StreamingPolicyWidevineConfiguration = {
    type: {
        name: "Composite",
        className: "StreamingPolicyWidevineConfiguration",
        modelProperties: {
            customLicenseAcquisitionUrlTemplate: {
                serializedName: "customLicenseAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ClearKeyEncryptionConfiguration = {
    type: {
        name: "Composite",
        className: "ClearKeyEncryptionConfiguration",
        modelProperties: {
            customKeysAcquisitionUrlTemplate: {
                serializedName: "customKeysAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CommonEncryptionCbcs = {
    type: {
        name: "Composite",
        className: "CommonEncryptionCbcs",
        modelProperties: {
            enabledProtocols: {
                serializedName: "enabledProtocols",
                type: {
                    name: "Composite",
                    className: "EnabledProtocols"
                }
            },
            clearTracks: {
                serializedName: "clearTracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            },
            contentKeys: {
                serializedName: "contentKeys",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyContentKeys"
                }
            },
            drm: {
                serializedName: "drm",
                type: {
                    name: "Composite",
                    className: "CbcsDrmConfiguration"
                }
            },
            clearKeyEncryptionConfiguration: {
                serializedName: "clearKeyEncryptionConfiguration",
                type: {
                    name: "Composite",
                    className: "ClearKeyEncryptionConfiguration"
                }
            }
        }
    }
};
export const CbcsDrmConfiguration = {
    type: {
        name: "Composite",
        className: "CbcsDrmConfiguration",
        modelProperties: {
            fairPlay: {
                serializedName: "fairPlay",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyFairPlayConfiguration"
                }
            },
            playReady: {
                serializedName: "playReady",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyPlayReadyConfiguration"
                }
            },
            widevine: {
                serializedName: "widevine",
                type: {
                    name: "Composite",
                    className: "StreamingPolicyWidevineConfiguration"
                }
            }
        }
    }
};
export const StreamingPolicyFairPlayConfiguration = {
    type: {
        name: "Composite",
        className: "StreamingPolicyFairPlayConfiguration",
        modelProperties: {
            customLicenseAcquisitionUrlTemplate: {
                serializedName: "customLicenseAcquisitionUrlTemplate",
                type: {
                    name: "String"
                }
            },
            allowPersistentLicense: {
                serializedName: "allowPersistentLicense",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const NoEncryption = {
    type: {
        name: "Composite",
        className: "NoEncryption",
        modelProperties: {
            enabledProtocols: {
                serializedName: "enabledProtocols",
                type: {
                    name: "Composite",
                    className: "EnabledProtocols"
                }
            }
        }
    }
};
export const StreamingLocatorCollection = {
    type: {
        name: "Composite",
        className: "StreamingLocatorCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingLocator"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StreamingLocatorContentKey = {
    type: {
        name: "Composite",
        className: "StreamingLocatorContentKey",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "Uuid"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            labelReferenceInStreamingPolicy: {
                serializedName: "labelReferenceInStreamingPolicy",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            policyName: {
                serializedName: "policyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tracks: {
                serializedName: "tracks",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackSelection"
                        }
                    }
                }
            }
        }
    }
};
export const ListContentKeysResponse = {
    type: {
        name: "Composite",
        className: "ListContentKeysResponse",
        modelProperties: {
            contentKeys: {
                serializedName: "contentKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingLocatorContentKey"
                        }
                    }
                }
            }
        }
    }
};
export const ListPathsResponse = {
    type: {
        name: "Composite",
        className: "ListPathsResponse",
        modelProperties: {
            streamingPaths: {
                serializedName: "streamingPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingPath"
                        }
                    }
                }
            },
            downloadPaths: {
                serializedName: "downloadPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const StreamingPath = {
    type: {
        name: "Composite",
        className: "StreamingPath",
        modelProperties: {
            streamingProtocol: {
                serializedName: "streamingProtocol",
                required: true,
                type: {
                    name: "String"
                }
            },
            encryptionScheme: {
                serializedName: "encryptionScheme",
                required: true,
                type: {
                    name: "String"
                }
            },
            paths: {
                serializedName: "paths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const LiveEventListResult = {
    type: {
        name: "Composite",
        className: "LiveEventListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEvent"
                        }
                    }
                }
            },
            odataCount: {
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LiveEventInput = {
    type: {
        name: "Composite",
        className: "LiveEventInput",
        modelProperties: {
            streamingProtocol: {
                serializedName: "streamingProtocol",
                required: true,
                type: {
                    name: "String"
                }
            },
            accessControl: {
                serializedName: "accessControl",
                type: {
                    name: "Composite",
                    className: "LiveEventInputAccessControl"
                }
            },
            keyFrameIntervalDuration: {
                serializedName: "keyFrameIntervalDuration",
                type: {
                    name: "String"
                }
            },
            accessToken: {
                serializedName: "accessToken",
                type: {
                    name: "String"
                }
            },
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEventEndpoint"
                        }
                    }
                }
            }
        }
    }
};
export const LiveEventInputAccessControl = {
    type: {
        name: "Composite",
        className: "LiveEventInputAccessControl",
        modelProperties: {
            ip: {
                serializedName: "ip",
                type: {
                    name: "Composite",
                    className: "IPAccessControl"
                }
            }
        }
    }
};
export const IPAccessControl = {
    type: {
        name: "Composite",
        className: "IPAccessControl",
        modelProperties: {
            allow: {
                serializedName: "allow",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IPRange"
                        }
                    }
                }
            }
        }
    }
};
export const IPRange = {
    type: {
        name: "Composite",
        className: "IPRange",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                type: {
                    name: "String"
                }
            },
            subnetPrefixLength: {
                serializedName: "subnetPrefixLength",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const LiveEventEndpoint = {
    type: {
        name: "Composite",
        className: "LiveEventEndpoint",
        modelProperties: {
            protocol: {
                serializedName: "protocol",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LiveEventPreview = {
    type: {
        name: "Composite",
        className: "LiveEventPreview",
        modelProperties: {
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEventEndpoint"
                        }
                    }
                }
            },
            accessControl: {
                serializedName: "accessControl",
                type: {
                    name: "Composite",
                    className: "LiveEventPreviewAccessControl"
                }
            },
            previewLocator: {
                serializedName: "previewLocator",
                type: {
                    name: "String"
                }
            },
            streamingPolicyName: {
                serializedName: "streamingPolicyName",
                type: {
                    name: "String"
                }
            },
            alternativeMediaId: {
                serializedName: "alternativeMediaId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LiveEventPreviewAccessControl = {
    type: {
        name: "Composite",
        className: "LiveEventPreviewAccessControl",
        modelProperties: {
            ip: {
                serializedName: "ip",
                type: {
                    name: "Composite",
                    className: "IPAccessControl"
                }
            }
        }
    }
};
export const LiveEventEncoding = {
    type: {
        name: "Composite",
        className: "LiveEventEncoding",
        modelProperties: {
            encodingType: {
                serializedName: "encodingType",
                type: {
                    name: "String"
                }
            },
            presetName: {
                serializedName: "presetName",
                type: {
                    name: "String"
                }
            },
            stretchMode: {
                serializedName: "stretchMode",
                type: {
                    name: "String"
                }
            },
            keyFrameInterval: {
                serializedName: "keyFrameInterval",
                type: {
                    name: "TimeSpan"
                }
            }
        }
    }
};
export const LiveEventTranscription = {
    type: {
        name: "Composite",
        className: "LiveEventTranscription",
        modelProperties: {
            language: {
                serializedName: "language",
                type: {
                    name: "String"
                }
            },
            inputTrackSelection: {
                serializedName: "inputTrackSelection",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEventInputTrackSelection"
                        }
                    }
                }
            },
            outputTranscriptionTrack: {
                serializedName: "outputTranscriptionTrack",
                type: {
                    name: "Composite",
                    className: "LiveEventOutputTranscriptionTrack"
                }
            }
        }
    }
};
export const LiveEventInputTrackSelection = {
    type: {
        name: "Composite",
        className: "LiveEventInputTrackSelection",
        modelProperties: {
            property: {
                serializedName: "property",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LiveEventOutputTranscriptionTrack = {
    type: {
        name: "Composite",
        className: "LiveEventOutputTranscriptionTrack",
        modelProperties: {
            trackName: {
                serializedName: "trackName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CrossSiteAccessPolicies = {
    type: {
        name: "Composite",
        className: "CrossSiteAccessPolicies",
        modelProperties: {
            clientAccessPolicy: {
                serializedName: "clientAccessPolicy",
                type: {
                    name: "String"
                }
            },
            crossDomainPolicy: {
                serializedName: "crossDomainPolicy",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LiveEventActionInput = {
    type: {
        name: "Composite",
        className: "LiveEventActionInput",
        modelProperties: {
            removeOutputsOnStop: {
                serializedName: "removeOutputsOnStop",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const AsyncOperationResult = {
    type: {
        name: "Composite",
        className: "AsyncOperationResult",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LiveOutputListResult = {
    type: {
        name: "Composite",
        className: "LiveOutputListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveOutput"
                        }
                    }
                }
            },
            odataCount: {
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Hls = {
    type: {
        name: "Composite",
        className: "Hls",
        modelProperties: {
            fragmentsPerTsSegment: {
                serializedName: "fragmentsPerTsSegment",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const StreamingEndpointListResult = {
    type: {
        name: "Composite",
        className: "StreamingEndpointListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingEndpoint"
                        }
                    }
                }
            },
            odataCount: {
                serializedName: "@odata\\.count",
                type: {
                    name: "Number"
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StreamingEndpointAccessControl = {
    type: {
        name: "Composite",
        className: "StreamingEndpointAccessControl",
        modelProperties: {
            akamai: {
                serializedName: "akamai",
                type: {
                    name: "Composite",
                    className: "AkamaiAccessControl"
                }
            },
            ip: {
                serializedName: "ip",
                type: {
                    name: "Composite",
                    className: "IPAccessControl"
                }
            }
        }
    }
};
export const AkamaiAccessControl = {
    type: {
        name: "Composite",
        className: "AkamaiAccessControl",
        modelProperties: {
            akamaiSignatureHeaderAuthenticationKeyList: {
                serializedName: "akamaiSignatureHeaderAuthenticationKeyList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AkamaiSignatureHeaderAuthenticationKey"
                        }
                    }
                }
            }
        }
    }
};
export const AkamaiSignatureHeaderAuthenticationKey = {
    type: {
        name: "Composite",
        className: "AkamaiSignatureHeaderAuthenticationKey",
        modelProperties: {
            identifier: {
                serializedName: "identifier",
                type: {
                    name: "String"
                }
            },
            base64Key: {
                serializedName: "base64Key",
                type: {
                    name: "String"
                }
            },
            expiration: {
                serializedName: "expiration",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const ArmStreamingEndpointCurrentSku = {
    type: {
        name: "Composite",
        className: "ArmStreamingEndpointCurrentSku",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const StreamingEndpointSkuInfoListResult = {
    type: {
        name: "Composite",
        className: "StreamingEndpointSkuInfoListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArmStreamingEndpointSkuInfo"
                        }
                    }
                }
            }
        }
    }
};
export const ArmStreamingEndpointSkuInfo = {
    type: {
        name: "Composite",
        className: "ArmStreamingEndpointSkuInfo",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "ArmStreamingEndpointCapacity"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ArmStreamingEndpointSku"
                }
            }
        }
    }
};
export const ArmStreamingEndpointCapacity = {
    type: {
        name: "Composite",
        className: "ArmStreamingEndpointCapacity",
        modelProperties: {
            scaleType: {
                serializedName: "scaleType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            default: {
                serializedName: "default",
                type: {
                    name: "Number"
                }
            },
            minimum: {
                serializedName: "minimum",
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ArmStreamingEndpointSku = {
    type: {
        name: "Composite",
        className: "ArmStreamingEndpointSku",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StreamingEntityScaleUnit = {
    type: {
        name: "Composite",
        className: "StreamingEntityScaleUnit",
        modelProperties: {
            scaleUnit: {
                serializedName: "scaleUnit",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const HlsSettings = {
    type: {
        name: "Composite",
        className: "HlsSettings",
        modelProperties: {
            default: {
                serializedName: "default",
                type: {
                    name: "Boolean"
                }
            },
            forced: {
                serializedName: "forced",
                type: {
                    name: "Boolean"
                }
            },
            characteristics: {
                serializedName: "characteristics",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DashSettings = {
    type: {
        name: "Composite",
        className: "DashSettings",
        modelProperties: {
            role: {
                serializedName: "role",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction",
        modelProperties: {
            bestEffort: {
                serializedName: "bestEffort",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            configurationData: {
                serializedName: "configurationData",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ContentKeyPolicyPlayReadyContentKeyLocation = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyContentKeyLocation",
        uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContentKeyPolicyPlayReadyPlayRight = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyPlayRight",
        modelProperties: {
            firstPlayExpiration: {
                serializedName: "firstPlayExpiration",
                type: {
                    name: "TimeSpan"
                }
            },
            scmsRestriction: {
                serializedName: "scmsRestriction",
                type: {
                    name: "Number"
                }
            },
            agcAndColorStripeRestriction: {
                serializedName: "agcAndColorStripeRestriction",
                type: {
                    name: "Number"
                }
            },
            explicitAnalogTelevisionOutputRestriction: {
                serializedName: "explicitAnalogTelevisionOutputRestriction",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction"
                }
            },
            digitalVideoOnlyContentRestriction: {
                serializedName: "digitalVideoOnlyContentRestriction",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            imageConstraintForAnalogComponentVideoRestriction: {
                serializedName: "imageConstraintForAnalogComponentVideoRestriction",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            imageConstraintForAnalogComputerMonitorRestriction: {
                serializedName: "imageConstraintForAnalogComputerMonitorRestriction",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            allowPassingVideoContentToUnknownOutput: {
                serializedName: "allowPassingVideoContentToUnknownOutput",
                required: true,
                type: {
                    name: "String"
                }
            },
            uncompressedDigitalVideoOpl: {
                serializedName: "uncompressedDigitalVideoOpl",
                type: {
                    name: "Number"
                }
            },
            compressedDigitalVideoOpl: {
                serializedName: "compressedDigitalVideoOpl",
                type: {
                    name: "Number"
                }
            },
            analogVideoOpl: {
                serializedName: "analogVideoOpl",
                type: {
                    name: "Number"
                }
            },
            compressedDigitalAudioOpl: {
                serializedName: "compressedDigitalAudioOpl",
                type: {
                    name: "Number"
                }
            },
            uncompressedDigitalAudioOpl: {
                serializedName: "uncompressedDigitalAudioOpl",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ContentKeyPolicyTokenClaim = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyTokenClaim",
        modelProperties: {
            claimType: {
                serializedName: "claimType",
                type: {
                    name: "String"
                }
            },
            claimValue: {
                serializedName: "claimValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContentKeyPolicyPlayReadyLicense = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyLicense",
        modelProperties: {
            allowTestDevices: {
                serializedName: "allowTestDevices",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            securityLevel: {
                serializedName: "securityLevel",
                type: {
                    name: "String"
                }
            },
            beginDate: {
                serializedName: "beginDate",
                type: {
                    name: "DateTime"
                }
            },
            expirationDate: {
                serializedName: "expirationDate",
                type: {
                    name: "DateTime"
                }
            },
            relativeBeginDate: {
                serializedName: "relativeBeginDate",
                type: {
                    name: "TimeSpan"
                }
            },
            relativeExpirationDate: {
                serializedName: "relativeExpirationDate",
                type: {
                    name: "TimeSpan"
                }
            },
            gracePeriod: {
                serializedName: "gracePeriod",
                type: {
                    name: "TimeSpan"
                }
            },
            playRight: {
                serializedName: "playRight",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyPlayReadyPlayRight"
                }
            },
            licenseType: {
                serializedName: "licenseType",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentKeyLocation: {
                serializedName: "contentKeyLocation",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyPlayReadyContentKeyLocation"
                }
            },
            contentType: {
                serializedName: "contentType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContentKeyPolicyRestrictionTokenKey = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyRestrictionTokenKey",
        uberParent: "ContentKeyPolicyRestrictionTokenKey",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContentKeyPolicyFairPlayOfflineRentalConfiguration = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicyFairPlayOfflineRentalConfiguration",
        modelProperties: {
            playbackDurationSeconds: {
                serializedName: "playbackDurationSeconds",
                required: true,
                type: {
                    name: "Number"
                }
            },
            storageDurationSeconds: {
                serializedName: "storageDurationSeconds",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const Codec = {
    type: {
        name: "Composite",
        className: "Codec",
        uberParent: "Codec",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Layer = {
    type: {
        name: "Composite",
        className: "Layer",
        modelProperties: {
            width: {
                serializedName: "width",
                type: {
                    name: "String"
                }
            },
            height: {
                serializedName: "height",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TrackDescriptor = {
    type: {
        name: "Composite",
        className: "TrackDescriptor",
        uberParent: "TrackDescriptor",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const InputDefinition = {
    type: {
        name: "Composite",
        className: "InputDefinition",
        uberParent: "InputDefinition",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            includedTracks: {
                serializedName: "includedTracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrackDescriptor"
                        }
                    }
                }
            }
        }
    }
};
export const Overlay = {
    type: {
        name: "Composite",
        className: "Overlay",
        uberParent: "Overlay",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            inputLabel: {
                serializedName: "inputLabel",
                required: true,
                type: {
                    name: "String"
                }
            },
            start: {
                serializedName: "start",
                type: {
                    name: "TimeSpan"
                }
            },
            end: {
                serializedName: "end",
                type: {
                    name: "TimeSpan"
                }
            },
            fadeInDuration: {
                serializedName: "fadeInDuration",
                type: {
                    name: "TimeSpan"
                }
            },
            fadeOutDuration: {
                serializedName: "fadeOutDuration",
                type: {
                    name: "TimeSpan"
                }
            },
            audioGainLevel: {
                serializedName: "audioGainLevel",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const Format = {
    type: {
        name: "Composite",
        className: "Format",
        uberParent: "Format",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            filenamePattern: {
                serializedName: "filenamePattern",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Deinterlace = {
    type: {
        name: "Composite",
        className: "Deinterlace",
        modelProperties: {
            parity: {
                serializedName: "parity",
                type: {
                    name: "String"
                }
            },
            mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Rectangle = {
    type: {
        name: "Composite",
        className: "Rectangle",
        modelProperties: {
            left: {
                serializedName: "left",
                type: {
                    name: "String"
                }
            },
            top: {
                serializedName: "top",
                type: {
                    name: "String"
                }
            },
            width: {
                serializedName: "width",
                type: {
                    name: "String"
                }
            },
            height: {
                serializedName: "height",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Filters = {
    type: {
        name: "Composite",
        className: "Filters",
        modelProperties: {
            deinterlace: {
                serializedName: "deinterlace",
                type: {
                    name: "Composite",
                    className: "Deinterlace"
                }
            },
            rotation: {
                serializedName: "rotation",
                type: {
                    name: "String"
                }
            },
            crop: {
                serializedName: "crop",
                type: {
                    name: "Composite",
                    className: "Rectangle"
                }
            },
            overlays: {
                serializedName: "overlays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Overlay"
                        }
                    }
                }
            }
        }
    }
};
export const OutputFile = {
    type: {
        name: "Composite",
        className: "OutputFile",
        modelProperties: {
            labels: {
                serializedName: "labels",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const PresetConfigurations = {
    type: {
        name: "Composite",
        className: "PresetConfigurations",
        modelProperties: {
            complexity: {
                serializedName: "complexity",
                type: {
                    name: "String"
                }
            },
            interleaveOutput: {
                serializedName: "interleaveOutput",
                type: {
                    name: "String"
                }
            },
            keyFrameIntervalInSeconds: {
                serializedName: "keyFrameIntervalInSeconds",
                type: {
                    name: "Number"
                }
            },
            maxBitrateBps: {
                serializedName: "maxBitrateBps",
                type: {
                    name: "Number"
                }
            },
            maxHeight: {
                serializedName: "maxHeight",
                type: {
                    name: "Number"
                }
            },
            maxLayers: {
                serializedName: "maxLayers",
                type: {
                    name: "Number"
                }
            },
            minBitrateBps: {
                serializedName: "minBitrateBps",
                type: {
                    name: "Number"
                }
            },
            minHeight: {
                serializedName: "minHeight",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ClipTime = {
    type: {
        name: "Composite",
        className: "ClipTime",
        uberParent: "ClipTime",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
export const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { groupId: {
                serializedName: "properties.groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, requiredMembers: {
                serializedName: "properties.requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
export const AudioTrack = {
    serializedName: "#Microsoft.Media.AudioTrack",
    type: {
        name: "Composite",
        className: "AudioTrack",
        uberParent: "TrackBase",
        polymorphicDiscriminator: TrackBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TrackBase.type.modelProperties), { fileName: {
                serializedName: "fileName",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }, languageCode: {
                serializedName: "languageCode",
                type: {
                    name: "String"
                }
            }, hlsSettings: {
                serializedName: "hlsSettings",
                type: {
                    name: "Composite",
                    className: "HlsSettings"
                }
            }, dashSettings: {
                serializedName: "dashSettings",
                type: {
                    name: "Composite",
                    className: "DashSettings"
                }
            }, mpeg4TrackId: {
                serializedName: "mpeg4TrackId",
                nullable: true,
                type: {
                    name: "Number"
                }
            }, bitRate: {
                serializedName: "bitRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
export const VideoTrack = {
    serializedName: "#Microsoft.Media.VideoTrack",
    type: {
        name: "Composite",
        className: "VideoTrack",
        uberParent: "TrackBase",
        polymorphicDiscriminator: TrackBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, TrackBase.type.modelProperties)
    }
};
export const TextTrack = {
    serializedName: "#Microsoft.Media.TextTrack",
    type: {
        name: "Composite",
        className: "TextTrack",
        uberParent: "TrackBase",
        polymorphicDiscriminator: TrackBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TrackBase.type.modelProperties), { fileName: {
                serializedName: "fileName",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }, languageCode: {
                serializedName: "languageCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, playerVisibility: {
                serializedName: "playerVisibility",
                type: {
                    name: "String"
                }
            }, hlsSettings: {
                serializedName: "hlsSettings",
                type: {
                    name: "Composite",
                    className: "HlsSettings"
                }
            } })
    }
};
export const ContentKeyPolicyClearKeyConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyClearKeyConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties)
    }
};
export const ContentKeyPolicyUnknownConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyUnknownConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyUnknownConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties)
    }
};
export const ContentKeyPolicyWidevineConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyWidevineConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties), { widevineTemplate: {
                serializedName: "widevineTemplate",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const ContentKeyPolicyPlayReadyConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties), { licenses: {
                serializedName: "licenses",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyPlayReadyLicense"
                        }
                    }
                }
            }, responseCustomData: {
                serializedName: "responseCustomData",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ContentKeyPolicyFairPlayConfiguration = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyFairPlayConfiguration",
        uberParent: "ContentKeyPolicyConfiguration",
        polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyConfiguration.type.modelProperties), { ask: {
                serializedName: "ask",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            }, fairPlayPfxPassword: {
                serializedName: "fairPlayPfxPassword",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, fairPlayPfx: {
                serializedName: "fairPlayPfx",
                required: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, rentalAndLeaseKeyType: {
                serializedName: "rentalAndLeaseKeyType",
                required: true,
                type: {
                    name: "String"
                }
            }, rentalDuration: {
                serializedName: "rentalDuration",
                required: true,
                type: {
                    name: "Number"
                }
            }, offlineRentalConfiguration: {
                serializedName: "offlineRentalConfiguration",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyFairPlayOfflineRentalConfiguration"
                }
            } })
    }
};
export const ContentKeyPolicyOpenRestriction = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyOpenRestriction",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyOpenRestriction",
        uberParent: "ContentKeyPolicyRestriction",
        polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyRestriction.type.modelProperties)
    }
};
export const ContentKeyPolicyUnknownRestriction = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyUnknownRestriction",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyUnknownRestriction",
        uberParent: "ContentKeyPolicyRestriction",
        polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyRestriction.type.modelProperties)
    }
};
export const ContentKeyPolicyTokenRestriction = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyTokenRestriction",
        uberParent: "ContentKeyPolicyRestriction",
        polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyRestriction.type.modelProperties), { issuer: {
                serializedName: "issuer",
                required: true,
                type: {
                    name: "String"
                }
            }, audience: {
                serializedName: "audience",
                required: true,
                type: {
                    name: "String"
                }
            }, primaryVerificationKey: {
                serializedName: "primaryVerificationKey",
                type: {
                    name: "Composite",
                    className: "ContentKeyPolicyRestrictionTokenKey"
                }
            }, alternateVerificationKeys: {
                serializedName: "alternateVerificationKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyRestrictionTokenKey"
                        }
                    }
                }
            }, requiredClaims: {
                serializedName: "requiredClaims",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyTokenClaim"
                        }
                    }
                }
            }, restrictionTokenType: {
                serializedName: "restrictionTokenType",
                required: true,
                type: {
                    name: "String"
                }
            }, openIdConnectDiscoveryDocument: {
                serializedName: "openIdConnectDiscoveryDocument",
                type: {
                    name: "String"
                }
            } })
    }
};
export const FaceDetectorPreset = {
    serializedName: "#Microsoft.Media.FaceDetectorPreset",
    type: {
        name: "Composite",
        className: "FaceDetectorPreset",
        uberParent: "Preset",
        polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Preset.type.modelProperties), { resolution: {
                serializedName: "resolution",
                type: {
                    name: "String"
                }
            }, mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }, blurType: {
                serializedName: "blurType",
                type: {
                    name: "String"
                }
            }, experimentalOptions: {
                serializedName: "experimentalOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
export const AudioAnalyzerPreset = {
    serializedName: "#Microsoft.Media.AudioAnalyzerPreset",
    type: {
        name: "Composite",
        className: "AudioAnalyzerPreset",
        uberParent: "Preset",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Preset.type.modelProperties), { audioLanguage: {
                serializedName: "audioLanguage",
                type: {
                    name: "String"
                }
            }, mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }, experimentalOptions: {
                serializedName: "experimentalOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
export const BuiltInStandardEncoderPreset = {
    serializedName: "#Microsoft.Media.BuiltInStandardEncoderPreset",
    type: {
        name: "Composite",
        className: "BuiltInStandardEncoderPreset",
        uberParent: "Preset",
        polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Preset.type.modelProperties), { configurations: {
                serializedName: "configurations",
                type: {
                    name: "Composite",
                    className: "PresetConfigurations"
                }
            }, presetName: {
                serializedName: "presetName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const StandardEncoderPreset = {
    serializedName: "#Microsoft.Media.StandardEncoderPreset",
    type: {
        name: "Composite",
        className: "StandardEncoderPreset",
        uberParent: "Preset",
        polymorphicDiscriminator: Preset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Preset.type.modelProperties), { filters: {
                serializedName: "filters",
                type: {
                    name: "Composite",
                    className: "Filters"
                }
            }, codecs: {
                serializedName: "codecs",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Codec"
                        }
                    }
                }
            }, formats: {
                serializedName: "formats",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Format"
                        }
                    }
                }
            } })
    }
};
export const JobInputClip = {
    serializedName: "#Microsoft.Media.JobInputClip",
    type: {
        name: "Composite",
        className: "JobInputClip",
        uberParent: "JobInput",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, JobInput.type.modelProperties), { files: {
                serializedName: "files",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, start: {
                serializedName: "start",
                type: {
                    name: "Composite",
                    className: "ClipTime"
                }
            }, end: {
                serializedName: "end",
                type: {
                    name: "Composite",
                    className: "ClipTime"
                }
            }, label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            }, inputDefinitions: {
                serializedName: "inputDefinitions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InputDefinition"
                        }
                    }
                }
            } })
    }
};
export const JobInputs = {
    serializedName: "#Microsoft.Media.JobInputs",
    type: {
        name: "Composite",
        className: "JobInputs",
        uberParent: "JobInput",
        polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobInput.type.modelProperties), { inputs: {
                serializedName: "inputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobInput"
                        }
                    }
                }
            } })
    }
};
export const JobInputSequence = {
    serializedName: "#Microsoft.Media.JobInputSequence",
    type: {
        name: "Composite",
        className: "JobInputSequence",
        uberParent: "JobInput",
        polymorphicDiscriminator: JobInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobInput.type.modelProperties), { inputs: {
                serializedName: "inputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobInputClip"
                        }
                    }
                }
            } })
    }
};
export const JobOutputAsset = {
    serializedName: "#Microsoft.Media.JobOutputAsset",
    type: {
        name: "Composite",
        className: "JobOutputAsset",
        uberParent: "JobOutput",
        polymorphicDiscriminator: JobOutput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobOutput.type.modelProperties), { assetName: {
                serializedName: "assetName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
        uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
        polymorphicDiscriminator: ContentKeyPolicyPlayReadyContentKeyLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ContentKeyPolicyPlayReadyContentKeyLocation.type.modelProperties)
    }
};
export const ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier",
        uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
        polymorphicDiscriminator: ContentKeyPolicyPlayReadyContentKeyLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyPlayReadyContentKeyLocation.type.modelProperties), { keyId: {
                serializedName: "keyId",
                required: true,
                nullable: true,
                type: {
                    name: "Uuid"
                }
            } })
    }
};
export const ContentKeyPolicySymmetricTokenKey = {
    serializedName: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
    type: {
        name: "Composite",
        className: "ContentKeyPolicySymmetricTokenKey",
        uberParent: "ContentKeyPolicyRestrictionTokenKey",
        polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties), { keyValue: {
                serializedName: "keyValue",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            } })
    }
};
export const ContentKeyPolicyRsaTokenKey = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyRsaTokenKey",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyRsaTokenKey",
        uberParent: "ContentKeyPolicyRestrictionTokenKey",
        polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties), { exponent: {
                serializedName: "exponent",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            }, modulus: {
                serializedName: "modulus",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            } })
    }
};
export const ContentKeyPolicyX509CertificateTokenKey = {
    serializedName: "#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey",
    type: {
        name: "Composite",
        className: "ContentKeyPolicyX509CertificateTokenKey",
        uberParent: "ContentKeyPolicyRestrictionTokenKey",
        polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContentKeyPolicyRestrictionTokenKey.type.modelProperties), { rawBody: {
                serializedName: "rawBody",
                required: true,
                nullable: true,
                type: {
                    name: "ByteArray"
                }
            } })
    }
};
export const Audio = {
    serializedName: "#Microsoft.Media.Audio",
    type: {
        name: "Composite",
        className: "Audio",
        uberParent: "Codec",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Codec.type.modelProperties), { channels: {
                serializedName: "channels",
                type: {
                    name: "Number"
                }
            }, samplingRate: {
                serializedName: "samplingRate",
                type: {
                    name: "Number"
                }
            }, bitrate: {
                serializedName: "bitrate",
                type: {
                    name: "Number"
                }
            } })
    }
};
export const Video = {
    serializedName: "#Microsoft.Media.Video",
    type: {
        name: "Composite",
        className: "Video",
        uberParent: "Codec",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Codec.type.modelProperties), { keyFrameInterval: {
                serializedName: "keyFrameInterval",
                type: {
                    name: "TimeSpan"
                }
            }, stretchMode: {
                serializedName: "stretchMode",
                type: {
                    name: "String"
                }
            }, syncMode: {
                serializedName: "syncMode",
                type: {
                    name: "String"
                }
            } })
    }
};
export const CopyVideo = {
    serializedName: "#Microsoft.Media.CopyVideo",
    type: {
        name: "Composite",
        className: "CopyVideo",
        uberParent: "Codec",
        polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Codec.type.modelProperties)
    }
};
export const CopyAudio = {
    serializedName: "#Microsoft.Media.CopyAudio",
    type: {
        name: "Composite",
        className: "CopyAudio",
        uberParent: "Codec",
        polymorphicDiscriminator: Codec.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Codec.type.modelProperties)
    }
};
export const H265VideoLayer = {
    type: {
        name: "Composite",
        className: "H265VideoLayer",
        modelProperties: Object.assign(Object.assign({}, Layer.type.modelProperties), { bitrate: {
                serializedName: "bitrate",
                required: true,
                type: {
                    name: "Number"
                }
            }, maxBitrate: {
                serializedName: "maxBitrate",
                type: {
                    name: "Number"
                }
            }, bFrames: {
                serializedName: "bFrames",
                type: {
                    name: "Number"
                }
            }, frameRate: {
                serializedName: "frameRate",
                type: {
                    name: "String"
                }
            }, slices: {
                serializedName: "slices",
                type: {
                    name: "Number"
                }
            }, adaptiveBFrame: {
                serializedName: "adaptiveBFrame",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const VideoLayer = {
    type: {
        name: "Composite",
        className: "VideoLayer",
        modelProperties: Object.assign(Object.assign({}, Layer.type.modelProperties), { bitrate: {
                serializedName: "bitrate",
                required: true,
                type: {
                    name: "Number"
                }
            }, maxBitrate: {
                serializedName: "maxBitrate",
                type: {
                    name: "Number"
                }
            }, bFrames: {
                serializedName: "bFrames",
                type: {
                    name: "Number"
                }
            }, frameRate: {
                serializedName: "frameRate",
                type: {
                    name: "String"
                }
            }, slices: {
                serializedName: "slices",
                type: {
                    name: "Number"
                }
            }, adaptiveBFrame: {
                serializedName: "adaptiveBFrame",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const JpgLayer = {
    type: {
        name: "Composite",
        className: "JpgLayer",
        modelProperties: Object.assign(Object.assign({}, Layer.type.modelProperties), { quality: {
                serializedName: "quality",
                type: {
                    name: "Number"
                }
            } })
    }
};
export const PngLayer = {
    type: {
        name: "Composite",
        className: "PngLayer",
        modelProperties: Object.assign({}, Layer.type.modelProperties)
    }
};
export const AudioTrackDescriptor = {
    serializedName: "#Microsoft.Media.AudioTrackDescriptor",
    type: {
        name: "Composite",
        className: "AudioTrackDescriptor",
        uberParent: "TrackDescriptor",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, TrackDescriptor.type.modelProperties), { channelMapping: {
                serializedName: "channelMapping",
                type: {
                    name: "String"
                }
            } })
    }
};
export const VideoTrackDescriptor = {
    serializedName: "#Microsoft.Media.VideoTrackDescriptor",
    type: {
        name: "Composite",
        className: "VideoTrackDescriptor",
        uberParent: "TrackDescriptor",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign({}, TrackDescriptor.type.modelProperties)
    }
};
export const FromAllInputFile = {
    serializedName: "#Microsoft.Media.FromAllInputFile",
    type: {
        name: "Composite",
        className: "FromAllInputFile",
        uberParent: "InputDefinition",
        polymorphicDiscriminator: InputDefinition.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, InputDefinition.type.modelProperties)
    }
};
export const FromEachInputFile = {
    serializedName: "#Microsoft.Media.FromEachInputFile",
    type: {
        name: "Composite",
        className: "FromEachInputFile",
        uberParent: "InputDefinition",
        polymorphicDiscriminator: InputDefinition.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, InputDefinition.type.modelProperties)
    }
};
export const InputFile = {
    serializedName: "#Microsoft.Media.InputFile",
    type: {
        name: "Composite",
        className: "InputFile",
        uberParent: "InputDefinition",
        polymorphicDiscriminator: InputDefinition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, InputDefinition.type.modelProperties), { filename: {
                serializedName: "filename",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AudioOverlay = {
    serializedName: "#Microsoft.Media.AudioOverlay",
    type: {
        name: "Composite",
        className: "AudioOverlay",
        uberParent: "Overlay",
        polymorphicDiscriminator: Overlay.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, Overlay.type.modelProperties)
    }
};
export const VideoOverlay = {
    serializedName: "#Microsoft.Media.VideoOverlay",
    type: {
        name: "Composite",
        className: "VideoOverlay",
        uberParent: "Overlay",
        polymorphicDiscriminator: Overlay.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Overlay.type.modelProperties), { position: {
                serializedName: "position",
                type: {
                    name: "Composite",
                    className: "Rectangle"
                }
            }, opacity: {
                serializedName: "opacity",
                type: {
                    name: "Number"
                }
            }, cropRectangle: {
                serializedName: "cropRectangle",
                type: {
                    name: "Composite",
                    className: "Rectangle"
                }
            } })
    }
};
export const ImageFormat = {
    serializedName: "#Microsoft.Media.ImageFormat",
    type: {
        name: "Composite",
        className: "ImageFormat",
        uberParent: "Format",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign({}, Format.type.modelProperties)
    }
};
export const MultiBitrateFormat = {
    serializedName: "#Microsoft.Media.MultiBitrateFormat",
    type: {
        name: "Composite",
        className: "MultiBitrateFormat",
        uberParent: "Format",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Format.type.modelProperties), { outputFiles: {
                serializedName: "outputFiles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OutputFile"
                        }
                    }
                }
            } })
    }
};
export const AbsoluteClipTime = {
    serializedName: "#Microsoft.Media.AbsoluteClipTime",
    type: {
        name: "Composite",
        className: "AbsoluteClipTime",
        uberParent: "ClipTime",
        polymorphicDiscriminator: ClipTime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ClipTime.type.modelProperties), { time: {
                serializedName: "time",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            } })
    }
};
export const UtcClipTime = {
    serializedName: "#Microsoft.Media.UtcClipTime",
    type: {
        name: "Composite",
        className: "UtcClipTime",
        uberParent: "ClipTime",
        polymorphicDiscriminator: ClipTime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ClipTime.type.modelProperties), { time: {
                serializedName: "time",
                required: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export const AccountFilter = {
    type: {
        name: "Composite",
        className: "AccountFilter",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, presentationTimeRange: {
                serializedName: "properties.presentationTimeRange",
                type: {
                    name: "Composite",
                    className: "PresentationTimeRange"
                }
            }, firstQuality: {
                serializedName: "properties.firstQuality",
                type: {
                    name: "Composite",
                    className: "FirstQuality"
                }
            }, tracks: {
                serializedName: "properties.tracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterTrackSelection"
                        }
                    }
                }
            } })
    }
};
export const Asset = {
    type: {
        name: "Composite",
        className: "Asset",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, assetId: {
                serializedName: "properties.assetId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, alternateId: {
                serializedName: "properties.alternateId",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, container: {
                serializedName: "properties.container",
                type: {
                    name: "String"
                }
            }, storageAccountName: {
                serializedName: "properties.storageAccountName",
                type: {
                    name: "String"
                }
            }, storageEncryptionFormat: {
                serializedName: "properties.storageEncryptionFormat",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const AssetFilter = {
    type: {
        name: "Composite",
        className: "AssetFilter",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, presentationTimeRange: {
                serializedName: "properties.presentationTimeRange",
                type: {
                    name: "Composite",
                    className: "PresentationTimeRange"
                }
            }, firstQuality: {
                serializedName: "properties.firstQuality",
                type: {
                    name: "Composite",
                    className: "FirstQuality"
                }
            }, tracks: {
                serializedName: "properties.tracks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterTrackSelection"
                        }
                    }
                }
            } })
    }
};
export const AssetTrack = {
    type: {
        name: "Composite",
        className: "AssetTrack",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { track: {
                serializedName: "properties.track",
                type: {
                    name: "Composite",
                    className: "TrackBase"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const ContentKeyPolicy = {
    type: {
        name: "Composite",
        className: "ContentKeyPolicy",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, policyId: {
                serializedName: "properties.policyId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, options: {
                serializedName: "properties.options",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContentKeyPolicyOption"
                        }
                    }
                }
            } })
    }
};
export const Transform = {
    type: {
        name: "Composite",
        className: "Transform",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, outputs: {
                serializedName: "properties.outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TransformOutput"
                        }
                    }
                }
            } })
    }
};
export const Job = {
    type: {
        name: "Composite",
        className: "Job",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, input: {
                serializedName: "properties.input",
                type: {
                    name: "Composite",
                    className: "JobInput"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, outputs: {
                serializedName: "properties.outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobOutput"
                        }
                    }
                }
            }, priority: {
                serializedName: "properties.priority",
                type: {
                    name: "String"
                }
            }, correlationData: {
                serializedName: "properties.correlationData",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, startTime: {
                serializedName: "properties.startTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }, endTime: {
                serializedName: "properties.endTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export const StreamingPolicy = {
    type: {
        name: "Composite",
        className: "StreamingPolicy",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, defaultContentKeyPolicyName: {
                serializedName: "properties.defaultContentKeyPolicyName",
                type: {
                    name: "String"
                }
            }, envelopeEncryption: {
                serializedName: "properties.envelopeEncryption",
                type: {
                    name: "Composite",
                    className: "EnvelopeEncryption"
                }
            }, commonEncryptionCenc: {
                serializedName: "properties.commonEncryptionCenc",
                type: {
                    name: "Composite",
                    className: "CommonEncryptionCenc"
                }
            }, commonEncryptionCbcs: {
                serializedName: "properties.commonEncryptionCbcs",
                type: {
                    name: "Composite",
                    className: "CommonEncryptionCbcs"
                }
            }, noEncryption: {
                serializedName: "properties.noEncryption",
                type: {
                    name: "Composite",
                    className: "NoEncryption"
                }
            } })
    }
};
export const StreamingLocator = {
    type: {
        name: "Composite",
        className: "StreamingLocator",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, assetName: {
                serializedName: "properties.assetName",
                type: {
                    name: "String"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, startTime: {
                serializedName: "properties.startTime",
                type: {
                    name: "DateTime"
                }
            }, endTime: {
                serializedName: "properties.endTime",
                type: {
                    name: "DateTime"
                }
            }, streamingLocatorId: {
                serializedName: "properties.streamingLocatorId",
                type: {
                    name: "Uuid"
                }
            }, streamingPolicyName: {
                serializedName: "properties.streamingPolicyName",
                type: {
                    name: "String"
                }
            }, defaultContentKeyPolicyName: {
                serializedName: "properties.defaultContentKeyPolicyName",
                type: {
                    name: "String"
                }
            }, contentKeys: {
                serializedName: "properties.contentKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StreamingLocatorContentKey"
                        }
                    }
                }
            }, alternativeMediaId: {
                serializedName: "properties.alternativeMediaId",
                type: {
                    name: "String"
                }
            }, filters: {
                serializedName: "properties.filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
export const LiveOutput = {
    type: {
        name: "Composite",
        className: "LiveOutput",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, assetName: {
                serializedName: "properties.assetName",
                type: {
                    name: "String"
                }
            }, archiveWindowLength: {
                serializedName: "properties.archiveWindowLength",
                type: {
                    name: "TimeSpan"
                }
            }, rewindWindowLength: {
                serializedName: "properties.rewindWindowLength",
                type: {
                    name: "TimeSpan"
                }
            }, manifestName: {
                serializedName: "properties.manifestName",
                type: {
                    name: "String"
                }
            }, hls: {
                serializedName: "properties.hls",
                type: {
                    name: "Composite",
                    className: "Hls"
                }
            }, outputSnapTime: {
                serializedName: "properties.outputSnapTime",
                type: {
                    name: "Number"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const MediaService = {
    type: {
        name: "Composite",
        className: "MediaService",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "MediaServiceIdentity"
                }
            }, mediaServiceId: {
                serializedName: "properties.mediaServiceId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, storageAccounts: {
                serializedName: "properties.storageAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageAccount"
                        }
                    }
                }
            }, storageAuthentication: {
                serializedName: "properties.storageAuthentication",
                nullable: true,
                type: {
                    name: "String"
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "AccountEncryption"
                }
            }, keyDelivery: {
                serializedName: "properties.keyDelivery",
                type: {
                    name: "Composite",
                    className: "KeyDelivery"
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                nullable: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            } })
    }
};
export const LiveEvent = {
    type: {
        name: "Composite",
        className: "LiveEvent",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, input: {
                serializedName: "properties.input",
                type: {
                    name: "Composite",
                    className: "LiveEventInput"
                }
            }, preview: {
                serializedName: "properties.preview",
                type: {
                    name: "Composite",
                    className: "LiveEventPreview"
                }
            }, encoding: {
                serializedName: "properties.encoding",
                type: {
                    name: "Composite",
                    className: "LiveEventEncoding"
                }
            }, transcriptions: {
                serializedName: "properties.transcriptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LiveEventTranscription"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, crossSiteAccessPolicies: {
                serializedName: "properties.crossSiteAccessPolicies",
                type: {
                    name: "Composite",
                    className: "CrossSiteAccessPolicies"
                }
            }, useStaticHostname: {
                serializedName: "properties.useStaticHostname",
                type: {
                    name: "Boolean"
                }
            }, hostnamePrefix: {
                serializedName: "properties.hostnamePrefix",
                type: {
                    name: "String"
                }
            }, streamOptions: {
                serializedName: "properties.streamOptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export const StreamingEndpoint = {
    type: {
        name: "Composite",
        className: "StreamingEndpoint",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ArmStreamingEndpointCurrentSku"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, scaleUnits: {
                serializedName: "properties.scaleUnits",
                type: {
                    name: "Number"
                }
            }, availabilitySetName: {
                serializedName: "properties.availabilitySetName",
                type: {
                    name: "String"
                }
            }, accessControl: {
                serializedName: "properties.accessControl",
                type: {
                    name: "Composite",
                    className: "StreamingEndpointAccessControl"
                }
            }, maxCacheAge: {
                serializedName: "properties.maxCacheAge",
                type: {
                    name: "Number"
                }
            }, customHostNames: {
                serializedName: "properties.customHostNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, hostName: {
                serializedName: "properties.hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, cdnEnabled: {
                serializedName: "properties.cdnEnabled",
                type: {
                    name: "Boolean"
                }
            }, cdnProvider: {
                serializedName: "properties.cdnProvider",
                type: {
                    name: "String"
                }
            }, cdnProfile: {
                serializedName: "properties.cdnProfile",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, crossSiteAccessPolicies: {
                serializedName: "properties.crossSiteAccessPolicies",
                type: {
                    name: "Composite",
                    className: "CrossSiteAccessPolicies"
                }
            }, freeTrialEndTime: {
                serializedName: "properties.freeTrialEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, created: {
                serializedName: "properties.created",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastModified: {
                serializedName: "properties.lastModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export const VideoAnalyzerPreset = {
    serializedName: "#Microsoft.Media.VideoAnalyzerPreset",
    type: {
        name: "Composite",
        className: "VideoAnalyzerPreset",
        uberParent: "AudioAnalyzerPreset",
        polymorphicDiscriminator: AudioAnalyzerPreset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AudioAnalyzerPreset.type.modelProperties), { insightsToExtract: {
                serializedName: "insightsToExtract",
                type: {
                    name: "String"
                }
            } })
    }
};
export const JobInputAsset = {
    serializedName: "#Microsoft.Media.JobInputAsset",
    type: {
        name: "Composite",
        className: "JobInputAsset",
        uberParent: "JobInputClip",
        polymorphicDiscriminator: JobInputClip.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobInputClip.type.modelProperties), { assetName: {
                serializedName: "assetName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const JobInputHttp = {
    serializedName: "#Microsoft.Media.JobInputHttp",
    type: {
        name: "Composite",
        className: "JobInputHttp",
        uberParent: "JobInputClip",
        polymorphicDiscriminator: JobInputClip.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobInputClip.type.modelProperties), { baseUri: {
                serializedName: "baseUri",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AacAudio = {
    serializedName: "#Microsoft.Media.AacAudio",
    type: {
        name: "Composite",
        className: "AacAudio",
        uberParent: "Audio",
        polymorphicDiscriminator: Audio.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Audio.type.modelProperties), { profile: {
                serializedName: "profile",
                type: {
                    name: "String"
                }
            } })
    }
};
export const H265Video = {
    serializedName: "#Microsoft.Media.H265Video",
    type: {
        name: "Composite",
        className: "H265Video",
        uberParent: "Video",
        polymorphicDiscriminator: Video.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Video.type.modelProperties), { sceneChangeDetection: {
                serializedName: "sceneChangeDetection",
                type: {
                    name: "Boolean"
                }
            }, complexity: {
                serializedName: "complexity",
                type: {
                    name: "String"
                }
            }, layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "H265Layer"
                        }
                    }
                }
            } })
    }
};
export const Image = {
    serializedName: "#Microsoft.Media.Image",
    type: {
        name: "Composite",
        className: "Image",
        uberParent: "Video",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "odataType"
        },
        modelProperties: Object.assign(Object.assign({}, Video.type.modelProperties), { start: {
                serializedName: "start",
                required: true,
                type: {
                    name: "String"
                }
            }, step: {
                serializedName: "step",
                type: {
                    name: "String"
                }
            }, range: {
                serializedName: "range",
                type: {
                    name: "String"
                }
            } })
    }
};
export const H264Video = {
    serializedName: "#Microsoft.Media.H264Video",
    type: {
        name: "Composite",
        className: "H264Video",
        uberParent: "Video",
        polymorphicDiscriminator: Video.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Video.type.modelProperties), { complexity: {
                serializedName: "complexity",
                type: {
                    name: "String"
                }
            }, layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "H264Layer"
                        }
                    }
                }
            }, rateControlMode: {
                serializedName: "rateControlMode",
                type: {
                    name: "String"
                }
            }, sceneChangeDetection: {
                serializedName: "sceneChangeDetection",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const H265Layer = {
    type: {
        name: "Composite",
        className: "H265Layer",
        modelProperties: Object.assign(Object.assign({}, H265VideoLayer.type.modelProperties), { profile: {
                serializedName: "profile",
                type: {
                    name: "String"
                }
            }, level: {
                serializedName: "level",
                type: {
                    name: "String"
                }
            }, bufferWindow: {
                serializedName: "bufferWindow",
                type: {
                    name: "TimeSpan"
                }
            }, crf: {
                serializedName: "crf",
                type: {
                    name: "Number"
                }
            }, referenceFrames: {
                serializedName: "referenceFrames",
                type: {
                    name: "Number"
                }
            } })
    }
};
export const H264Layer = {
    type: {
        name: "Composite",
        className: "H264Layer",
        modelProperties: Object.assign(Object.assign({}, VideoLayer.type.modelProperties), { profile: {
                serializedName: "profile",
                type: {
                    name: "String"
                }
            }, level: {
                serializedName: "level",
                type: {
                    name: "String"
                }
            }, bufferWindow: {
                serializedName: "bufferWindow",
                type: {
                    name: "TimeSpan"
                }
            }, crf: {
                serializedName: "crf",
                type: {
                    name: "Number"
                }
            }, referenceFrames: {
                serializedName: "referenceFrames",
                type: {
                    name: "Number"
                }
            }, entropyMode: {
                serializedName: "entropyMode",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SelectAudioTrackByAttribute = {
    serializedName: "#Microsoft.Media.SelectAudioTrackByAttribute",
    type: {
        name: "Composite",
        className: "SelectAudioTrackByAttribute",
        uberParent: "AudioTrackDescriptor",
        polymorphicDiscriminator: AudioTrackDescriptor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AudioTrackDescriptor.type.modelProperties), { attribute: {
                serializedName: "attribute",
                required: true,
                type: {
                    name: "String"
                }
            }, filter: {
                serializedName: "filter",
                required: true,
                type: {
                    name: "String"
                }
            }, filterValue: {
                serializedName: "filterValue",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SelectAudioTrackById = {
    serializedName: "#Microsoft.Media.SelectAudioTrackById",
    type: {
        name: "Composite",
        className: "SelectAudioTrackById",
        uberParent: "AudioTrackDescriptor",
        polymorphicDiscriminator: AudioTrackDescriptor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AudioTrackDescriptor.type.modelProperties), { trackId: {
                serializedName: "trackId",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
export const SelectVideoTrackByAttribute = {
    serializedName: "#Microsoft.Media.SelectVideoTrackByAttribute",
    type: {
        name: "Composite",
        className: "SelectVideoTrackByAttribute",
        uberParent: "VideoTrackDescriptor",
        polymorphicDiscriminator: VideoTrackDescriptor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, VideoTrackDescriptor.type.modelProperties), { attribute: {
                serializedName: "attribute",
                required: true,
                type: {
                    name: "String"
                }
            }, filter: {
                serializedName: "filter",
                required: true,
                type: {
                    name: "String"
                }
            }, filterValue: {
                serializedName: "filterValue",
                type: {
                    name: "String"
                }
            } })
    }
};
export const SelectVideoTrackById = {
    serializedName: "#Microsoft.Media.SelectVideoTrackById",
    type: {
        name: "Composite",
        className: "SelectVideoTrackById",
        uberParent: "VideoTrackDescriptor",
        polymorphicDiscriminator: VideoTrackDescriptor.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, VideoTrackDescriptor.type.modelProperties), { trackId: {
                serializedName: "trackId",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
export const JpgFormat = {
    serializedName: "#Microsoft.Media.JpgFormat",
    type: {
        name: "Composite",
        className: "JpgFormat",
        uberParent: "ImageFormat",
        polymorphicDiscriminator: ImageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ImageFormat.type.modelProperties)
    }
};
export const PngFormat = {
    serializedName: "#Microsoft.Media.PngFormat",
    type: {
        name: "Composite",
        className: "PngFormat",
        uberParent: "ImageFormat",
        polymorphicDiscriminator: ImageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ImageFormat.type.modelProperties)
    }
};
export const Mp4Format = {
    serializedName: "#Microsoft.Media.Mp4Format",
    type: {
        name: "Composite",
        className: "Mp4Format",
        uberParent: "MultiBitrateFormat",
        polymorphicDiscriminator: MultiBitrateFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, MultiBitrateFormat.type.modelProperties)
    }
};
export const TransportStreamFormat = {
    serializedName: "#Microsoft.Media.TransportStreamFormat",
    type: {
        name: "Composite",
        className: "TransportStreamFormat",
        uberParent: "MultiBitrateFormat",
        polymorphicDiscriminator: MultiBitrateFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, MultiBitrateFormat.type.modelProperties)
    }
};
export const JpgImage = {
    serializedName: "#Microsoft.Media.JpgImage",
    type: {
        name: "Composite",
        className: "JpgImage",
        uberParent: "Image",
        polymorphicDiscriminator: Image.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Image.type.modelProperties), { layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JpgLayer"
                        }
                    }
                }
            }, spriteColumn: {
                serializedName: "spriteColumn",
                type: {
                    name: "Number"
                }
            } })
    }
};
export const PngImage = {
    serializedName: "#Microsoft.Media.PngImage",
    type: {
        name: "Composite",
        className: "PngImage",
        uberParent: "Image",
        polymorphicDiscriminator: Image.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Image.type.modelProperties), { layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PngLayer"
                        }
                    }
                }
            } })
    }
};
export const MediaservicesCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "MediaservicesCreateOrUpdateHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MediaservicesUpdateHeaders = {
    type: {
        name: "Composite",
        className: "MediaservicesUpdateHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MediaServicesOperationResultsGetHeaders = {
    type: {
        name: "Composite",
        className: "MediaServicesOperationResultsGetHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TracksCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "TracksCreateOrUpdateHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TracksDeleteHeaders = {
    type: {
        name: "Composite",
        className: "TracksDeleteHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TracksUpdateHeaders = {
    type: {
        name: "Composite",
        className: "TracksUpdateHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TracksUpdateTrackDataHeaders = {
    type: {
        name: "Composite",
        className: "TracksUpdateTrackDataHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationResultsGetHeaders = {
    type: {
        name: "Composite",
        className: "OperationResultsGetHeaders",
        modelProperties: {
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export let discriminators = {
    TrackBase: TrackBase,
    ContentKeyPolicyConfiguration: ContentKeyPolicyConfiguration,
    ContentKeyPolicyRestriction: ContentKeyPolicyRestriction,
    Preset: Preset,
    JobInput: JobInput,
    JobOutput: JobOutput,
    ContentKeyPolicyPlayReadyContentKeyLocation: ContentKeyPolicyPlayReadyContentKeyLocation,
    ContentKeyPolicyRestrictionTokenKey: ContentKeyPolicyRestrictionTokenKey,
    Codec: Codec,
    TrackDescriptor: TrackDescriptor,
    InputDefinition: InputDefinition,
    Overlay: Overlay,
    Format: Format,
    ClipTime: ClipTime,
    "TrackBase.#Microsoft.Media.AudioTrack": AudioTrack,
    "TrackBase.#Microsoft.Media.VideoTrack": VideoTrack,
    "TrackBase.#Microsoft.Media.TextTrack": TextTrack,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration": ContentKeyPolicyClearKeyConfiguration,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyUnknownConfiguration": ContentKeyPolicyUnknownConfiguration,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyWidevineConfiguration": ContentKeyPolicyWidevineConfiguration,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration": ContentKeyPolicyPlayReadyConfiguration,
    "ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration": ContentKeyPolicyFairPlayConfiguration,
    "ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyOpenRestriction": ContentKeyPolicyOpenRestriction,
    "ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyUnknownRestriction": ContentKeyPolicyUnknownRestriction,
    "ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyTokenRestriction": ContentKeyPolicyTokenRestriction,
    "Preset.#Microsoft.Media.FaceDetectorPreset": FaceDetectorPreset,
    "Preset.#Microsoft.Media.AudioAnalyzerPreset": AudioAnalyzerPreset,
    "Preset.#Microsoft.Media.BuiltInStandardEncoderPreset": BuiltInStandardEncoderPreset,
    "Preset.#Microsoft.Media.StandardEncoderPreset": StandardEncoderPreset,
    "JobInput.#Microsoft.Media.JobInputClip": JobInputClip,
    "JobInput.#Microsoft.Media.JobInputs": JobInputs,
    "JobInput.#Microsoft.Media.JobInputSequence": JobInputSequence,
    "JobOutput.#Microsoft.Media.JobOutputAsset": JobOutputAsset,
    "ContentKeyPolicyPlayReadyContentKeyLocation.#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader": ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
    "ContentKeyPolicyPlayReadyContentKeyLocation.#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier": ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
    "ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicySymmetricTokenKey": ContentKeyPolicySymmetricTokenKey,
    "ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicyRsaTokenKey": ContentKeyPolicyRsaTokenKey,
    "ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey": ContentKeyPolicyX509CertificateTokenKey,
    "Codec.#Microsoft.Media.Audio": Audio,
    "Codec.#Microsoft.Media.Video": Video,
    "Codec.#Microsoft.Media.CopyVideo": CopyVideo,
    "Codec.#Microsoft.Media.CopyAudio": CopyAudio,
    "TrackDescriptor.#Microsoft.Media.AudioTrackDescriptor": AudioTrackDescriptor,
    "TrackDescriptor.#Microsoft.Media.VideoTrackDescriptor": VideoTrackDescriptor,
    "InputDefinition.#Microsoft.Media.FromAllInputFile": FromAllInputFile,
    "InputDefinition.#Microsoft.Media.FromEachInputFile": FromEachInputFile,
    "InputDefinition.#Microsoft.Media.InputFile": InputFile,
    "Overlay.#Microsoft.Media.AudioOverlay": AudioOverlay,
    "Overlay.#Microsoft.Media.VideoOverlay": VideoOverlay,
    "Format.#Microsoft.Media.ImageFormat": ImageFormat,
    "Format.#Microsoft.Media.MultiBitrateFormat": MultiBitrateFormat,
    "ClipTime.#Microsoft.Media.AbsoluteClipTime": AbsoluteClipTime,
    "ClipTime.#Microsoft.Media.UtcClipTime": UtcClipTime,
    "AudioAnalyzerPreset.#Microsoft.Media.VideoAnalyzerPreset": VideoAnalyzerPreset,
    "JobInputClip.#Microsoft.Media.JobInputAsset": JobInputAsset,
    "JobInputClip.#Microsoft.Media.JobInputHttp": JobInputHttp,
    "Audio.#Microsoft.Media.AacAudio": AacAudio,
    "Video.#Microsoft.Media.H265Video": H265Video,
    "Video.#Microsoft.Media.Image": Image,
    "Video.#Microsoft.Media.H264Video": H264Video,
    "AudioTrackDescriptor.#Microsoft.Media.SelectAudioTrackByAttribute": SelectAudioTrackByAttribute,
    "AudioTrackDescriptor.#Microsoft.Media.SelectAudioTrackById": SelectAudioTrackById,
    "VideoTrackDescriptor.#Microsoft.Media.SelectVideoTrackByAttribute": SelectVideoTrackByAttribute,
    "VideoTrackDescriptor.#Microsoft.Media.SelectVideoTrackById": SelectVideoTrackById,
    "ImageFormat.#Microsoft.Media.JpgFormat": JpgFormat,
    "ImageFormat.#Microsoft.Media.PngFormat": PngFormat,
    "MultiBitrateFormat.#Microsoft.Media.Mp4Format": Mp4Format,
    "MultiBitrateFormat.#Microsoft.Media.TransportStreamFormat": TransportStreamFormat,
    "Image.#Microsoft.Media.JpgImage": JpgImage,
    "Image.#Microsoft.Media.PngImage": PngImage
};
//# sourceMappingURL=mappers.js.map