/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link FilterTrackPropertyType} that the service accepts. */
export var KnownFilterTrackPropertyType;
(function (KnownFilterTrackPropertyType) {
    /** The unknown track property type. */
    KnownFilterTrackPropertyType["Unknown"] = "Unknown";
    /** The type. */
    KnownFilterTrackPropertyType["Type"] = "Type";
    /** The name. */
    KnownFilterTrackPropertyType["Name"] = "Name";
    /** The language. */
    KnownFilterTrackPropertyType["Language"] = "Language";
    /** The fourCC. */
    KnownFilterTrackPropertyType["FourCC"] = "FourCC";
    /** The bitrate. */
    KnownFilterTrackPropertyType["Bitrate"] = "Bitrate";
})(KnownFilterTrackPropertyType || (KnownFilterTrackPropertyType = {}));
/** Known values of {@link FilterTrackPropertyCompareOperation} that the service accepts. */
export var KnownFilterTrackPropertyCompareOperation;
(function (KnownFilterTrackPropertyCompareOperation) {
    /** The equal operation. */
    KnownFilterTrackPropertyCompareOperation["Equal"] = "Equal";
    /** The not equal operation. */
    KnownFilterTrackPropertyCompareOperation["NotEqual"] = "NotEqual";
})(KnownFilterTrackPropertyCompareOperation || (KnownFilterTrackPropertyCompareOperation = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link MetricUnit} that the service accepts. */
export var KnownMetricUnit;
(function (KnownMetricUnit) {
    /** The number of bytes. */
    KnownMetricUnit["Bytes"] = "Bytes";
    /** The count. */
    KnownMetricUnit["Count"] = "Count";
    /** The number of milliseconds. */
    KnownMetricUnit["Milliseconds"] = "Milliseconds";
})(KnownMetricUnit || (KnownMetricUnit = {}));
/** Known values of {@link MetricAggregationType} that the service accepts. */
export var KnownMetricAggregationType;
(function (KnownMetricAggregationType) {
    /** The average. */
    KnownMetricAggregationType["Average"] = "Average";
    /** The count of a number of items, usually requests. */
    KnownMetricAggregationType["Count"] = "Count";
    /** The sum. */
    KnownMetricAggregationType["Total"] = "Total";
})(KnownMetricAggregationType || (KnownMetricAggregationType = {}));
/** Known values of {@link ActionType} that the service accepts. */
export var KnownActionType;
(function (KnownActionType) {
    /** An internal action. */
    KnownActionType["Internal"] = "Internal";
})(KnownActionType || (KnownActionType = {}));
/** Known values of {@link StorageAccountType} that the service accepts. */
export var KnownStorageAccountType;
(function (KnownStorageAccountType) {
    /** The primary storage account for the Media Services account. */
    KnownStorageAccountType["Primary"] = "Primary";
    /** A secondary storage account for the Media Services account. */
    KnownStorageAccountType["Secondary"] = "Secondary";
})(KnownStorageAccountType || (KnownStorageAccountType = {}));
/** Known values of {@link StorageAuthentication} that the service accepts. */
export var KnownStorageAuthentication;
(function (KnownStorageAuthentication) {
    /** System authentication. */
    KnownStorageAuthentication["System"] = "System";
    /** Managed Identity authentication. */
    KnownStorageAuthentication["ManagedIdentity"] = "ManagedIdentity";
})(KnownStorageAuthentication || (KnownStorageAuthentication = {}));
/** Known values of {@link AccountEncryptionKeyType} that the service accepts. */
export var KnownAccountEncryptionKeyType;
(function (KnownAccountEncryptionKeyType) {
    /** The Account Key is encrypted with a System Key. */
    KnownAccountEncryptionKeyType["SystemKey"] = "SystemKey";
    /** The Account Key is encrypted with a Customer Key. */
    KnownAccountEncryptionKeyType["CustomerKey"] = "CustomerKey";
})(KnownAccountEncryptionKeyType || (KnownAccountEncryptionKeyType = {}));
/** Known values of {@link DefaultAction} that the service accepts. */
export var KnownDefaultAction;
(function (KnownDefaultAction) {
    /** All public IP addresses are allowed. */
    KnownDefaultAction["Allow"] = "Allow";
    /** Public IP addresses are blocked. */
    KnownDefaultAction["Deny"] = "Deny";
})(KnownDefaultAction || (KnownDefaultAction = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export var KnownPublicNetworkAccess;
(function (KnownPublicNetworkAccess) {
    /** Public network access is enabled. */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Public network access is disabled. */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
export var KnownProvisioningState;
(function (KnownProvisioningState) {
    /** Provisioning state failed. */
    KnownProvisioningState["Failed"] = "Failed";
    /** Provisioning state in progress. */
    KnownProvisioningState["InProgress"] = "InProgress";
    /** Provisioning state succeeded. */
    KnownProvisioningState["Succeeded"] = "Succeeded";
})(KnownProvisioningState || (KnownProvisioningState = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export var KnownPrivateEndpointServiceConnectionStatus;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(KnownPrivateEndpointServiceConnectionStatus || (KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export var KnownPrivateEndpointConnectionProvisioningState;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(KnownPrivateEndpointConnectionProvisioningState || (KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link AssetStorageEncryptionFormat} that the service accepts. */
export var KnownAssetStorageEncryptionFormat;
(function (KnownAssetStorageEncryptionFormat) {
    /** The Asset does not use client-side storage encryption (this is the only allowed value for new Assets). */
    KnownAssetStorageEncryptionFormat["None"] = "None";
    /** The Asset is encrypted with Media Services client-side encryption. */
    KnownAssetStorageEncryptionFormat["MediaStorageClientEncryption"] = "MediaStorageClientEncryption";
})(KnownAssetStorageEncryptionFormat || (KnownAssetStorageEncryptionFormat = {}));
/** Known values of {@link AssetContainerPermission} that the service accepts. */
export var KnownAssetContainerPermission;
(function (KnownAssetContainerPermission) {
    /** The SAS URL will allow read access to the container. */
    KnownAssetContainerPermission["Read"] = "Read";
    /** The SAS URL will allow read and write access to the container. */
    KnownAssetContainerPermission["ReadWrite"] = "ReadWrite";
    /** The SAS URL will allow read, write and delete access to the container. */
    KnownAssetContainerPermission["ReadWriteDelete"] = "ReadWriteDelete";
})(KnownAssetContainerPermission || (KnownAssetContainerPermission = {}));
/** Known values of {@link OnErrorType} that the service accepts. */
export var KnownOnErrorType;
(function (KnownOnErrorType) {
    /** Tells the service that if this TransformOutput fails, then any other incomplete TransformOutputs can be stopped. */
    KnownOnErrorType["StopProcessingJob"] = "StopProcessingJob";
    /** Tells the service that if this TransformOutput fails, then allow any other TransformOutput to continue. */
    KnownOnErrorType["ContinueJob"] = "ContinueJob";
})(KnownOnErrorType || (KnownOnErrorType = {}));
/** Known values of {@link Priority} that the service accepts. */
export var KnownPriority;
(function (KnownPriority) {
    /** Used for TransformOutputs that can be generated after Normal and High priority TransformOutputs. */
    KnownPriority["Low"] = "Low";
    /** Used for TransformOutputs that can be generated at Normal priority. */
    KnownPriority["Normal"] = "Normal";
    /** Used for TransformOutputs that should take precedence over others. */
    KnownPriority["High"] = "High";
})(KnownPriority || (KnownPriority = {}));
/** Known values of {@link JobState} that the service accepts. */
export var KnownJobState;
(function (KnownJobState) {
    /** The job was canceled. This is a final state for the job. */
    KnownJobState["Canceled"] = "Canceled";
    /** The job is in the process of being canceled. This is a transient state for the job. */
    KnownJobState["Canceling"] = "Canceling";
    /** The job has encountered an error. This is a final state for the job. */
    KnownJobState["Error"] = "Error";
    /** The job is finished. This is a final state for the job. */
    KnownJobState["Finished"] = "Finished";
    /** The job is processing. This is a transient state for the job. */
    KnownJobState["Processing"] = "Processing";
    /** The job is in a queued state, waiting for resources to become available. This is a transient state. */
    KnownJobState["Queued"] = "Queued";
    /** The job is being scheduled to run on an available resource. This is a transient state, between queued and processing states. */
    KnownJobState["Scheduled"] = "Scheduled";
})(KnownJobState || (KnownJobState = {}));
/** Known values of {@link JobErrorCode} that the service accepts. */
export var KnownJobErrorCode;
(function (KnownJobErrorCode) {
    /** Fatal service error, please contact support. */
    KnownJobErrorCode["ServiceError"] = "ServiceError";
    /** Transient error, please retry, if retry is unsuccessful, please contact support. */
    KnownJobErrorCode["ServiceTransientError"] = "ServiceTransientError";
    /** While trying to download the input files, the files were not accessible, please check the availability of the source. */
    KnownJobErrorCode["DownloadNotAccessible"] = "DownloadNotAccessible";
    /** While trying to download the input files, there was an issue during transfer (storage service, network errors), see details and check your source. */
    KnownJobErrorCode["DownloadTransientError"] = "DownloadTransientError";
    /** While trying to upload the output files, the destination was not reachable, please check the availability of the destination. */
    KnownJobErrorCode["UploadNotAccessible"] = "UploadNotAccessible";
    /** While trying to upload the output files, there was an issue during transfer (storage service, network errors), see details and check your destination. */
    KnownJobErrorCode["UploadTransientError"] = "UploadTransientError";
    /** There was a problem with the combination of input files and the configuration settings applied, fix the configuration settings and retry with the same input, or change input to match the configuration. */
    KnownJobErrorCode["ConfigurationUnsupported"] = "ConfigurationUnsupported";
    /** There was a problem with the input content (for example: zero byte files, or corrupt/non-decodable files), check the input files. */
    KnownJobErrorCode["ContentMalformed"] = "ContentMalformed";
    /** There was a problem with the format of the input (not valid media file, or an unsupported file/codec), check the validity of the input files. */
    KnownJobErrorCode["ContentUnsupported"] = "ContentUnsupported";
})(KnownJobErrorCode || (KnownJobErrorCode = {}));
/** Known values of {@link JobErrorCategory} that the service accepts. */
export var KnownJobErrorCategory;
(function (KnownJobErrorCategory) {
    /** The error is service related. */
    KnownJobErrorCategory["Service"] = "Service";
    /** The error is download related. */
    KnownJobErrorCategory["Download"] = "Download";
    /** The error is upload related. */
    KnownJobErrorCategory["Upload"] = "Upload";
    /** The error is configuration related. */
    KnownJobErrorCategory["Configuration"] = "Configuration";
    /** The error is related to data in the input files. */
    KnownJobErrorCategory["Content"] = "Content";
})(KnownJobErrorCategory || (KnownJobErrorCategory = {}));
/** Known values of {@link JobRetry} that the service accepts. */
export var KnownJobRetry;
(function (KnownJobRetry) {
    /** Issue needs to be investigated and then the job resubmitted with corrections or retried once the underlying issue has been corrected. */
    KnownJobRetry["DoNotRetry"] = "DoNotRetry";
    /** Issue may be resolved after waiting for a period of time and resubmitting the same Job. */
    KnownJobRetry["MayRetry"] = "MayRetry";
})(KnownJobRetry || (KnownJobRetry = {}));
/** Known values of {@link TrackPropertyType} that the service accepts. */
export var KnownTrackPropertyType;
(function (KnownTrackPropertyType) {
    /** Unknown track property */
    KnownTrackPropertyType["Unknown"] = "Unknown";
    /** Track FourCC */
    KnownTrackPropertyType["FourCC"] = "FourCC";
})(KnownTrackPropertyType || (KnownTrackPropertyType = {}));
/** Known values of {@link TrackPropertyCompareOperation} that the service accepts. */
export var KnownTrackPropertyCompareOperation;
(function (KnownTrackPropertyCompareOperation) {
    /** Unknown track property compare operation */
    KnownTrackPropertyCompareOperation["Unknown"] = "Unknown";
    /** Equal operation */
    KnownTrackPropertyCompareOperation["Equal"] = "Equal";
})(KnownTrackPropertyCompareOperation || (KnownTrackPropertyCompareOperation = {}));
/** Known values of {@link StreamingLocatorContentKeyType} that the service accepts. */
export var KnownStreamingLocatorContentKeyType;
(function (KnownStreamingLocatorContentKeyType) {
    /** Common Encryption using CENC */
    KnownStreamingLocatorContentKeyType["CommonEncryptionCenc"] = "CommonEncryptionCenc";
    /** Common Encryption using CBCS */
    KnownStreamingLocatorContentKeyType["CommonEncryptionCbcs"] = "CommonEncryptionCbcs";
    /** Envelope Encryption */
    KnownStreamingLocatorContentKeyType["EnvelopeEncryption"] = "EnvelopeEncryption";
})(KnownStreamingLocatorContentKeyType || (KnownStreamingLocatorContentKeyType = {}));
/** Known values of {@link StreamingPolicyStreamingProtocol} that the service accepts. */
export var KnownStreamingPolicyStreamingProtocol;
(function (KnownStreamingPolicyStreamingProtocol) {
    /** HLS protocol */
    KnownStreamingPolicyStreamingProtocol["Hls"] = "Hls";
    /** DASH protocol */
    KnownStreamingPolicyStreamingProtocol["Dash"] = "Dash";
    /** SmoothStreaming protocol */
    KnownStreamingPolicyStreamingProtocol["SmoothStreaming"] = "SmoothStreaming";
    /** Download protocol */
    KnownStreamingPolicyStreamingProtocol["Download"] = "Download";
})(KnownStreamingPolicyStreamingProtocol || (KnownStreamingPolicyStreamingProtocol = {}));
/** Known values of {@link EncryptionScheme} that the service accepts. */
export var KnownEncryptionScheme;
(function (KnownEncryptionScheme) {
    /** NoEncryption scheme */
    KnownEncryptionScheme["NoEncryption"] = "NoEncryption";
    /** EnvelopeEncryption scheme */
    KnownEncryptionScheme["EnvelopeEncryption"] = "EnvelopeEncryption";
    /** CommonEncryptionCenc scheme */
    KnownEncryptionScheme["CommonEncryptionCenc"] = "CommonEncryptionCenc";
    /** CommonEncryptionCbcs scheme */
    KnownEncryptionScheme["CommonEncryptionCbcs"] = "CommonEncryptionCbcs";
})(KnownEncryptionScheme || (KnownEncryptionScheme = {}));
/** Known values of {@link LiveEventInputProtocol} that the service accepts. */
export var KnownLiveEventInputProtocol;
(function (KnownLiveEventInputProtocol) {
    /** Smooth Streaming input will be sent by the contribution encoder to the live event. */
    KnownLiveEventInputProtocol["FragmentedMP4"] = "FragmentedMP4";
    /** RTMP input will be sent by the contribution encoder to the live event. */
    KnownLiveEventInputProtocol["Rtmp"] = "RTMP";
})(KnownLiveEventInputProtocol || (KnownLiveEventInputProtocol = {}));
/** Known values of {@link LiveEventEncodingType} that the service accepts. */
export var KnownLiveEventEncodingType;
(function (KnownLiveEventEncodingType) {
    /** This is the same as PassthroughStandard, please see description below. This enumeration value is being deprecated. */
    KnownLiveEventEncodingType["None"] = "None";
    /** A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution. */
    KnownLiveEventEncodingType["Standard"] = "Standard";
    /** A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution. */
    KnownLiveEventEncodingType["Premium1080P"] = "Premium1080p";
    /** The ingested stream passes through the live event from the contribution encoder without any further processing. In the PassthroughBasic mode, ingestion is limited to up to 5Mbps and only 1 concurrent live output is allowed. Live transcription is not available. */
    KnownLiveEventEncodingType["PassthroughBasic"] = "PassthroughBasic";
    /** The ingested stream passes through the live event from the contribution encoder without any further processing. Live transcription is available. Ingestion bitrate limits are much higher and up to 3 concurrent live outputs are allowed. */
    KnownLiveEventEncodingType["PassthroughStandard"] = "PassthroughStandard";
})(KnownLiveEventEncodingType || (KnownLiveEventEncodingType = {}));
/** Known values of {@link StretchMode} that the service accepts. */
export var KnownStretchMode;
(function (KnownStretchMode) {
    /** Strictly respect the output resolution without considering the pixel aspect ratio or display aspect ratio of the input video. */
    KnownStretchMode["None"] = "None";
    /** Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9. */
    KnownStretchMode["AutoSize"] = "AutoSize";
    /** Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right. */
    KnownStretchMode["AutoFit"] = "AutoFit";
})(KnownStretchMode || (KnownStretchMode = {}));
/** Known values of {@link LiveEventResourceState} that the service accepts. */
export var KnownLiveEventResourceState;
(function (KnownLiveEventResourceState) {
    /** This is the initial state of the live event after creation (unless autostart was set to true.) No billing occurs in this state. In this state, the live event properties can be updated but streaming is not allowed. */
    KnownLiveEventResourceState["Stopped"] = "Stopped";
    /** Allocate action was called on the live event and resources are being provisioned for this live event. Once allocation completes successfully, the live event will transition to StandBy state. */
    KnownLiveEventResourceState["Allocating"] = "Allocating";
    /** Live event resources have been provisioned and is ready to start. Billing occurs in this state. Most properties can still be updated, however ingest or streaming is not allowed during this state. */
    KnownLiveEventResourceState["StandBy"] = "StandBy";
    /** The live event is being started and resources are being allocated. No billing occurs in this state. Updates or streaming are not allowed during this state. If an error occurs, the live event returns to the Stopped state. */
    KnownLiveEventResourceState["Starting"] = "Starting";
    /** The live event resources have been allocated, ingest and preview URLs have been generated, and it is capable of receiving live streams. At this point, billing is active. You must explicitly call Stop on the live event resource to halt further billing. */
    KnownLiveEventResourceState["Running"] = "Running";
    /** The live event is being stopped and resources are being de-provisioned. No billing occurs in this transient state. Updates or streaming are not allowed during this state. */
    KnownLiveEventResourceState["Stopping"] = "Stopping";
    /** The live event is being deleted. No billing occurs in this transient state. Updates or streaming are not allowed during this state. */
    KnownLiveEventResourceState["Deleting"] = "Deleting";
})(KnownLiveEventResourceState || (KnownLiveEventResourceState = {}));
/** Known values of {@link StreamOptionsFlag} that the service accepts. */
export var KnownStreamOptionsFlag;
(function (KnownStreamOptionsFlag) {
    /** Live streaming with no special latency optimizations. */
    KnownStreamOptionsFlag["Default"] = "Default";
    /** The live event provides lower end to end latency by reducing its internal buffers. */
    KnownStreamOptionsFlag["LowLatency"] = "LowLatency";
    /** The live event is optimized for end to end latency. This option is only available for encoding live events with RTMP input. The outputs can be streamed using HLS or DASH formats. The outputs' archive or DVR rewind length is limited to 6 hours. Use "LowLatency" stream option for all other scenarios. */
    KnownStreamOptionsFlag["LowLatencyV2"] = "LowLatencyV2";
})(KnownStreamOptionsFlag || (KnownStreamOptionsFlag = {}));
/** Known values of {@link AsyncOperationStatus} that the service accepts. */
export var KnownAsyncOperationStatus;
(function (KnownAsyncOperationStatus) {
    /** Succeeded */
    KnownAsyncOperationStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownAsyncOperationStatus["Failed"] = "Failed";
    /** InProgress */
    KnownAsyncOperationStatus["InProgress"] = "InProgress";
})(KnownAsyncOperationStatus || (KnownAsyncOperationStatus = {}));
/** Known values of {@link LiveOutputResourceState} that the service accepts. */
export var KnownLiveOutputResourceState;
(function (KnownLiveOutputResourceState) {
    /** Live output is being created. No content is archived in the asset until the live output is in running state. */
    KnownLiveOutputResourceState["Creating"] = "Creating";
    /** Live output is running and archiving live streaming content to the asset if there is valid input from a contribution encoder. */
    KnownLiveOutputResourceState["Running"] = "Running";
    /** Live output is being deleted. The live asset is being converted from live to on-demand asset. Any streaming URLs created on the live output asset continue to work. */
    KnownLiveOutputResourceState["Deleting"] = "Deleting";
})(KnownLiveOutputResourceState || (KnownLiveOutputResourceState = {}));
/** Known values of {@link StreamingEndpointResourceState} that the service accepts. */
export var KnownStreamingEndpointResourceState;
(function (KnownStreamingEndpointResourceState) {
    /** The initial state of a streaming endpoint after creation. Content is not ready to be streamed from this endpoint. */
    KnownStreamingEndpointResourceState["Stopped"] = "Stopped";
    /** The streaming endpoint is transitioning to the running state. */
    KnownStreamingEndpointResourceState["Starting"] = "Starting";
    /** The streaming endpoint is running. It is able to stream content to clients */
    KnownStreamingEndpointResourceState["Running"] = "Running";
    /** The streaming endpoint is transitioning to the stopped state. */
    KnownStreamingEndpointResourceState["Stopping"] = "Stopping";
    /** The streaming endpoint is being deleted. */
    KnownStreamingEndpointResourceState["Deleting"] = "Deleting";
    /** The streaming endpoint is increasing or decreasing scale units. */
    KnownStreamingEndpointResourceState["Scaling"] = "Scaling";
})(KnownStreamingEndpointResourceState || (KnownStreamingEndpointResourceState = {}));
/** Known values of {@link Visibility} that the service accepts. */
export var KnownVisibility;
(function (KnownVisibility) {
    /** The track is hidden to video player. */
    KnownVisibility["Hidden"] = "Hidden";
    /** The track is visible to video player. */
    KnownVisibility["Visible"] = "Visible";
})(KnownVisibility || (KnownVisibility = {}));
/** Known values of {@link ContentKeyPolicyPlayReadyUnknownOutputPassingOption} that the service accepts. */
export var KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption;
(function (KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption) {
    /** Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version. */
    KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption["Unknown"] = "Unknown";
    /** Passing the video portion of protected content to an Unknown Output is not allowed. */
    KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption["NotAllowed"] = "NotAllowed";
    /** Passing the video portion of protected content to an Unknown Output is allowed. */
    KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption["Allowed"] = "Allowed";
    /** Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution. */
    KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption["AllowedWithVideoConstriction"] = "AllowedWithVideoConstriction";
})(KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption || (KnownContentKeyPolicyPlayReadyUnknownOutputPassingOption = {}));
/** Known values of {@link SecurityLevel} that the service accepts. */
export var KnownSecurityLevel;
(function (KnownSecurityLevel) {
    /** Represents a SecurityLevel that is unavailable in current API version. */
    KnownSecurityLevel["Unknown"] = "Unknown";
    /** For clients under development or test. No protection against unauthorized use. */
    KnownSecurityLevel["SL150"] = "SL150";
    /** For hardened devices and applications consuming commercial content. Software or hardware protection. */
    KnownSecurityLevel["SL2000"] = "SL2000";
    /** For hardened devices only. Hardware protection. */
    KnownSecurityLevel["SL3000"] = "SL3000";
})(KnownSecurityLevel || (KnownSecurityLevel = {}));
/** Known values of {@link ContentKeyPolicyPlayReadyLicenseType} that the service accepts. */
export var KnownContentKeyPolicyPlayReadyLicenseType;
(function (KnownContentKeyPolicyPlayReadyLicenseType) {
    /** Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version. */
    KnownContentKeyPolicyPlayReadyLicenseType["Unknown"] = "Unknown";
    /** Non persistent license. */
    KnownContentKeyPolicyPlayReadyLicenseType["NonPersistent"] = "NonPersistent";
    /** Persistent license. Allows offline playback. */
    KnownContentKeyPolicyPlayReadyLicenseType["Persistent"] = "Persistent";
})(KnownContentKeyPolicyPlayReadyLicenseType || (KnownContentKeyPolicyPlayReadyLicenseType = {}));
/** Known values of {@link ContentKeyPolicyPlayReadyContentType} that the service accepts. */
export var KnownContentKeyPolicyPlayReadyContentType;
(function (KnownContentKeyPolicyPlayReadyContentType) {
    /** Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version. */
    KnownContentKeyPolicyPlayReadyContentType["Unknown"] = "Unknown";
    /** Unspecified content type. */
    KnownContentKeyPolicyPlayReadyContentType["Unspecified"] = "Unspecified";
    /** Ultraviolet download content type. */
    KnownContentKeyPolicyPlayReadyContentType["UltraVioletDownload"] = "UltraVioletDownload";
    /** Ultraviolet streaming content type. */
    KnownContentKeyPolicyPlayReadyContentType["UltraVioletStreaming"] = "UltraVioletStreaming";
})(KnownContentKeyPolicyPlayReadyContentType || (KnownContentKeyPolicyPlayReadyContentType = {}));
/** Known values of {@link ContentKeyPolicyRestrictionTokenType} that the service accepts. */
export var KnownContentKeyPolicyRestrictionTokenType;
(function (KnownContentKeyPolicyRestrictionTokenType) {
    /** Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version. */
    KnownContentKeyPolicyRestrictionTokenType["Unknown"] = "Unknown";
    /** Simple Web Token. */
    KnownContentKeyPolicyRestrictionTokenType["Swt"] = "Swt";
    /** JSON Web Token. */
    KnownContentKeyPolicyRestrictionTokenType["Jwt"] = "Jwt";
})(KnownContentKeyPolicyRestrictionTokenType || (KnownContentKeyPolicyRestrictionTokenType = {}));
/** Known values of {@link ContentKeyPolicyFairPlayRentalAndLeaseKeyType} that the service accepts. */
export var KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType;
(function (KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType) {
    /** Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version. */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["Unknown"] = "Unknown";
    /** Key duration is not specified. */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["Undefined"] = "Undefined";
    /** Dual expiry for offline rental. */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["DualExpiry"] = "DualExpiry";
    /** Content key can be persisted with an unlimited duration */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["PersistentUnlimited"] = "PersistentUnlimited";
    /** Content key can be persisted and the valid duration is limited by the Rental Duration value */
    KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType["PersistentLimited"] = "PersistentLimited";
})(KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType || (KnownContentKeyPolicyFairPlayRentalAndLeaseKeyType = {}));
/** Known values of {@link AacAudioProfile} that the service accepts. */
export var KnownAacAudioProfile;
(function (KnownAacAudioProfile) {
    /** Specifies that the output audio is to be encoded into AAC Low Complexity profile (AAC-LC). */
    KnownAacAudioProfile["AacLc"] = "AacLc";
    /** Specifies that the output audio is to be encoded into HE-AAC v1 profile. */
    KnownAacAudioProfile["HeAacV1"] = "HeAacV1";
    /** Specifies that the output audio is to be encoded into HE-AAC v2 profile. */
    KnownAacAudioProfile["HeAacV2"] = "HeAacV2";
})(KnownAacAudioProfile || (KnownAacAudioProfile = {}));
/** Known values of {@link H265VideoProfile} that the service accepts. */
export var KnownH265VideoProfile;
(function (KnownH265VideoProfile) {
    /** Tells the encoder to automatically determine the appropriate H.265 profile. */
    KnownH265VideoProfile["Auto"] = "Auto";
    /** Main profile (https://x265.readthedocs.io/en/default/cli.html?highlight=profile#profile-level-tier) */
    KnownH265VideoProfile["Main"] = "Main";
    /** Main 10 profile (https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding#Main_10) */
    KnownH265VideoProfile["Main10"] = "Main10";
})(KnownH265VideoProfile || (KnownH265VideoProfile = {}));
/** Known values of {@link VideoSyncMode} that the service accepts. */
export var KnownVideoSyncMode;
(function (KnownVideoSyncMode) {
    /** This is the default method. Chooses between Cfr and Vfr depending on muxer capabilities. For output format MP4, the default mode is Cfr. */
    KnownVideoSyncMode["Auto"] = "Auto";
    /** The presentation timestamps on frames are passed through from the input file to the output file writer. Recommended when the input source has variable frame rate, and are attempting to produce multiple layers for adaptive streaming in the output which have aligned GOP boundaries. Note: if two or more frames in the input have duplicate timestamps, then the output will also have the same behavior */
    KnownVideoSyncMode["Passthrough"] = "Passthrough";
    /** Input frames will be repeated and/or dropped as needed to achieve exactly the requested constant frame rate. Recommended when the output frame rate is explicitly set at a specified value */
    KnownVideoSyncMode["Cfr"] = "Cfr";
    /** Similar to the Passthrough mode, but if the input has frames that have duplicate timestamps, then only one frame is passed through to the output, and others are dropped. Recommended when the number of output frames is expected to be equal to the number of input frames. For example, the output is used to calculate a quality metric like PSNR against the input */
    KnownVideoSyncMode["Vfr"] = "Vfr";
})(KnownVideoSyncMode || (KnownVideoSyncMode = {}));
/** Known values of {@link H265Complexity} that the service accepts. */
export var KnownH265Complexity;
(function (KnownH265Complexity) {
    /** Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    KnownH265Complexity["Speed"] = "Speed";
    /** Tells the encoder to use settings that achieve a balance between speed and quality. */
    KnownH265Complexity["Balanced"] = "Balanced";
    /** Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time. */
    KnownH265Complexity["Quality"] = "Quality";
})(KnownH265Complexity || (KnownH265Complexity = {}));
/** Known values of {@link ChannelMapping} that the service accepts. */
export var KnownChannelMapping;
(function (KnownChannelMapping) {
    /** The Front Left Channel. */
    KnownChannelMapping["FrontLeft"] = "FrontLeft";
    /** The Front Right Channel. */
    KnownChannelMapping["FrontRight"] = "FrontRight";
    /** The Center Channel. */
    KnownChannelMapping["Center"] = "Center";
    /** Low Frequency Effects Channel.  Sometimes referred to as the Subwoofer. */
    KnownChannelMapping["LowFrequencyEffects"] = "LowFrequencyEffects";
    /** The Back Left Channel.  Sometimes referred to as the Left Surround Channel. */
    KnownChannelMapping["BackLeft"] = "BackLeft";
    /** The Back Right Channel.  Sometimes referred to as the Right Surround Channel. */
    KnownChannelMapping["BackRight"] = "BackRight";
    /** The Left Stereo channel.  Sometimes referred to as Down Mix Left. */
    KnownChannelMapping["StereoLeft"] = "StereoLeft";
    /** The Right Stereo channel.  Sometimes referred to as Down Mix Right. */
    KnownChannelMapping["StereoRight"] = "StereoRight";
})(KnownChannelMapping || (KnownChannelMapping = {}));
/** Known values of {@link TrackAttribute} that the service accepts. */
export var KnownTrackAttribute;
(function (KnownTrackAttribute) {
    /** The bitrate of the track. */
    KnownTrackAttribute["Bitrate"] = "Bitrate";
    /** The language of the track. */
    KnownTrackAttribute["Language"] = "Language";
})(KnownTrackAttribute || (KnownTrackAttribute = {}));
/** Known values of {@link AttributeFilter} that the service accepts. */
export var KnownAttributeFilter;
(function (KnownAttributeFilter) {
    /** All tracks will be included. */
    KnownAttributeFilter["All"] = "All";
    /** The first track will be included when the attribute is sorted in descending order.  Generally used to select the largest bitrate. */
    KnownAttributeFilter["Top"] = "Top";
    /** The first track will be included when the attribute is sorted in ascending order.  Generally used to select the smallest bitrate. */
    KnownAttributeFilter["Bottom"] = "Bottom";
    /** Any tracks that have an attribute equal to the value given will be included. */
    KnownAttributeFilter["ValueEquals"] = "ValueEquals";
})(KnownAttributeFilter || (KnownAttributeFilter = {}));
/** Known values of {@link AnalysisResolution} that the service accepts. */
export var KnownAnalysisResolution;
(function (KnownAnalysisResolution) {
    /** SourceResolution */
    KnownAnalysisResolution["SourceResolution"] = "SourceResolution";
    /** StandardDefinition */
    KnownAnalysisResolution["StandardDefinition"] = "StandardDefinition";
})(KnownAnalysisResolution || (KnownAnalysisResolution = {}));
/** Known values of {@link FaceRedactorMode} that the service accepts. */
export var KnownFaceRedactorMode;
(function (KnownFaceRedactorMode) {
    /** Analyze mode detects faces and outputs a metadata file with the results. Allows editing of the metadata file before faces are blurred with Redact mode. */
    KnownFaceRedactorMode["Analyze"] = "Analyze";
    /** Redact mode consumes the metadata file from Analyze mode and redacts the faces found. */
    KnownFaceRedactorMode["Redact"] = "Redact";
    /** Combined mode does the Analyze and Redact steps in one pass when editing the analyzed faces is not desired. */
    KnownFaceRedactorMode["Combined"] = "Combined";
})(KnownFaceRedactorMode || (KnownFaceRedactorMode = {}));
/** Known values of {@link BlurType} that the service accepts. */
export var KnownBlurType;
(function (KnownBlurType) {
    /** Box: debug filter, bounding box only */
    KnownBlurType["Box"] = "Box";
    /** Low: box-car blur filter */
    KnownBlurType["Low"] = "Low";
    /** Med: Gaussian blur filter */
    KnownBlurType["Med"] = "Med";
    /** High: Confuse blur filter */
    KnownBlurType["High"] = "High";
    /** Black: Black out filter */
    KnownBlurType["Black"] = "Black";
})(KnownBlurType || (KnownBlurType = {}));
/** Known values of {@link AudioAnalysisMode} that the service accepts. */
export var KnownAudioAnalysisMode;
(function (KnownAudioAnalysisMode) {
    /** Performs all operations included in the Basic mode, additionally performing language detection and speaker diarization. */
    KnownAudioAnalysisMode["Standard"] = "Standard";
    /** This mode performs speech-to-text transcription and generation of a VTT subtitle/caption file. The output of this mode includes an Insights JSON file including only the keywords, transcription,and timing information. Automatic language detection and speaker diarization are not included in this mode. */
    KnownAudioAnalysisMode["Basic"] = "Basic";
})(KnownAudioAnalysisMode || (KnownAudioAnalysisMode = {}));
/** Known values of {@link DeinterlaceParity} that the service accepts. */
export var KnownDeinterlaceParity;
(function (KnownDeinterlaceParity) {
    /** Automatically detect the order of fields */
    KnownDeinterlaceParity["Auto"] = "Auto";
    /** Apply top field first processing of input video. */
    KnownDeinterlaceParity["TopFieldFirst"] = "TopFieldFirst";
    /** Apply bottom field first processing of input video. */
    KnownDeinterlaceParity["BottomFieldFirst"] = "BottomFieldFirst";
})(KnownDeinterlaceParity || (KnownDeinterlaceParity = {}));
/** Known values of {@link DeinterlaceMode} that the service accepts. */
export var KnownDeinterlaceMode;
(function (KnownDeinterlaceMode) {
    /** Disables de-interlacing of the source video. */
    KnownDeinterlaceMode["Off"] = "Off";
    /** Apply automatic pixel adaptive de-interlacing on each frame in the input video. */
    KnownDeinterlaceMode["AutoPixelAdaptive"] = "AutoPixelAdaptive";
})(KnownDeinterlaceMode || (KnownDeinterlaceMode = {}));
/** Known values of {@link Rotation} that the service accepts. */
export var KnownRotation;
(function (KnownRotation) {
    /** Automatically detect and rotate as needed. */
    KnownRotation["Auto"] = "Auto";
    /** Do not rotate the video.  If the output format supports it, any metadata about rotation is kept intact. */
    KnownRotation["None"] = "None";
    /** Do not rotate the video but remove any metadata about the rotation. */
    KnownRotation["Rotate0"] = "Rotate0";
    /** Rotate 90 degrees clockwise. */
    KnownRotation["Rotate90"] = "Rotate90";
    /** Rotate 180 degrees clockwise. */
    KnownRotation["Rotate180"] = "Rotate180";
    /** Rotate 270 degrees clockwise. */
    KnownRotation["Rotate270"] = "Rotate270";
})(KnownRotation || (KnownRotation = {}));
/** Known values of {@link H264VideoProfile} that the service accepts. */
export var KnownH264VideoProfile;
(function (KnownH264VideoProfile) {
    /** Tells the encoder to automatically determine the appropriate H.264 profile. */
    KnownH264VideoProfile["Auto"] = "Auto";
    /** Baseline profile */
    KnownH264VideoProfile["Baseline"] = "Baseline";
    /** Main profile */
    KnownH264VideoProfile["Main"] = "Main";
    /** High profile. */
    KnownH264VideoProfile["High"] = "High";
    /** High 4:2:2 profile. */
    KnownH264VideoProfile["High422"] = "High422";
    /** High 4:4:4 predictive profile. */
    KnownH264VideoProfile["High444"] = "High444";
})(KnownH264VideoProfile || (KnownH264VideoProfile = {}));
/** Known values of {@link EntropyMode} that the service accepts. */
export var KnownEntropyMode;
(function (KnownEntropyMode) {
    /** Context Adaptive Binary Arithmetic Coder (CABAC) entropy encoding. */
    KnownEntropyMode["Cabac"] = "Cabac";
    /** Context Adaptive Variable Length Coder (CAVLC) entropy encoding. */
    KnownEntropyMode["Cavlc"] = "Cavlc";
})(KnownEntropyMode || (KnownEntropyMode = {}));
/** Known values of {@link H264Complexity} that the service accepts. */
export var KnownH264Complexity;
(function (KnownH264Complexity) {
    /** Tells the encoder to use settings that are optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    KnownH264Complexity["Speed"] = "Speed";
    /** Tells the encoder to use settings that achieve a balance between speed and quality. */
    KnownH264Complexity["Balanced"] = "Balanced";
    /** Tells the encoder to use settings that are optimized to produce higher quality output at the expense of slower overall encode time. */
    KnownH264Complexity["Quality"] = "Quality";
})(KnownH264Complexity || (KnownH264Complexity = {}));
/** Known values of {@link H264RateControlMode} that the service accepts. */
export var KnownH264RateControlMode;
(function (KnownH264RateControlMode) {
    /** Average Bitrate (ABR) mode that hits the target bitrate: Default mode. */
    KnownH264RateControlMode["ABR"] = "ABR";
    /** Constant Bitrate (CBR) mode that tightens bitrate variations around target bitrate. */
    KnownH264RateControlMode["CBR"] = "CBR";
    /** Constant Rate Factor (CRF) mode that targets at constant subjective quality. */
    KnownH264RateControlMode["CRF"] = "CRF";
})(KnownH264RateControlMode || (KnownH264RateControlMode = {}));
/** Known values of {@link Complexity} that the service accepts. */
export var KnownComplexity;
(function (KnownComplexity) {
    /** Configures the encoder to use settings optimized for faster encoding. Quality is sacrificed to decrease encoding time. */
    KnownComplexity["Speed"] = "Speed";
    /** Configures the encoder to use settings that achieve a balance between speed and quality. */
    KnownComplexity["Balanced"] = "Balanced";
    /** Configures the encoder to use settings optimized to produce higher quality output at the expense of slower overall encode time. */
    KnownComplexity["Quality"] = "Quality";
})(KnownComplexity || (KnownComplexity = {}));
/** Known values of {@link InterleaveOutput} that the service accepts. */
export var KnownInterleaveOutput;
(function (KnownInterleaveOutput) {
    /** The output is video-only or audio-only. */
    KnownInterleaveOutput["NonInterleavedOutput"] = "NonInterleavedOutput";
    /** The output includes both audio and video. */
    KnownInterleaveOutput["InterleavedOutput"] = "InterleavedOutput";
})(KnownInterleaveOutput || (KnownInterleaveOutput = {}));
/** Known values of {@link EncoderNamedPreset} that the service accepts. */
export var KnownEncoderNamedPreset;
(function (KnownEncoderNamedPreset) {
    /** Produces an MP4 file where the video is encoded with H.264 codec at 2200 kbps and a picture height of 480 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H264SingleBitrateSD"] = "H264SingleBitrateSD";
    /** Produces an MP4 file where the video is encoded with H.264 codec at 4500 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H264SingleBitrate720P"] = "H264SingleBitrate720p";
    /** Produces an MP4 file where the video is encoded with H.264 codec at 6750 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H264SingleBitrate1080P"] = "H264SingleBitrate1080p";
    /** Produces a set of GOP aligned MP4 files with H.264 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best. */
    KnownEncoderNamedPreset["AdaptiveStreaming"] = "AdaptiveStreaming";
    /** Produces a single MP4 file containing only stereo audio encoded at 192 kbps. */
    KnownEncoderNamedPreset["AACGoodQualityAudio"] = "AACGoodQualityAudio";
    /** Exposes an experimental preset for content-aware encoding. Given any input content, the service attempts to automatically determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. The underlying algorithms will continue to evolve over time. The output will contain MP4 files with video and audio interleaved. */
    KnownEncoderNamedPreset["ContentAwareEncodingExperimental"] = "ContentAwareEncodingExperimental";
    /** Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved. */
    KnownEncoderNamedPreset["ContentAwareEncoding"] = "ContentAwareEncoding";
    /** Copy all video and audio streams from the input asset as non-interleaved video and audio output files. This preset can be used to clip an existing asset or convert a group of key frame (GOP) aligned MP4 files as an asset that can be streamed. */
    KnownEncoderNamedPreset["CopyAllBitrateNonInterleaved"] = "CopyAllBitrateNonInterleaved";
    /** Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 1080p and goes down to 180p. */
    KnownEncoderNamedPreset["H264MultipleBitrate1080P"] = "H264MultipleBitrate1080p";
    /** Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps to 400 kbps, and stereo AAC audio. Resolution starts at 720p and goes down to 180p. */
    KnownEncoderNamedPreset["H264MultipleBitrate720P"] = "H264MultipleBitrate720p";
    /** Produces a set of 5 GOP-aligned MP4 files, ranging from 1900kbps to 400 kbps, and stereo AAC audio. Resolution starts at 480p and goes down to 240p. */
    KnownEncoderNamedPreset["H264MultipleBitrateSD"] = "H264MultipleBitrateSD";
    /** Produces a set of GOP-aligned MP4s by using content-aware encoding. Given any input content, the service performs an initial lightweight analysis of the input content, and uses the results to determine the optimal number of layers, appropriate bitrate and resolution settings for delivery by adaptive streaming. This preset is particularly effective for low and medium complexity videos, where the output files will be at lower bitrates but at a quality that still delivers a good experience to viewers. The output will contain MP4 files with video and audio interleaved. */
    KnownEncoderNamedPreset["H265ContentAwareEncoding"] = "H265ContentAwareEncoding";
    /** Produces a set of GOP aligned MP4 files with H.265 video and stereo AAC audio. Auto-generates a bitrate ladder based on the input resolution, bitrate and frame rate. The auto-generated preset will never exceed the input resolution. For example, if the input is 720p, output will remain 720p at best. */
    KnownEncoderNamedPreset["H265AdaptiveStreaming"] = "H265AdaptiveStreaming";
    /** Produces an MP4 file where the video is encoded with H.265 codec at 1800 kbps and a picture height of 720 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H265SingleBitrate720P"] = "H265SingleBitrate720p";
    /** Produces an MP4 file where the video is encoded with H.265 codec at 3500 kbps and a picture height of 1080 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H265SingleBitrate1080P"] = "H265SingleBitrate1080p";
    /** Produces an MP4 file where the video is encoded with H.265 codec at 9500 kbps and a picture height of 2160 pixels, and the stereo audio is encoded with AAC-LC codec at 128 kbps. */
    KnownEncoderNamedPreset["H265SingleBitrate4K"] = "H265SingleBitrate4K";
})(KnownEncoderNamedPreset || (KnownEncoderNamedPreset = {}));
/** Known values of {@link InsightsType} that the service accepts. */
export var KnownInsightsType;
(function (KnownInsightsType) {
    /** Generate audio only insights. Ignore video even if present. Fails if no audio is present. */
    KnownInsightsType["AudioInsightsOnly"] = "AudioInsightsOnly";
    /** Generate video only insights. Ignore audio if present. Fails if no video is present. */
    KnownInsightsType["VideoInsightsOnly"] = "VideoInsightsOnly";
    /** Generate both audio and video insights. Fails if either audio or video Insights fail. */
    KnownInsightsType["AllInsights"] = "AllInsights";
})(KnownInsightsType || (KnownInsightsType = {}));
//# sourceMappingURL=index.js.map