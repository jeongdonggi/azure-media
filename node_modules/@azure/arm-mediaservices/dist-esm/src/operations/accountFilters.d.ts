import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AccountFilters } from "../operationsInterfaces";
import { AzureMediaServices } from "../azureMediaServices";
import { AccountFilter, AccountFiltersListOptionalParams, AccountFiltersGetOptionalParams, AccountFiltersGetResponse, AccountFiltersCreateOrUpdateOptionalParams, AccountFiltersCreateOrUpdateResponse, AccountFiltersDeleteOptionalParams, AccountFiltersUpdateOptionalParams, AccountFiltersUpdateResponse } from "../models";
/** Class containing AccountFilters operations. */
export declare class AccountFiltersImpl implements AccountFilters {
    private readonly client;
    /**
     * Initialize a new instance of the class AccountFilters class.
     * @param client Reference to the service client
     */
    constructor(client: AzureMediaServices);
    /**
     * List Account Filters in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: AccountFiltersListOptionalParams): PagedAsyncIterableIterator<AccountFilter>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List Account Filters in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the details of an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, filterName: string, options?: AccountFiltersGetOptionalParams): Promise<AccountFiltersGetResponse>;
    /**
     * Creates or updates an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, filterName: string, parameters: AccountFilter, options?: AccountFiltersCreateOrUpdateOptionalParams): Promise<AccountFiltersCreateOrUpdateResponse>;
    /**
     * Deletes an Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, filterName: string, options?: AccountFiltersDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing Account Filter in the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param filterName The Account Filter name
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, filterName: string, parameters: AccountFilter, options?: AccountFiltersUpdateOptionalParams): Promise<AccountFiltersUpdateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=accountFilters.d.ts.map