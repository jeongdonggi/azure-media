import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Mediaservices } from "../operationsInterfaces";
import { AzureMediaServices } from "../azureMediaServices";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { MediaService, MediaservicesListOptionalParams, MediaservicesListBySubscriptionOptionalParams, MediaservicesGetOptionalParams, MediaservicesGetResponse, MediaservicesCreateOrUpdateOptionalParams, MediaservicesCreateOrUpdateResponse, MediaservicesDeleteOptionalParams, MediaServiceUpdate, MediaservicesUpdateOptionalParams, MediaservicesUpdateResponse, SyncStorageKeysInput, MediaservicesSyncStorageKeysOptionalParams, ListEdgePoliciesInput, MediaservicesListEdgePoliciesOptionalParams, MediaservicesListEdgePoliciesResponse } from "../models";
/** Class containing Mediaservices operations. */
export declare class MediaservicesImpl implements Mediaservices {
    private readonly client;
    /**
     * Initialize a new instance of the class Mediaservices class.
     * @param client Reference to the service client
     */
    constructor(client: AzureMediaServices);
    /**
     * List Media Services accounts in the resource group
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: MediaservicesListOptionalParams): PagedAsyncIterableIterator<MediaService>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List Media Services accounts in the subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: MediaservicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<MediaService>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * List Media Services accounts in the resource group
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the details of a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, options?: MediaservicesGetOptionalParams): Promise<MediaservicesGetResponse>;
    /**
     * Creates or updates a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, parameters: MediaService, options?: MediaservicesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<MediaservicesCreateOrUpdateResponse>, MediaservicesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, accountName: string, parameters: MediaService, options?: MediaservicesCreateOrUpdateOptionalParams): Promise<MediaservicesCreateOrUpdateResponse>;
    /**
     * Deletes a Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, options?: MediaservicesDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, parameters: MediaServiceUpdate, options?: MediaservicesUpdateOptionalParams): Promise<PollerLike<PollOperationState<MediaservicesUpdateResponse>, MediaservicesUpdateResponse>>;
    /**
     * Updates an existing Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, parameters: MediaServiceUpdate, options?: MediaservicesUpdateOptionalParams): Promise<MediaservicesUpdateResponse>;
    /**
     * Synchronizes storage account keys for a storage account associated with the Media Service account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    syncStorageKeys(resourceGroupName: string, accountName: string, parameters: SyncStorageKeysInput, options?: MediaservicesSyncStorageKeysOptionalParams): Promise<void>;
    /**
     * List all the media edge policies associated with the Media Services account.
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    listEdgePolicies(resourceGroupName: string, accountName: string, parameters: ListEdgePoliciesInput, options?: MediaservicesListEdgePoliciesOptionalParams): Promise<MediaservicesListEdgePoliciesResponse>;
    /**
     * List Media Services accounts in the subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=mediaservices.d.ts.map