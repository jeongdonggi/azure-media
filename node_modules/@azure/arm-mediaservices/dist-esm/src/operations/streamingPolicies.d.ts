import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { StreamingPolicies } from "../operationsInterfaces";
import { AzureMediaServices } from "../azureMediaServices";
import { StreamingPolicy, StreamingPoliciesListOptionalParams, StreamingPoliciesGetOptionalParams, StreamingPoliciesGetResponse, StreamingPoliciesCreateOptionalParams, StreamingPoliciesCreateResponse, StreamingPoliciesDeleteOptionalParams } from "../models";
/** Class containing StreamingPolicies operations. */
export declare class StreamingPoliciesImpl implements StreamingPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class StreamingPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: AzureMediaServices);
    /**
     * Lists the Streaming Policies in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: StreamingPoliciesListOptionalParams): PagedAsyncIterableIterator<StreamingPolicy>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists the Streaming Policies in the account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the details of a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, streamingPolicyName: string, options?: StreamingPoliciesGetOptionalParams): Promise<StreamingPoliciesGetResponse>;
    /**
     * Create a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    create(resourceGroupName: string, accountName: string, streamingPolicyName: string, parameters: StreamingPolicy, options?: StreamingPoliciesCreateOptionalParams): Promise<StreamingPoliciesCreateResponse>;
    /**
     * Deletes a Streaming Policy in the Media Services account
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param streamingPolicyName The Streaming Policy name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, streamingPolicyName: string, options?: StreamingPoliciesDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the Azure subscription.
     * @param accountName The Media Services account name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=streamingPolicies.d.ts.map