/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureMediaServices } from "@azure/arm-mediaservices";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Create a Streaming Policy in the Media Services account
 *
 * @summary Create a Streaming Policy in the Media Services account
 * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCbcs-clearKeyEncryption.json
 */
function createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCbcs() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly";
        const parameters = {
            commonEncryptionCbcs: {
                clearKeyEncryptionConfiguration: {
                    customKeysAcquisitionUrlTemplate: "https://contoso.com/{AlternativeMediaId}/clearkey/"
                },
                contentKeys: { defaultKey: { label: "cbcsDefaultKey" } },
                enabledProtocols: {
                    dash: false,
                    download: false,
                    hls: true,
                    smoothStreaming: false
                }
            },
            defaultContentKeyPolicyName: "PolicyWithMultipleOptions"
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = yield client.streamingPolicies.create(resourceGroupName, accountName, streamingPolicyName, parameters);
        console.log(result);
    });
}
createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCbcs().catch(console.error);
/**
 * This sample demonstrates how to Create a Streaming Policy in the Media Services account
 *
 * @summary Create a Streaming Policy in the Media Services account
 * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCenc-clearKeyEncryption.json
 */
function createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCenc() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly";
        const parameters = {
            commonEncryptionCenc: {
                clearKeyEncryptionConfiguration: {
                    customKeysAcquisitionUrlTemplate: "https://contoso.com/{AlternativeMediaId}/clearkey/"
                },
                clearTracks: [
                    {
                        trackSelections: [
                            { operation: "Equal", property: "FourCC", value: "hev1" }
                        ]
                    }
                ],
                contentKeys: { defaultKey: { label: "cencDefaultKey" } },
                enabledProtocols: {
                    dash: true,
                    download: false,
                    hls: false,
                    smoothStreaming: true
                }
            },
            defaultContentKeyPolicyName: "PolicyWithPlayReadyOptionAndOpenRestriction"
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = yield client.streamingPolicies.create(resourceGroupName, accountName, streamingPolicyName, parameters);
        console.log(result);
    });
}
createsAStreamingPolicyWithClearKeyEncryptionInCommonEncryptionCenc().catch(console.error);
/**
 * This sample demonstrates how to Create a Streaming Policy in the Media Services account
 *
 * @summary Create a Streaming Policy in the Media Services account
 * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-clear.json
 */
function createsAStreamingPolicyWithClearStreaming() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedClearStreamingPolicy";
        const parameters = {
            noEncryption: {
                enabledProtocols: {
                    dash: true,
                    download: true,
                    hls: true,
                    smoothStreaming: true
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = yield client.streamingPolicies.create(resourceGroupName, accountName, streamingPolicyName, parameters);
        console.log(result);
    });
}
createsAStreamingPolicyWithClearStreaming().catch(console.error);
/**
 * This sample demonstrates how to Create a Streaming Policy in the Media Services account
 *
 * @summary Create a Streaming Policy in the Media Services account
 * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCbcs-only.json
 */
function createsAStreamingPolicyWithCommonEncryptionCbcsOnly() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCbcsOnly";
        const parameters = {
            commonEncryptionCbcs: {
                contentKeys: { defaultKey: { label: "cbcsDefaultKey" } },
                drm: {
                    fairPlay: {
                        allowPersistentLicense: true,
                        customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"
                    }
                },
                enabledProtocols: {
                    dash: false,
                    download: false,
                    hls: true,
                    smoothStreaming: false
                }
            },
            defaultContentKeyPolicyName: "PolicyWithMultipleOptions"
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = yield client.streamingPolicies.create(resourceGroupName, accountName, streamingPolicyName, parameters);
        console.log(result);
    });
}
createsAStreamingPolicyWithCommonEncryptionCbcsOnly().catch(console.error);
/**
 * This sample demonstrates how to Create a Streaming Policy in the Media Services account
 *
 * @summary Create a Streaming Policy in the Media Services account
 * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-commonEncryptionCenc-only.json
 */
function createsAStreamingPolicyWithCommonEncryptionCencOnly() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithCommonEncryptionCencOnly";
        const parameters = {
            commonEncryptionCenc: {
                clearTracks: [
                    {
                        trackSelections: [
                            { operation: "Equal", property: "FourCC", value: "hev1" }
                        ]
                    }
                ],
                contentKeys: { defaultKey: { label: "cencDefaultKey" } },
                drm: {
                    playReady: {
                        customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                        playReadyCustomAttributes: "PlayReady CustomAttributes"
                    },
                    widevine: {
                        customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"
                    }
                },
                enabledProtocols: {
                    dash: true,
                    download: false,
                    hls: false,
                    smoothStreaming: true
                }
            },
            defaultContentKeyPolicyName: "PolicyWithPlayReadyOptionAndOpenRestriction"
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = yield client.streamingPolicies.create(resourceGroupName, accountName, streamingPolicyName, parameters);
        console.log(result);
    });
}
createsAStreamingPolicyWithCommonEncryptionCencOnly().catch(console.error);
/**
 * This sample demonstrates how to Create a Streaming Policy in the Media Services account
 *
 * @summary Create a Streaming Policy in the Media Services account
 * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-envelopeEncryption-only.json
 */
function createsAStreamingPolicyWithEnvelopeEncryptionOnly() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicyWithEnvelopeEncryptionOnly";
        const parameters = {
            defaultContentKeyPolicyName: "PolicyWithClearKeyOptionAndTokenRestriction",
            envelopeEncryption: {
                contentKeys: { defaultKey: { label: "aesDefaultKey" } },
                customKeyAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
                enabledProtocols: {
                    dash: true,
                    download: false,
                    hls: true,
                    smoothStreaming: true
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = yield client.streamingPolicies.create(resourceGroupName, accountName, streamingPolicyName, parameters);
        console.log(result);
    });
}
createsAStreamingPolicyWithEnvelopeEncryptionOnly().catch(console.error);
/**
 * This sample demonstrates how to Create a Streaming Policy in the Media Services account
 *
 * @summary Create a Streaming Policy in the Media Services account
 * x-ms-original-file: specification/mediaservices/resource-manager/Microsoft.Media/stable/2022-08-01/examples/streaming-policies-create-secure-streaming.json
 */
function createsAStreamingPolicyWithSecureStreaming() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "contoso";
        const accountName = "contosomedia";
        const streamingPolicyName = "UserCreatedSecureStreamingPolicy";
        const parameters = {
            commonEncryptionCbcs: {
                contentKeys: { defaultKey: { label: "cbcsDefaultKey" } },
                drm: {
                    fairPlay: {
                        allowPersistentLicense: true,
                        customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}"
                    }
                },
                enabledProtocols: {
                    dash: false,
                    download: false,
                    hls: true,
                    smoothStreaming: false
                }
            },
            commonEncryptionCenc: {
                clearTracks: [
                    {
                        trackSelections: [
                            { operation: "Equal", property: "FourCC", value: "hev1" }
                        ]
                    }
                ],
                contentKeys: { defaultKey: { label: "cencDefaultKey" } },
                drm: {
                    playReady: {
                        customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
                        playReadyCustomAttributes: "PlayReady CustomAttributes"
                    },
                    widevine: {
                        customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId"
                    }
                },
                enabledProtocols: {
                    dash: true,
                    download: false,
                    hls: false,
                    smoothStreaming: true
                }
            },
            defaultContentKeyPolicyName: "PolicyWithMultipleOptions",
            envelopeEncryption: {
                contentKeys: { defaultKey: { label: "aesDefaultKey" } },
                customKeyAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/envelope/{ContentKeyId}",
                enabledProtocols: {
                    dash: true,
                    download: false,
                    hls: true,
                    smoothStreaming: true
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureMediaServices(credential, subscriptionId);
        const result = yield client.streamingPolicies.create(resourceGroupName, accountName, streamingPolicyName, parameters);
        console.log(result);
    });
}
createsAStreamingPolicyWithSecureStreaming().catch(console.error);
//# sourceMappingURL=streamingPoliciesCreateSample.js.map